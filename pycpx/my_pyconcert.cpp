/* Generated by Cython 0.20.1 on Tue Sep  2 15:00:50 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_1"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pycpx__pyconcert
#define __PYX_HAVE_API__pycpx__pyconcert
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "cplex_interface.hpp"
#include "py_new_wrapper.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "pyconcert.pyx",
  "__init__.pxd",
  "type.pxd",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name; /* for error messages only */
  struct __Pyx_StructField_* fields;
  size_t size;     /* sizeof(type) */
  size_t arraysize[8]; /* length of array in each dimension */
  int ndim;
  char typegroup; /* _R_eal, _C_omplex, Signed _I_nt, _U_nsigned int, _S_truct, _P_ointer, _O_bject, c_H_ar */
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper;
struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression;
struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint;
struct __pyx_obj_5pycpx_9pyconcert_CPlexModel;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_5pycpx_9pyconcert_15CPlexExpression_sum;
struct __pyx_opt_args_5pycpx_9pyconcert_10CPlexModel_solve;

/* "pycpx/pyconcert.pyx":824
 * 
 * 
 *     cpdef CPlexExpression sum(self, axis = None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the sum of the current
 */
struct __pyx_opt_args_5pycpx_9pyconcert_15CPlexExpression_sum {
  int __pyx_n;
  PyObject *axis;
};

/* "pycpx/pyconcert.pyx":1840
 * 
 * 
 *     cpdef solve(self, objective, maximize = None, minimize = None,             # <<<<<<<<<<<<<<
 *               bint recycle_variables = False, bint recycle_basis = True,
 *               dict starting_dict = {}, str basis_file = None,
 */
struct __pyx_opt_args_5pycpx_9pyconcert_10CPlexModel_solve {
  int __pyx_n;
  PyObject *maximize;
  PyObject *minimize;
  int recycle_variables;
  int recycle_basis;
  PyObject *starting_dict;
  PyObject *basis_file;
  PyObject *algorithm;
  PyObject *max_threads;
  PyObject *relative_gap;
  PyObject *emphasis;
  PyObject *time_limit;
  PyObject *tree_limit;
  PyObject *variable_select;
};

/* "pycpx/pyconcert.pyx":227
 * cdef class CPlexModel
 * cdef class CPlexExpression
 * cdef class NumericalArrayWrapper             # <<<<<<<<<<<<<<
 * 
 * class CPlexException(Exception):
 */
struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper {
  PyObject_HEAD
  NumericalArray *data;
  PyArrayObject *X;
};


/* "pycpx/pyconcert.pyx":226
 * 
 * cdef class CPlexModel
 * cdef class CPlexExpression             # <<<<<<<<<<<<<<
 * cdef class NumericalArrayWrapper
 * 
 */
struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression {
  PyObject_HEAD
  struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexExpression *__pyx_vtab;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *model;
  int is_simple;
  ExpressionArray *data;
  PyObject *original_size;
  PyObject *key;
  PyObject *__array_priority__;
};


/* "pycpx/pyconcert.pyx":1186
 * # Constraint creation functions
 * 
 * cdef class CPlexConstraint(object):             # <<<<<<<<<<<<<<
 *     cdef CPlexModel model
 *     cdef ConstraintArray *data
 */
struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint {
  PyObject_HEAD
  struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *model;
  ConstraintArray *data;
  size_t id_left;
  size_t id_right;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *hooked_constraint;
};


/* "pycpx/pyconcert.pyx":225
 * #
 * 
 * cdef class CPlexModel             # <<<<<<<<<<<<<<
 * cdef class CPlexExpression
 * cdef class NumericalArrayWrapper
 */
struct __pyx_obj_5pycpx_9pyconcert_CPlexModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *__pyx_vtab;
  size_t hook_id_1;
  size_t hook_id_2;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *hooked_constraint;
  CPlexModelInterface *model;
  int verbosity;
  size_t rv_number;
  PyObject *key_strings;
  PyObject *variables;
  double last_op_time;
};



/* "pycpx/pyconcert.pyx":1397
 *     "netflow"    : CPX_ALG_NET }
 * 
 * cdef class CPlexModel(object):             # <<<<<<<<<<<<<<
 * 
 *     # THis is for the constraint stuff
 */

struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel {
  PyObject *(*setVerbosity)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, int, int __pyx_skip_dispatch);
  PyObject *(*_checkOkay)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *);
  PyObject *(*_checkVerbosity)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *);
  PyObject *(*_getKeyStringId)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *, MetaData);
  PyObject *(*_checkConstraints)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *);
  PyObject *(*_addConstraint)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *);
  PyObject *(*_addConstraints)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *);
  PyObject *(*_removeConstraint)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *);
  PyObject *(*_removeConstraints)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *);
  PyObject *(*solve)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5pycpx_9pyconcert_10CPlexModel_solve *__pyx_optional_args);
  PyObject *(*value)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*asString)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *__pyx_vtabptr_5pycpx_9pyconcert_CPlexModel;


/* "pycpx/pyconcert.pyx":588
 * 
 * 
 * cdef class CPlexExpression(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexModel model
 */

struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexExpression {
  PyObject *(*transpose)(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, int __pyx_skip_dispatch);
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *(*sum)(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, int __pyx_skip_dispatch, struct __pyx_opt_args_5pycpx_9pyconcert_15CPlexExpression_sum *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexExpression *__pyx_vtabptr_5pycpx_9pyconcert_CPlexExpression;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE long __Pyx_div_long(long, long); /* proto */

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

#define UNARY_NEG_WOULD_OVERFLOW(x)            (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback); /*proto*/

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values); /*proto*/
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static void __Pyx_RaiseBufferFallbackError(void); /*proto*/

static void __Pyx_RaiseBufferIndexError(int axis); /*proto*/

#define __Pyx_BufPtrCContig1d(type, buf, i0, s0) ((type)buf + i0)
#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE int __Pyx_PyDict_Contains(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

static double __Pyx__PyObject_AsDouble(PyObject* obj); /* proto */
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj) \
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) : \
 likely(PyInt_CheckExact(obj)) ? \
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj) \
((likely(PyFloat_CheckExact(obj))) ? \
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index); /*proto*/

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name); /*proto*/

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
    PyObject *func_dict;
    PyObject *func_weakreflist;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj; /* No-args super() class cell */
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;   /* Const defaults tuple */
    PyObject *defaults_kwdict;  /* Const kwonly defaults dict */
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations; /* function annotations dict */
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc); /*proto*/
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass); /*proto*/

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name); /*proto*/

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'pycpx.pyconcert' */
static PyTypeObject *__pyx_ptype_5pycpx_9pyconcert_CPlexModel = 0;
static PyTypeObject *__pyx_ptype_5pycpx_9pyconcert_CPlexExpression = 0;
static PyTypeObject *__pyx_ptype_5pycpx_9pyconcert_NumericalArrayWrapper = 0;
static PyTypeObject *__pyx_ptype_5pycpx_9pyconcert_CPlexConstraint = 0;
static PyObject *__pyx_v_5pycpx_9pyconcert_issparse = 0;
static IloEnv __pyx_v_5pycpx_9pyconcert_env;
static PyObject *__pyx_v_5pycpx_9pyconcert_s_scalar = 0;
static PyObject *__pyx_v_5pycpx_9pyconcert__op_type_strings = 0;
static PyObject *__pyx_v_5pycpx_9pyconcert__vartype_map = 0;
static PyObject *__pyx_v_5pycpx_9pyconcert_model_lookup = 0;
static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, ExpressionArray *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newCPE(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, MetaData); /*proto*/
static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newCPEwithVariables(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, MetaData, IloNumVarArray *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newCPEFromCPEWithSameProperties(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, ExpressionArray *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_f_5pycpx_9pyconcert_newNAW(NumericalArray *, PyArrayObject *); /*proto*/
static CYTHON_INLINE MetaData __pyx_f_5pycpx_9pyconcert_metadataFromNDArray(PyArrayObject *, int); /*proto*/
static struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_f_5pycpx_9pyconcert_newCoercedNumericalArray(PyObject *, MetaData); /*proto*/
static PyObject *__pyx_f_5pycpx_9pyconcert_opTypeStrings(int); /*proto*/
static struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newEmptyExpression(int, struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, MetaData, MetaData); /*proto*/
static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_expression_op_expression(int, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_expression_op_array(int, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, PyObject *, int); /*proto*/
static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_expression_op_scalar(int, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, double, int); /*proto*/
static struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_expr_var_op_var(int, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5pycpx_9pyconcert_setSliceParts(Slice *, PyObject *, long); /*proto*/
static CYTHON_INLINE PyArrayObject *__pyx_f_5pycpx_9pyconcert_toDoubleArray_1d(PyObject *, PyObject *, long); /*proto*/
static struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newVariableBlock(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_newCPC(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, MetaData, PyObject *, PyObject *); /*proto*/
static struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_newEmptyConstraint(int, struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *, MetaData, PyObject *, MetaData); /*proto*/
static struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_cstr_expression_op_expression(int, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *); /*proto*/
static struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_cstr_expression_op_array(int, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, PyObject *, int); /*proto*/
static struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_cstr_expression_op_scalar(int, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, PyObject *, int); /*proto*/
static struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_cstr_var_op_var(PyObject *, PyObject *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int_t = { "int_t", NULL, sizeof(__pyx_t_5numpy_int_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "pycpx.pyconcert"
int __pyx_module_is_main_pycpx__pyconcert = 0;

/* Implementation of 'pycpx.pyconcert' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_lambda_funcdef_5pycpx_9pyconcert_lambda1(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_x); /* proto */
static int __pyx_pf_5pycpx_9pyconcert_21NumericalArrayWrapper___init__(CYTHON_UNUSED struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_v_self); /* proto */
static void __pyx_pf_5pycpx_9pyconcert_21NumericalArrayWrapper_2__dealloc__(struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_v_self); /* proto */
static int __pyx_pf_5pycpx_9pyconcert_15CPlexExpression___init__(CYTHON_UNUSED struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_2__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_4__radd__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_6__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_8__rsub__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_10__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_12__rmul__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
#if PY_MAJOR_VERSION < 3
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_14__div__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
#endif
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_16__rdiv__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_18dot(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_20mult(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_22__richcmp__(PyObject *__pyx_v_a1, PyObject *__pyx_v_a2, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_24T(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_26transpose(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_28A(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_30M(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_32__neg__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_34shape(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_36size(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_38__hash__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_40__getitem__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_42sum(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_axis); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_44mean(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_axis); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_46max(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_axis); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_48min(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_axis); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_50__abs__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_52abs(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_54copy(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_56__len__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_58__len__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_60__pos__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_62__copy__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_64__deepcopy__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_66__call__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_18__array_priority_____get__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self); /* proto */
static int __pyx_pf_5pycpx_9pyconcert_15CPlexConstraint___init__(CYTHON_UNUSED struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_self); /* proto */
static void __pyx_pf_5pycpx_9pyconcert_15CPlexConstraint_2__dealloc__(struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_self); /* proto */
static int __pyx_pf_5pycpx_9pyconcert_15CPlexConstraint_4__nonzero__(struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_self); /* proto */
static int __pyx_pf_5pycpx_9pyconcert_10CPlexModel___cinit__(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, int __pyx_v_verbosity); /* proto */
static void __pyx_pf_5pycpx_9pyconcert_10CPlexModel_2__dealloc__(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_4setVerbosity(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, int __pyx_v_verbosity); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_6new(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_size, PyObject *__pyx_v_vtype, PyObject *__pyx_v_lb, PyObject *__pyx_v_ub, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_8constrain(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_constraints); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_10removeConstraint(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_constraints); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_12solve(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_objective, PyObject *__pyx_v_maximize, PyObject *__pyx_v_minimize, int __pyx_v_recycle_variables, int __pyx_v_recycle_basis, PyObject *__pyx_v_starting_dict, PyObject *__pyx_v_basis_file, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_max_threads, PyObject *__pyx_v_relative_gap, PyObject *__pyx_v_emphasis, PyObject *__pyx_v_time_limit, PyObject *__pyx_v_tree_limit, PyObject *__pyx_v_variable_select); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_14saveBasis(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_16maximize(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_objective, PyObject *__pyx_v_options); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_18minimize(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_objective, PyObject *__pyx_v_options); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_20getSolverTime(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_22getNIterations(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_24value(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_var_block_or_expression); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_26asString(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_28__repr__(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_30__getitem__(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_var_block); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_5pycpx_9pyconcert_CPlexModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pycpx_9pyconcert_CPlexExpression(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pycpx_9pyconcert_NumericalArrayWrapper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5pycpx_9pyconcert_CPlexConstraint(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_A[] = "A";
static char __pyx_k_B[] = "B";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_M[] = "M";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_T[] = "T";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "%d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_l[] = "l";
static char __pyx_k_q[] = "q";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k__9[] = ", ";
static char __pyx_k_id[] = "id";
static char __pyx_k_lb[] = "lb";
static char __pyx_k_os[] = "os";
static char __pyx_k_rn[] = "rn";
static char __pyx_k_ub[] = "ub";
static char __pyx_k__31[] = "*";
static char __pyx_k__32[] = "+";
static char __pyx_k__33[] = "-";
static char __pyx_k__34[] = "/";
static char __pyx_k__35[] = "==";
static char __pyx_k__36[] = "!=";
static char __pyx_k__37[] = "<=";
static char __pyx_k__38[] = "<";
static char __pyx_k__39[] = ">";
static char __pyx_k__40[] = ">=";
static char __pyx_k_abs[] = "__abs__";
static char __pyx_k_bas[] = "bas";
static char __pyx_k_d_2[] = "_%d";
static char __pyx_k_d_3[] = "d";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_inf[] = "inf";
static char __pyx_k_int[] = "int_";
static char __pyx_k_nan[] = "nan";
static char __pyx_k_net[] = "net";
static char __pyx_k_s_d[] = "%s[%d]";
static char __pyx_k_s_s[] = "%s-%s";
static char __pyx_k_sum[] = "sum";
static char __pyx_k_zip[] = "zip";
static char __pyx_k_amax[] = "amax";
static char __pyx_k_amin[] = "amin";
static char __pyx_k_auto[] = "auto";
static char __pyx_k_axis[] = "axis";
static char __pyx_k_bool[] = "bool";
static char __pyx_k_copy[] = "copy";
static char __pyx_k_dual[] = "dual";
static char __pyx_k_join[] = "join";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_ones[] = "ones";
static char __pyx_k_real[] = "real";
static char __pyx_k_size[] = "size";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_uint[] = "uint";
static char __pyx_k_array[] = "array";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_empty[] = "empty";
static char __pyx_k_float[] = "float_";
static char __pyx_k_int32[] = "int32";
static char __pyx_k_int64[] = "int64";
static char __pyx_k_int_2[] = "int";
static char __pyx_k_lower[] = "lower";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_range[] = "range";
static char __pyx_k_ravel[] = "ravel";
static char __pyx_k_s_d_d[] = "%s[%d,%d]";
static char __pyx_k_scipy[] = "scipy";
static char __pyx_k_shape[] = "shape";
static char __pyx_k_solve[] = "solve";
static char __pyx_k_value[] = "value";
static char __pyx_k_vtype[] = "vtype";
static char __pyx_k_zeros[] = "zeros";
static char __pyx_k_arange[] = "arange";
static char __pyx_k_binary[] = "binary";
static char __pyx_k_double[] = "double";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_lambda[] = "<lambda>";
static char __pyx_k_matrix[] = "matrix";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_prefix[] = "prefix";
static char __pyx_k_primal[] = "primal";
static char __pyx_k_remove[] = "remove";
static char __pyx_k_scalar[] = "scalar";
static char __pyx_k_sparse[] = "sparse";
static char __pyx_k_suffix[] = "suffix";
static char __pyx_k_uint32[] = "uint32";
static char __pyx_k_uint64[] = "uint64";
static char __pyx_k_argsort[] = "argsort";
static char __pyx_k_asarray[] = "asarray";
static char __pyx_k_barrier[] = "barrier";
static char __pyx_k_boolean[] = "boolean";
static char __pyx_k_float32[] = "float32";
static char __pyx_k_float64[] = "float64";
static char __pyx_k_float_2[] = "float";
static char __pyx_k_getitem[] = "__getitem__";
static char __pyx_k_indices[] = "indices";
static char __pyx_k_integer[] = "integer";
static char __pyx_k_mkstemp[] = "mkstemp";
static char __pyx_k_ndarray[] = "ndarray";
static char __pyx_k_netflow[] = "netflow";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_sifting[] = "sifting";
static char __pyx_k_todense[] = "todense";
static char __pyx_k_Ellipsis[] = "Ellipsis";
static char __pyx_k_KeyError[] = "KeyError";
static char __pyx_k_asString[] = "asString";
static char __pyx_k_emphasis[] = "emphasis";
static char __pyx_k_isfinite[] = "isfinite";
static char __pyx_k_isscalar[] = "isscalar";
static char __pyx_k_issparse[] = "issparse";
static char __pyx_k_itemsize[] = "itemsize";
static char __pyx_k_maximize[] = "maximize";
static char __pyx_k_minimize[] = "minimize";
static char __pyx_k_property[] = "property";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_tempfile[] = "tempfile";
static char __pyx_k_Exception[] = "Exception";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_algorithm[] = "algorithm";
static char __pyx_k_automatic[] = "automatic";
static char __pyx_k_enumerate[] = "enumerate";
static char __pyx_k_iteritems[] = "iteritems";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_objective[] = "objective";
static char __pyx_k_tmp_cplex[] = "tmp_cplex";
static char __pyx_k_transpose[] = "transpose";
static char __pyx_k_verbosity[] = "verbosity";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_basis_file[] = "basis_file";
static char __pyx_k_concurrent[] = "concurrent";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_time_limit[] = "time_limit";
static char __pyx_k_tree_limit[] = "tree_limit";
static char __pyx_k_ImportError[] = "ImportError";
static char __pyx_k_lower_bound[] = "lower_bound";
static char __pyx_k_max_threads[] = "max_threads";
static char __pyx_k_s_d_d_d_d_d[] = "%s-%d-%d-%d-%d-%d";
static char __pyx_k_upper_bound[] = "upper_bound";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_numpy_random[] = "numpy.random";
static char __pyx_k_relative_gap[] = "relative_gap";
static char __pyx_k_scipy_sparse[] = "scipy.sparse";
static char __pyx_k_setVerbosity[] = "setVerbosity";
static char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static char __pyx_k_recycle_basis[] = "recycle_basis";
static char __pyx_k_starting_dict[] = "starting_dict";
static char __pyx_k_CPlexException[] = "CPlexException";
static char __pyx_k_CPlexInitError[] = "CPlexInitError";
static char __pyx_k_NotImplemented[] = "NotImplemented";
static char __pyx_k_Unknown_type_s[] = "Unknown type: %s";
static char __pyx_k_CPlexNoSolution[] = "CPlexNoSolution";
static char __pyx_k_pycpx_pyconcert[] = "pycpx.pyconcert";
static char __pyx_k_variable_select[] = "variable_select";
static char __pyx_k_Invalid_index_d_d[] = "Invalid index (%d >= %d) ";
static char __pyx_k_pyx_releasebuffer[] = "__pyx_releasebuffer";
static char __pyx_k_recycle_variables[] = "recycle_variables";
static char __pyx_k_Size_s_not_understood[] = "Size '%s' not understood.";
static char __pyx_k_Index_s_not_understood[] = "Index %s not understood.";
static char __pyx_k_Invalid_index_or_range[] = "Invalid index or range.";
static char __pyx_k_CPlexModel_new_line_1465[] = "CPlexModel.new (line 1465)";
static char __pyx_k_Error_adding_constraint_s[] = "Error adding constraint: %s";
static char __pyx_k_Error_setting_objective_s[] = "Error setting objective: %s";
static char __pyx_k_CPlexModel_solve_line_1840[] = "CPlexModel.solve (line 1840)";
static char __pyx_k_CPlexModel_value_line_2188[] = "CPlexModel.value (line 2188)";
static char __pyx_k_Error_removing_constraint_s[] = "Error removing constraint: %s";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_Verbosity_must_be_0_1_2_or_3[] = "Verbosity must be 0, 1, 2, or 3.";
static char __pyx_k_CPlexModel_asString_line_2298[] = "CPlexModel.asString (line 2298)";
static char __pyx_k_Variable_mode_s_not_recognized[] = "Variable mode %s not recognized.";
static char __pyx_k_CPlexExpression_not_meant_to_be[] = "CPlexExpression not meant to be instantiated directly.";
static char __pyx_k_Cannot_combine_expressions_from[] = "Cannot combine expressions from two different models.";
static char __pyx_k_Class_CPlexConstraint_not_meant[] = "Class CPlexConstraint not meant to be instantiated directly.";
static char __pyx_k_Creates_a_new_variable_or_set_o[] = "\n        Creates a new variable or set of variables for use in the\n        model.\n        \n        **Variable Size**\n        \n        By default, a single scalar variable is returned.  A vector of\n        variables is created by specifying ``size = n``, or a\n        matrix-block of variables is created by specifying ``size =\n        (n,m)``, where ``n`` and ``m`` are variable sizes.  \n        \n        Both 1d and 2d variable blocks behave like a matrix-like\n        structure of size ``(n,m)``, with ``m`` being 1 for 1d blocks.\n        If `size` is given as a single number ``n``, a column matrix\n        of size ``(n,1)`` is created.  If size is given as a 2-tuple,\n        then a matrix expression of that shape is created.  Thus the\n        expression::\n\n          x = m.new(5)\n          m.constrain(A*x <= b)\n\n        performs a matrix multiply to evaluate ``A*x``.  This example\n        works if the number of rows in ``A`` is the same as the size\n        of ``b``, and ``A`` has 5 columns to match the 5 rows of\n        ``x``.\n        \n        When the values of a variable block are requested after\n        solving the model, variables created using the default scalar\n        value is returned as a single number, 1d variable blocks are\n        returned as 1d vectors, and 2d variable blocks are returned as\n        2d arrays.  \n\n        **Variable Types**\n\n        Variable types can be specified using ``vtype = <type>``.\n        Available types are are reals, integers, and boolean (0 or 1).\n        Understood parameters that can be passed as the `vtype`\n        parameter are:\n\n          Reals:    float, 'float', 'real', 'double', 'f', or 'd'.\n\n          Integers: int, long, 'int', 'integer', 'i'\n\n          Boolean:  bool, 'bool', 'binary', 'boolean', 'b'\n\n        Example 1::\n\n          >>> m = pycpx.CPlexModel()\n          >>> x = m.new(3, vtype=bool)\n          >>> m.constrain(x[0] + 2*x[1] + 4*x[2] <= 4.5)\n          >>> m.ma""ximize(x.sum())\n          2.0\n          >>> m[x]\n          array([ 1.,  1.,  0.])\n\n        Example 2::\n\n          >>> m = pycpx.CPlexModel()\n          >>> x = m.new(3, vtype=int, lb = 0)\n          >>> m.constrain(x[0] + 2*x[1] + 4*x[2] <= 4.5)\n          >>> m.maximize(x.sum())\n          4.0\n          >>> m[x]\n          array([ 4.,  0.,  0.])\n        \n\n        **Bounds**\n\n        Upper and lower bounds may be specified using `ub` or `lb`.\n        These bounds may be None (unbounded, default), a scalar value\n        (which bounds all variables in the block uniformly), a list of\n        values the same length as the variable block being requested\n        (1d only), or a numpy array of values the same size as the\n        variable block being requested (1d or 2d).  Individual None\n        values in the list or NaNs in the array indicate that\n        particular variable block is unbounded.\n\n        Example 1::\n\n          >>> import pycpx\n          >>> m = pycpx.CPlexModel()\n          >>> x = m.new(3, ub = [2,3,4])\n          >>> m.maximize(x.sum())\n          9.0\n          >>> m[x]\n          array([ 2.,  3.,  4.])\n\n        Example 2::\n\n          >>> m = pycpx.CPlexModel()\n          >>> x = m.new(3, ub = [2,None,4])\n          >>> z = m.new(ub = 10)\n          >>> m.constrain(x <= z)\n          >>> m.maximize(x.sum())\n          16.0\n          >>> m[x]\n          array([  2.,  10.,   4.])\n\n\n        **Variable Names**\n\n        Optionally, a name for the variable block or group can be\n        passed as, e.g. ``name = 'x'``.  This mostly helps with\n        printing and debugging, as this name is printed when the model\n        or specific constraints are printed.\n\n        Example 1::\n\n          >>> m = pycpx.CPlexModel()\n          >>> x = m.new(3, name = 'x')\n          >>> m.constrain(0 <= x[0] + 2*x[1] + 3*x[2] <= 4)\n          >>> print m\n          x[0][-inf..inf] \n            x[1][-inf..inf] \n            x[2][-inf..inf""] \n            0 <= x[0]  + 2 * x[1]  + 3 * x[2]  \n            x[0]  + 2 * x[1]  + 3 * x[2]  <= 4 \n  \n          >>> m.minimize(x.sum().abs())\n          0.0\n          >>> print m\n          minimize abs(x[0]  + x[1]  + x[2] ) such that\n            x[0][-inf..inf] \n            x[1][-inf..inf] \n            x[2][-inf..inf] \n            0 <= x[0]  + 2 * x[1]  + 3 * x[2]  \n            x[0]  + 2 * x[1]  + 3 * x[2]  <= 4 \n\n        If name is None or not given, then variables are named in the\n        format ``_<varnum>``, where `varnum` is the variable number in\n        order of request.  Thus the first set of variables is ``_1``,\n        the second set ``_2``, etc.\n        \n        ";
static char __pyx_k_Error_setting_starting_values_s[] = "Error setting starting values: %s";
static char __pyx_k_Exception_raised_if_the_model_i[] = "\n    Exception raised if the model is unbounded or infeasible.\n    ";
static char __pyx_k_Expected_constraint_in_argument[] = "Expected constraint in argument %d, got %s.";
static char __pyx_k_Indexing_error_for_s_constraint[] = "Indexing error for '%s' constraint: Left shape = (%d, %d), right shape = (%d, %d).";
static char __pyx_k_NumericalArrayWrapper_not_meant[] = "NumericalArrayWrapper not meant to be instantiated directly.";
static char __pyx_k_Objective_must_be_an_expression[] = "Objective must be an expression.";
static char __pyx_k_Raised_if_there_is_an_error_ini[] = "\n    Raised if there is an error initializing the CPlex engine or a\n    CPlex Model.\n    ";
static char __pyx_k_Removes_one_or_more_constraints[] = "\n        Removes one or more constraints associated with the model.\n        The constraints must have been added previously by\n        :meth:`constrain()`.\n\n        Example 1::\n\n          >>> from pycpx import CPlexModel\n          >>> m = CPlexModel()\n          >>> x = m.new()\n          >>> y = m.new()\n          >>> m.constrain(0 <= x <= y <= 5)\n          >>> c = (x <= 2)\n          >>> m.constrain(c)\n          >>> m.maximize(x + y)\n          7.0\n          >>> m.removeConstraint(c)\n          >>> m.maximize(x + y)\n          10.0\n\n        ";
static char __pyx_k_Returns_a_scalar_numpy_array_or[] = "\n        Returns a scalar, numpy array, or matrix filled by the values\n        of the variable block or expression.  Calling ``m.value(x)``\n        is the same as calling ``m[x]`` or ``x()`` to retrieve the\n        result of a variable.  This function can only be called after\n        the model has been solved at least once.\n\n        In all other places, variables are represented using 2d\n        matrices, with a 1x1 matrix representing a scalar and column\n        vectors representing vectors.  However, a flag is preserved so\n        that returned values are in the same form as originally\n        requested.  Thus 'scalar' variable values are returned as\n        scalars, vector values are returned as a 1d numpy array, and\n        2d variable blocks are returned as 2d matrices.\n\n        Example::\n\n          >>> from pycpx import CPlexModel\n          >>> from numpy import array, arange\n          >>> \n          >>> A = 2*arange(1,10).reshape( (3, 3) )\n          >>> m = CPlexModel()\n          >>> \n          >>> X = m.new( (3, 3), vtype = int)\n          >>> u = m.new( 3, vtype = int)\n          >>> s = m.new(vtype = int)\n          >>> \n          >>> \n          >>> m.constrain(s <= A.T * X <= 10*s)\n          >>> m.constrain(1 <= X.sum(axis = 1) <= u)\n          >>> \n          >>> m.minimize(u.sum())\n          3.0\n          >>> m[X]\n          matrix([[-2.,  3.,  0.],\n                  [ 0.,  0.,  1.],\n                  [ 1.,  0.,  0.]])\n          >>> m[u]\n          array([ 1.,  1.,  1.])\n          >>> m[s]\n          2.0\n          >>> m[X[0,0]]\n          -2.0\n          >>> m[X[:,1]]\n          array([ 3.,  0.,  0.])\n          >>> m[X[2,:]]\n          matrix([[ 1.,  0.,  0.]])\n          >>> m[10*s - A.T * X]\n          matrix([[ 10.,  14.,  12.],\n                  [ 12.,   8.,  10.],\n                  [ 14.,   2.,   8.]])\n        \n        ";
static char __pyx_k_Returns_a_string_representation[] = "\n        Returns a string representation of the model.  If the\n        variables are named, they are printed with those names,\n        otherwise ``_##`` is used (e.g. ``_1, _2, _3, ...``.\n\n        Example 1:: \n        \n          >>> m = CPlexModel()\n          >>> \n          >>> x = m.new(lb = 0, vtype=int, name = 'x')\n          >>> y = m.new(lb = 0, vtype=int, name = 'y')\n          >>> \n          >>> m.constrain(5*x - y <= 12)\n          >>> m.constrain(3*x + 2*y <= 8)\n          >>> \n          >>> m.maximize(2*x + y)\n          5.0\n          >>> m\n          maximize 2 * x  + y  such that\n            x[0..9007199254740991] \n            y[0..9007199254740991] \n            5 * x  + -1 * y  <= 12 \n            3 * x  + 2 * y  <= 8 \n\n          >>> m[x]\n          2.0\n          >>> m[y]\n          1.0\n\n        Example 2::\n\n          >>> import numpy as np\n          >>> from pycpx import CPlexModel\n          >>> \n          >>> A = np.array([[1,0,0], [1,1,0], [1,1,1]])\n          >>> b = np.array([1,2,3])\n          >>> \n          >>> m = CPlexModel()\n          >>> x = m.new(3, lb = 0, ub = 5, name = 'x')\n          >>> t = m.new(name = 't')\n          >>> \n          >>> m.constrain( abs((A*x - b)) <= t)\n          >>> \n          >>> m.minimize(t)\n          0.0\n          >>> m\n          minimize t  such that\n            x[0][0..5] \n            x[1][0..5] \n            x[2][0..5] \n            t[-inf..inf] \n            abs(x[0]  + -1 ) <= t[-inf..inf] \n            abs(x[0]  + x[1]  + -2 ) <= t[-inf..inf] \n            abs(x[0]  + x[1]  + x[2]  + -3 ) <= t[-inf..inf] \n         \n        ";
static char __pyx_k_Solves_the_current_model_trying[] = "\n        Solves the current model trying to maximize (default) or\n        minimize `objective` subject to the constraints given by\n        :meth:`constrain()`.  `objective` can be any expression (as\n        described in the documentation for :class:`CPlexModel`).  The\n        function returns the value of the objective after\n        optimization.\n\n        Typically, this function is called using one of the alias\n        functions, :meth:`minimize` or :meth:`maximize`, to set the\n        sense of the optimization.  Alternatively, one can pass any of\n        the following as keyword arguments:\n\n          - ``maximize = True``: Sets sense to find maximum.\n\n          - ``minimize = True``: Sets sense to find minimum,\n\n          - ``maximize = False``: Sets sense to find minimum.\n          \n          - ``minimize = False``: Sets sense to find maximum.\n\n        **Available options**\n\n        starting_dict:\n\n          Specify starting points for variables given in a dictionary.\n\n          For optimization problems having integer values, this may\n          give a speedup.  Note, however, that for non-integer linear\n          programs, constructing a solver state from a starting point\n          is usually as time consuming as solving it in the first\n          place, thus it is rare to get any speedup.\n\n        recycle_variables:\n\n          Can be True or False (default).  If True, the model has\n          already been solved at least once, and no constraints have\n          been added or removed, then the variable values from the\n          previous run are used to form the starting point for this\n          current run.  Note, however, that CPlex takes a usually\n          non-trivial amount of time to construct a basis from a given\n          starting point, so this usually doesn't help that much\n          except in combinatorial problems.\n\n        recycle_basis:\n        \n          Can be True or False (default).  If True, then the b""asis\n          from the last run of the model is used to instantiate this\n          run.  If the basis is saved from before using\n          :meth:`saveBasis`, then one should use basis_file instead.\n\n        basis_file:\n\n          Specify a file to load a basis from.  This file should be\n          from a previous call to :meth:`saveBasis`.\n\n        algorithm:\n\n          Specify which algorithm to use.  Available options are auto\n          (default), primal, dual, barrier, sifting, concurrent, or\n          netflow.  See CPlex doumentation for the specifics..\n\n        max_threads:\n\n          Specify the maximum number of threads for the solver to use.\n\n        relative_gap:\n\n          Specify the relative gap for the relaxed vs. integer solution.\n\n        emphasis:\n\n          Specify emphasis on optimality (2), feasibility (1), or both (0).\n\n        time_limit:\n\n          Specify maximum time limit, in seconds, for a call to an optimizer.\n          Default 1e+75.\n\n        tree_limit:\n\n          Specify an absolute upper limit on the size (in MB, uncompressed)\n          of the branch-and-cut tree. If this limit is exceeded, CPLEX\n          terminates the optimization. Default 1e+75\n        \n        variable_select:\n\n          Sets the rule for selecting the branching variable at the node which \n          has been selected for branching. Minimum feasibility rule (-1) chooses\n          the varaible with the value closes to an integer but still fractional.\n          Other options are maximum infeasibility rule (1), pseudo cost (2),\n          strong branching (3), pseudo reduced costs (4), default (0) allows\n          CPLEX to select best rule based on problem and its progress.\n\n        Example 1::\n\n          >>> from pycpx import CPlexModel\n          >>>\n          >>> m = CPlexModel()\n          >>> x = m.new(lb = 0, ub = 5)\n          >>> m.maximize(2*x)\n          10.0\n          >>> m[x]\n          5.0\n\n        Exam""ple 2::\n\n          >>> import numpy as np\n          >>> from pycpx import CPlexModel\n          >>>\n          >>> A = np.array([[1,0,0], [1,1,0], [1,1,1]])\n          >>> b = np.array([1,2,3])\n          >>> \n          >>> m = CPlexModel()\n          >>> x = m.new(3, lb = 0)\n          >>> m.constrain(A*x <= b)\n          >>> \n          >>> m.maximize(3*x[0] + 2*x[1] + x[2])\n          6.0\n          >>> m[x]\n          array([ 1.,  1.,  1.])\n\n        Example 3::\n\n          >>> import numpy as np\n          >>> from pycpx import CPlexModel\n          >>>\n          >>> A = np.array([[1,0,0], [1,1,0], [1,1,1]])\n          >>> b = np.array([1,2,3])\n          >>> \n          >>> m = CPlexModel()\n          >>> \n          >>> x = m.new(3)\n          >>> t = m.new()\n          >>> \n          >>> m.constrain( abs((A*x - b)) <= t)\n          >>> m.minimize(t)\n          0.0\n          >>> m[x]\n          array([ 1.,  1.,  1.])\n\n        Example 4::\n\n          >>> m = CPlexModel()\n          >>> \n          >>> x = m.new(lb = 0, vtype=int, name = 'x')\n          >>> y = m.new(lb = 0, vtype=int, name = 'y')\n          >>> \n          >>> m.constrain(5*x - y <= 12)\n          >>> m.constrain(3*x + 2*y <= 8)\n          >>> \n          >>> m.maximize(2*x + y)\n          5.0\n          >>> m[x]\n          2.0\n          >>> m[y]\n          1.0\n\n        ";
static char __pyx_k_The_base_class_for_any_exceptio[] = "\n    The base class for any exception raised due to problems with\n    initializing the CPlex engine or creating, populating, or\n    optimizing a model.\n\n    Two more specific exception classes are :class:`CPlexInitError` or\n    :class:`CPlexNoSolution`.  Standard Python exception classes are\n    raised where appropriate.\n    ";
static char __pyx_k_s_must_be_convertable_to_1d_num[] = "`%s` must be convertable to 1d numpy array of length %d.";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_Algorithm_s_not_recognized_can_b[] = "Algorithm '%s' not recognized, can be auto, primal, dual, barrier, sifting, concurrent, or netflow.";
static char __pyx_k_CPlexModel_removeConstraint_line[] = "CPlexModel.removeConstraint (line 1811)";
static char __pyx_k_CPlex_model_not_properly_initial[] = "CPlex model not properly initialized!";
static char __pyx_k_Can_only_retrieve_variables_from[] = "Can only retrieve variables from the model in which they were created.";
static char __pyx_k_Can_only_retrieve_variables_or_e[] = "Can only retrieve variables or expressions.";
static char __pyx_k_Cannot_both_maximize_and_minimiz[] = "Cannot both maximize and minimize the problem at the same time.";
static char __pyx_k_Cannot_work_with_arrays_matrices[] = "Cannot work with arrays/matrices of dimension >= 3.";
static char __pyx_k_Constraint_d_not_from_this_model[] = "Constraint %d not from this model.";
static char __pyx_k_Error_initializing_new_cplex_mod[] = "Error initializing new cplex model: %s";
static char __pyx_k_Error_while_retrieving_variables[] = "Error while retrieving variables: %s";
static char __pyx_k_Expression_arrays_only_2_dimensi[] = "Expression arrays only 2 dimensional.";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Incompatible_array_indices_d_d_n[] = "Incompatible array indices (%d, %d), needs (%d, %d).";
static char __pyx_k_Indexing_error_in_dot_product_Le[] = "Indexing error in dot product: Left shape = (%d, %d), right shape = (%d, %d).";
static char __pyx_k_Indexing_error_in_s_Left_shape_d[] = "Indexing error in '%s': Left shape = (%d, %d), right shape = (%d, %d).";
static char __pyx_k_Iteraction_with_type_s_not_suppo[] = "Iteraction with type %s not supported yet.";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_Unable_to_understand_numerical_a[] = "Unable to understand numerical array value.";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_s_must_be_convertable_to_1d_num_2[] = "`%s` must be convertable to 1d numpy array of length %d (shape = (%s) ).";
static char __pyx_k_s_must_be_convertable_to_1d_num_3[] = "`%s` must be convertable to 1d numpy array of length %d (length = %d).";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_kp_s_Algorithm_s_not_recognized_can_b;
static PyObject *__pyx_n_s_CPlexException;
static PyObject *__pyx_kp_s_CPlexExpression_not_meant_to_be;
static PyObject *__pyx_n_s_CPlexInitError;
static PyObject *__pyx_kp_u_CPlexModel_asString_line_2298;
static PyObject *__pyx_kp_u_CPlexModel_new_line_1465;
static PyObject *__pyx_kp_u_CPlexModel_removeConstraint_line;
static PyObject *__pyx_kp_u_CPlexModel_solve_line_1840;
static PyObject *__pyx_kp_u_CPlexModel_value_line_2188;
static PyObject *__pyx_n_s_CPlexNoSolution;
static PyObject *__pyx_kp_s_CPlex_model_not_properly_initial;
static PyObject *__pyx_kp_s_Can_only_retrieve_variables_from;
static PyObject *__pyx_kp_s_Can_only_retrieve_variables_or_e;
static PyObject *__pyx_kp_s_Cannot_both_maximize_and_minimiz;
static PyObject *__pyx_kp_s_Cannot_combine_expressions_from;
static PyObject *__pyx_kp_s_Cannot_work_with_arrays_matrices;
static PyObject *__pyx_kp_s_Class_CPlexConstraint_not_meant;
static PyObject *__pyx_kp_s_Constraint_d_not_from_this_model;
static PyObject *__pyx_kp_u_Creates_a_new_variable_or_set_o;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Error_adding_constraint_s;
static PyObject *__pyx_kp_s_Error_initializing_new_cplex_mod;
static PyObject *__pyx_kp_s_Error_removing_constraint_s;
static PyObject *__pyx_kp_s_Error_setting_objective_s;
static PyObject *__pyx_kp_s_Error_setting_starting_values_s;
static PyObject *__pyx_kp_s_Error_while_retrieving_variables;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_kp_s_Exception_raised_if_the_model_i;
static PyObject *__pyx_kp_s_Expected_constraint_in_argument;
static PyObject *__pyx_kp_s_Expression_arrays_only_2_dimensi;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_array_indices_d_d_n;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Index_s_not_understood;
static PyObject *__pyx_kp_s_Indexing_error_for_s_constraint;
static PyObject *__pyx_kp_s_Indexing_error_in_dot_product_Le;
static PyObject *__pyx_kp_s_Indexing_error_in_s_Left_shape_d;
static PyObject *__pyx_kp_s_Invalid_index_d_d;
static PyObject *__pyx_kp_s_Invalid_index_or_range;
static PyObject *__pyx_kp_s_Iteraction_with_type_s_not_suppo;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_kp_s_NumericalArrayWrapper_not_meant;
static PyObject *__pyx_kp_s_Objective_must_be_an_expression;
static PyObject *__pyx_kp_s_Raised_if_there_is_an_error_ini;
static PyObject *__pyx_kp_u_Removes_one_or_more_constraints;
static PyObject *__pyx_kp_u_Returns_a_scalar_numpy_array_or;
static PyObject *__pyx_kp_u_Returns_a_string_representation;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_Size_s_not_understood;
static PyObject *__pyx_kp_u_Solves_the_current_model_trying;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_kp_s_The_base_class_for_any_exceptio;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_understand_numerical_a;
static PyObject *__pyx_kp_s_Unknown_type_s;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_Variable_mode_s_not_recognized;
static PyObject *__pyx_kp_s_Verbosity_must_be_0_1_2_or_3;
static PyObject *__pyx_n_s__31;
static PyObject *__pyx_kp_s__32;
static PyObject *__pyx_kp_s__33;
static PyObject *__pyx_kp_s__34;
static PyObject *__pyx_kp_s__35;
static PyObject *__pyx_kp_s__36;
static PyObject *__pyx_kp_s__37;
static PyObject *__pyx_kp_s__38;
static PyObject *__pyx_kp_s__39;
static PyObject *__pyx_kp_s__40;
static PyObject *__pyx_kp_s__9;
static PyObject *__pyx_n_s_abs;
static PyObject *__pyx_n_s_algorithm;
static PyObject *__pyx_n_s_amax;
static PyObject *__pyx_n_s_amin;
static PyObject *__pyx_n_s_arange;
static PyObject *__pyx_n_s_argsort;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asString;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_auto;
static PyObject *__pyx_n_s_automatic;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_barrier;
static PyObject *__pyx_n_s_bas;
static PyObject *__pyx_n_s_basis_file;
static PyObject *__pyx_n_s_binary;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_n_s_boolean;
static PyObject *__pyx_n_s_concurrent;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_kp_s_d;
static PyObject *__pyx_kp_s_d_2;
static PyObject *__pyx_n_s_d_3;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dual;
static PyObject *__pyx_n_s_emphasis;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_float;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_float_2;
static PyObject *__pyx_n_s_getitem;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_inf;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int64;
static PyObject *__pyx_n_s_int_2;
static PyObject *__pyx_n_s_integer;
static PyObject *__pyx_n_s_isfinite;
static PyObject *__pyx_n_s_isscalar;
static PyObject *__pyx_n_s_issparse;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_lambda;
static PyObject *__pyx_n_s_lb;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_lower_bound;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_max_threads;
static PyObject *__pyx_n_s_maximize;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_minimize;
static PyObject *__pyx_n_s_mkstemp;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nan;
static PyObject *__pyx_n_s_ndarray;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_net;
static PyObject *__pyx_n_s_netflow;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_numpy_random;
static PyObject *__pyx_n_s_objective;
static PyObject *__pyx_n_s_ones;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_primal;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_pycpx_pyconcert;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_releasebuffer;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ravel;
static PyObject *__pyx_n_s_real;
static PyObject *__pyx_n_s_recycle_basis;
static PyObject *__pyx_n_s_recycle_variables;
static PyObject *__pyx_n_s_relative_gap;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_rn;
static PyObject *__pyx_kp_s_s_d;
static PyObject *__pyx_kp_s_s_d_d;
static PyObject *__pyx_kp_s_s_d_d_d_d_d;
static PyObject *__pyx_kp_s_s_must_be_convertable_to_1d_num;
static PyObject *__pyx_kp_s_s_must_be_convertable_to_1d_num_2;
static PyObject *__pyx_kp_s_s_must_be_convertable_to_1d_num_3;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_n_s_scalar;
static PyObject *__pyx_n_s_scipy;
static PyObject *__pyx_n_s_scipy_sparse;
static PyObject *__pyx_n_s_setVerbosity;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_sifting;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_solve;
static PyObject *__pyx_n_s_sparse;
static PyObject *__pyx_n_s_starting_dict;
static PyObject *__pyx_n_s_suffix;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_tempfile;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time_limit;
static PyObject *__pyx_n_s_tmp_cplex;
static PyObject *__pyx_n_s_todense;
static PyObject *__pyx_n_s_transpose;
static PyObject *__pyx_n_s_tree_limit;
static PyObject *__pyx_n_s_ub;
static PyObject *__pyx_n_s_uint;
static PyObject *__pyx_n_s_uint32;
static PyObject *__pyx_n_s_uint64;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_upper_bound;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_variable_select;
static PyObject *__pyx_n_s_verbosity;
static PyObject *__pyx_n_s_vtype;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_float_20_1;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_k__17;
static PyObject *__pyx_k__18;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;

/* "pycpx/pyconcert.pyx":20
 *     issparse = scipy.sparse.issparse
 * except ImportError:
 *     issparse = lambda x: False             # <<<<<<<<<<<<<<
 * 
 * ################################################################################
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_5pycpx_9pyconcert_lambda1 = {__Pyx_NAMESTR("lambda1"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_lambda1, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5pycpx_9pyconcert_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_5pycpx_9pyconcert_lambda1(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_5pycpx_9pyconcert_lambda1(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":274
 * # This function should be the only way to instantiate a cplex expression
 * 
 * cdef inline CPlexExpression newCPEFromExisting(CPlexModel model, ExpressionArray* data):             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexExpression expr = createBlankCPlexExpression(CPlexExpression)
 */

static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_model, ExpressionArray *__pyx_v_data) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newCPEFromExisting", 0);

  /* "pycpx/pyconcert.pyx":276
 * cdef inline CPlexExpression newCPEFromExisting(CPlexModel model, ExpressionArray* data):
 * 
 *     cdef CPlexExpression expr = createBlankCPlexExpression(CPlexExpression)             # <<<<<<<<<<<<<<
 *     expr.model              = model
 *     expr.is_simple          = False
 */
  __pyx_t_1 = ((PyObject *)PY_NEW(((PyObject *)((PyObject*)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression)))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_expr = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":277
 * 
 *     cdef CPlexExpression expr = createBlankCPlexExpression(CPlexExpression)
 *     expr.model              = model             # <<<<<<<<<<<<<<
 *     expr.is_simple          = False
 *     expr.data               = data
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_model));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_model));
  __Pyx_GOTREF(__pyx_v_expr->model);
  __Pyx_DECREF(((PyObject *)__pyx_v_expr->model));
  __pyx_v_expr->model = __pyx_v_model;

  /* "pycpx/pyconcert.pyx":278
 *     cdef CPlexExpression expr = createBlankCPlexExpression(CPlexExpression)
 *     expr.model              = model
 *     expr.is_simple          = False             # <<<<<<<<<<<<<<
 *     expr.data               = data
 *     expr.original_size      = None
 */
  __pyx_v_expr->is_simple = 0;

  /* "pycpx/pyconcert.pyx":279
 *     expr.model              = model
 *     expr.is_simple          = False
 *     expr.data               = data             # <<<<<<<<<<<<<<
 *     expr.original_size      = None
 *     expr.key                = None
 */
  __pyx_v_expr->data = __pyx_v_data;

  /* "pycpx/pyconcert.pyx":280
 *     expr.is_simple          = False
 *     expr.data               = data
 *     expr.original_size      = None             # <<<<<<<<<<<<<<
 *     expr.key                = None
 *     expr.__array_priority__ = 20.1
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_expr->original_size);
  __Pyx_DECREF(__pyx_v_expr->original_size);
  __pyx_v_expr->original_size = Py_None;

  /* "pycpx/pyconcert.pyx":281
 *     expr.data               = data
 *     expr.original_size      = None
 *     expr.key                = None             # <<<<<<<<<<<<<<
 *     expr.__array_priority__ = 20.1
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_expr->key);
  __Pyx_DECREF(__pyx_v_expr->key);
  __pyx_v_expr->key = ((PyObject*)Py_None);

  /* "pycpx/pyconcert.pyx":282
 *     expr.original_size      = None
 *     expr.key                = None
 *     expr.__array_priority__ = 20.1             # <<<<<<<<<<<<<<
 * 
 *     return expr
 */
  __Pyx_INCREF(__pyx_float_20_1);
  __Pyx_GIVEREF(__pyx_float_20_1);
  __Pyx_GOTREF(__pyx_v_expr->__array_priority__);
  __Pyx_DECREF(__pyx_v_expr->__array_priority__);
  __pyx_v_expr->__array_priority__ = __pyx_float_20_1;

  /* "pycpx/pyconcert.pyx":284
 *     expr.__array_priority__ = 20.1
 * 
 *     return expr             # <<<<<<<<<<<<<<
 * 
 * cdef inline CPlexExpression newCPE(CPlexModel model, MetaData md):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_expr));
  __pyx_r = __pyx_v_expr;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":274
 * # This function should be the only way to instantiate a cplex expression
 * 
 * cdef inline CPlexExpression newCPEFromExisting(CPlexModel model, ExpressionArray* data):             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexExpression expr = createBlankCPlexExpression(CPlexExpression)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.newCPEFromExisting", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_expr);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":286
 *     return expr
 * 
 * cdef inline CPlexExpression newCPE(CPlexModel model, MetaData md):             # <<<<<<<<<<<<<<
 *     return newCPEFromExisting(model, new ExpressionArray(env, md))
 * 
 */

static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newCPE(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_model, MetaData __pyx_v_md) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newCPE", 0);

  /* "pycpx/pyconcert.pyx":287
 * 
 * cdef inline CPlexExpression newCPE(CPlexModel model, MetaData md):
 *     return newCPEFromExisting(model, new ExpressionArray(env, md))             # <<<<<<<<<<<<<<
 * 
 * cdef inline CPlexExpression newCPEAsView(CPlexExpression cpx, MetaData md):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(__pyx_v_model, new ExpressionArray(__pyx_v_5pycpx_9pyconcert_env, __pyx_v_md))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":286
 *     return expr
 * 
 * cdef inline CPlexExpression newCPE(CPlexModel model, MetaData md):             # <<<<<<<<<<<<<<
 *     return newCPEFromExisting(model, new ExpressionArray(env, md))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.newCPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":289
 *     return newCPEFromExisting(model, new ExpressionArray(env, md))
 * 
 * cdef inline CPlexExpression newCPEAsView(CPlexExpression cpx, MetaData md):             # <<<<<<<<<<<<<<
 *     return newCPEFromExisting(cpx.model, new ExpressionArray(cpx.data[0], cpx.data.md()))
 * 
 */

static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newCPEAsView(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_cpx, CYTHON_UNUSED MetaData __pyx_v_md) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newCPEAsView", 0);

  /* "pycpx/pyconcert.pyx":290
 * 
 * cdef inline CPlexExpression newCPEAsView(CPlexExpression cpx, MetaData md):
 *     return newCPEFromExisting(cpx.model, new ExpressionArray(cpx.data[0], cpx.data.md()))             # <<<<<<<<<<<<<<
 * 
 * cdef inline CPlexExpression newCPEwithVariables(CPlexModel model, MetaData md, IloNumVarArray* v):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_v_cpx->model);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_1), new ExpressionArray((__pyx_v_cpx->data[0]), __pyx_v_cpx->data->md()))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":289
 *     return newCPEFromExisting(model, new ExpressionArray(env, md))
 * 
 * cdef inline CPlexExpression newCPEAsView(CPlexExpression cpx, MetaData md):             # <<<<<<<<<<<<<<
 *     return newCPEFromExisting(cpx.model, new ExpressionArray(cpx.data[0], cpx.data.md()))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.newCPEAsView", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":292
 *     return newCPEFromExisting(cpx.model, new ExpressionArray(cpx.data[0], cpx.data.md()))
 * 
 * cdef inline CPlexExpression newCPEwithVariables(CPlexModel model, MetaData md, IloNumVarArray* v):             # <<<<<<<<<<<<<<
 *     cdef CPlexExpression expr = newCPEFromExisting(model, new ExpressionArray(env, v, md))
 *     expr.is_simple  = True
 */

static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newCPEwithVariables(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_model, MetaData __pyx_v_md, IloNumVarArray *__pyx_v_v) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newCPEwithVariables", 0);

  /* "pycpx/pyconcert.pyx":293
 * 
 * cdef inline CPlexExpression newCPEwithVariables(CPlexModel model, MetaData md, IloNumVarArray* v):
 *     cdef CPlexExpression expr = newCPEFromExisting(model, new ExpressionArray(env, v, md))             # <<<<<<<<<<<<<<
 *     expr.is_simple  = True
 *     return  expr
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(__pyx_v_model, new ExpressionArray(__pyx_v_5pycpx_9pyconcert_env, __pyx_v_v, __pyx_v_md))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_expr = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":294
 * cdef inline CPlexExpression newCPEwithVariables(CPlexModel model, MetaData md, IloNumVarArray* v):
 *     cdef CPlexExpression expr = newCPEFromExisting(model, new ExpressionArray(env, v, md))
 *     expr.is_simple  = True             # <<<<<<<<<<<<<<
 *     return  expr
 * 
 */
  __pyx_v_expr->is_simple = 1;

  /* "pycpx/pyconcert.pyx":295
 *     cdef CPlexExpression expr = newCPEFromExisting(model, new ExpressionArray(env, v, md))
 *     expr.is_simple  = True
 *     return  expr             # <<<<<<<<<<<<<<
 * 
 * cdef inline CPlexExpression newCPEFromCPEWithSameProperties(CPlexExpression src, ExpressionArray* data):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_expr));
  __pyx_r = __pyx_v_expr;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":292
 *     return newCPEFromExisting(cpx.model, new ExpressionArray(cpx.data[0], cpx.data.md()))
 * 
 * cdef inline CPlexExpression newCPEwithVariables(CPlexModel model, MetaData md, IloNumVarArray* v):             # <<<<<<<<<<<<<<
 *     cdef CPlexExpression expr = newCPEFromExisting(model, new ExpressionArray(env, v, md))
 *     expr.is_simple  = True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.newCPEwithVariables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_expr);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":297
 *     return  expr
 * 
 * cdef inline CPlexExpression newCPEFromCPEWithSameProperties(CPlexExpression src, ExpressionArray* data):             # <<<<<<<<<<<<<<
 *     cdef CPlexExpression expr = newCPEFromExisting(src.model, data)
 *     expr.is_simple = src.is_simple
 */

static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newCPEFromCPEWithSameProperties(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_src, ExpressionArray *__pyx_v_data) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newCPEFromCPEWithSameProperties", 0);

  /* "pycpx/pyconcert.pyx":298
 * 
 * cdef inline CPlexExpression newCPEFromCPEWithSameProperties(CPlexExpression src, ExpressionArray* data):
 *     cdef CPlexExpression expr = newCPEFromExisting(src.model, data)             # <<<<<<<<<<<<<<
 *     expr.is_simple = src.is_simple
 *     return expr
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_src->model);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_1), __pyx_v_data)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expr = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":299
 * cdef inline CPlexExpression newCPEFromCPEWithSameProperties(CPlexExpression src, ExpressionArray* data):
 *     cdef CPlexExpression expr = newCPEFromExisting(src.model, data)
 *     expr.is_simple = src.is_simple             # <<<<<<<<<<<<<<
 *     return expr
 * 
 */
  __pyx_t_3 = __pyx_v_src->is_simple;
  __pyx_v_expr->is_simple = __pyx_t_3;

  /* "pycpx/pyconcert.pyx":300
 *     cdef CPlexExpression expr = newCPEFromExisting(src.model, data)
 *     expr.is_simple = src.is_simple
 *     return expr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_expr));
  __pyx_r = __pyx_v_expr;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":297
 *     return  expr
 * 
 * cdef inline CPlexExpression newCPEFromCPEWithSameProperties(CPlexExpression src, ExpressionArray* data):             # <<<<<<<<<<<<<<
 *     cdef CPlexExpression expr = newCPEFromExisting(src.model, data)
 *     expr.is_simple = src.is_simple
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.newCPEFromCPEWithSameProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_expr);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":310
 *     cdef ar X
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise Exception("NumericalArrayWrapper not meant to be instantiated directly.")
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pycpx_9pyconcert_21NumericalArrayWrapper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pycpx_9pyconcert_21NumericalArrayWrapper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_21NumericalArrayWrapper___init__(((struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pycpx_9pyconcert_21NumericalArrayWrapper___init__(CYTHON_UNUSED struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pycpx/pyconcert.pyx":311
 * 
 *     def __init__(self):
 *         raise Exception("NumericalArrayWrapper not meant to be instantiated directly.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pycpx/pyconcert.pyx":310
 *     cdef ar X
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise Exception("NumericalArrayWrapper not meant to be instantiated directly.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.NumericalArrayWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":313
 *         raise Exception("NumericalArrayWrapper not meant to be instantiated directly.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.data
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pycpx_9pyconcert_21NumericalArrayWrapper_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pycpx_9pyconcert_21NumericalArrayWrapper_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pycpx_9pyconcert_21NumericalArrayWrapper_2__dealloc__(((struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pycpx_9pyconcert_21NumericalArrayWrapper_2__dealloc__(struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pycpx/pyconcert.pyx":314
 * 
 *     def __dealloc__(self):
 *         del self.data             # <<<<<<<<<<<<<<
 * 
 * cdef inline NumericalArrayWrapper newNAW(NumericalArray* data, ar X):
 */
  delete __pyx_v_self->data;

  /* "pycpx/pyconcert.pyx":313
 *         raise Exception("NumericalArrayWrapper not meant to be instantiated directly.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.data
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pycpx/pyconcert.pyx":316
 *         del self.data
 * 
 * cdef inline NumericalArrayWrapper newNAW(NumericalArray* data, ar X):             # <<<<<<<<<<<<<<
 * 
 *     cdef NumericalArrayWrapper naw = createBlankNumericalArrayWrapper(NumericalArrayWrapper)
 */

static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_f_5pycpx_9pyconcert_newNAW(NumericalArray *__pyx_v_data, PyArrayObject *__pyx_v_X) {
  struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_v_naw = 0;
  struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newNAW", 0);

  /* "pycpx/pyconcert.pyx":318
 * cdef inline NumericalArrayWrapper newNAW(NumericalArray* data, ar X):
 * 
 *     cdef NumericalArrayWrapper naw = createBlankNumericalArrayWrapper(NumericalArrayWrapper)             # <<<<<<<<<<<<<<
 * 
 *     naw.data        = data
 */
  __pyx_t_1 = ((PyObject *)PY_NEW(((PyObject *)((PyObject*)__pyx_ptype_5pycpx_9pyconcert_NumericalArrayWrapper)))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_naw = ((struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":320
 *     cdef NumericalArrayWrapper naw = createBlankNumericalArrayWrapper(NumericalArrayWrapper)
 * 
 *     naw.data        = data             # <<<<<<<<<<<<<<
 *     naw.X           = X
 * 
 */
  __pyx_v_naw->data = __pyx_v_data;

  /* "pycpx/pyconcert.pyx":321
 * 
 *     naw.data        = data
 *     naw.X           = X             # <<<<<<<<<<<<<<
 * 
 *     return naw
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_X));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_X));
  __Pyx_GOTREF(__pyx_v_naw->X);
  __Pyx_DECREF(((PyObject *)__pyx_v_naw->X));
  __pyx_v_naw->X = __pyx_v_X;

  /* "pycpx/pyconcert.pyx":323
 *     naw.X           = X
 * 
 *     return naw             # <<<<<<<<<<<<<<
 * 
 * cdef inline MetaData metadataFromNDArray(ar X, bint is_matrix):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_naw));
  __pyx_r = __pyx_v_naw;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":316
 *         del self.data
 * 
 * cdef inline NumericalArrayWrapper newNAW(NumericalArray* data, ar X):             # <<<<<<<<<<<<<<
 * 
 *     cdef NumericalArrayWrapper naw = createBlankNumericalArrayWrapper(NumericalArrayWrapper)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.newNAW", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_naw);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":325
 *     return naw
 * 
 * cdef inline MetaData metadataFromNDArray(ar X, bint is_matrix):             # <<<<<<<<<<<<<<
 * 
 *     X = asarray(X, dtype=float_)
 */

static CYTHON_INLINE MetaData __pyx_f_5pycpx_9pyconcert_metadataFromNDArray(PyArrayObject *__pyx_v_X, int __pyx_v_is_matrix) {
  long __pyx_v_itemsize;
  MetaData __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("metadataFromNDArray", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_X);

  /* "pycpx/pyconcert.pyx":327
 * cdef inline MetaData metadataFromNDArray(ar X, bint is_matrix):
 * 
 *     X = asarray(X, dtype=float_)             # <<<<<<<<<<<<<<
 * 
 *     cdef long itemsize = X.itemsize
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_X));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_X));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_X));
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_float); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF_SET(__pyx_v_X, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "pycpx/pyconcert.pyx":329
 *     X = asarray(X, dtype=float_)
 * 
 *     cdef long itemsize = X.itemsize             # <<<<<<<<<<<<<<
 * 
 *     # See if we need to do an upcast
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_X), __pyx_n_s_itemsize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_itemsize = __pyx_t_5;

  /* "pycpx/pyconcert.pyx":332
 * 
 *     # See if we need to do an upcast
 *     return MetaData(MATRIX_MODE if is_matrix else ARRAY_MODE,             # <<<<<<<<<<<<<<
 *                     X.shape[0], 1 if X.ndim == 1 else X.shape[1],
 *                     (<long>X.strides[0])/itemsize,
 */
  if ((__pyx_v_is_matrix != 0)) {
    __pyx_t_6 = MATRIX_MODE;
  } else {
    __pyx_t_6 = ARRAY_MODE;
  }

  /* "pycpx/pyconcert.pyx":333
 *     # See if we need to do an upcast
 *     return MetaData(MATRIX_MODE if is_matrix else ARRAY_MODE,
 *                     X.shape[0], 1 if X.ndim == 1 else X.shape[1],             # <<<<<<<<<<<<<<
 *                     (<long>X.strides[0])/itemsize,
 *                     1 if X.ndim == 1 else (<long>X.strides[1])/itemsize)
 */
  if (((__pyx_v_X->nd == 1) != 0)) {
    __pyx_t_5 = 1;
  } else {
    __pyx_t_5 = (__pyx_v_X->dimensions[1]);
  }

  /* "pycpx/pyconcert.pyx":334
 *     return MetaData(MATRIX_MODE if is_matrix else ARRAY_MODE,
 *                     X.shape[0], 1 if X.ndim == 1 else X.shape[1],
 *                     (<long>X.strides[0])/itemsize,             # <<<<<<<<<<<<<<
 *                     1 if X.ndim == 1 else (<long>X.strides[1])/itemsize)
 * 
 */
  if (unlikely(__pyx_v_itemsize == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((long)-1) > 0)) && unlikely(__pyx_v_itemsize == (long)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(((long)(__pyx_v_X->strides[0]))))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":335
 *                     X.shape[0], 1 if X.ndim == 1 else X.shape[1],
 *                     (<long>X.strides[0])/itemsize,
 *                     1 if X.ndim == 1 else (<long>X.strides[1])/itemsize)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (((__pyx_v_X->nd == 1) != 0)) {
    __pyx_t_7 = 1;
  } else {
    if (unlikely(__pyx_v_itemsize == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(long) == sizeof(long) && (!(((long)-1) > 0)) && unlikely(__pyx_v_itemsize == (long)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(((long)(__pyx_v_X->strides[1]))))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = __Pyx_div_long(((long)(__pyx_v_X->strides[1])), __pyx_v_itemsize);
  }

  /* "pycpx/pyconcert.pyx":332
 * 
 *     # See if we need to do an upcast
 *     return MetaData(MATRIX_MODE if is_matrix else ARRAY_MODE,             # <<<<<<<<<<<<<<
 *                     X.shape[0], 1 if X.ndim == 1 else X.shape[1],
 *                     (<long>X.strides[0])/itemsize,
 */
  __pyx_r = MetaData(__pyx_t_6, (__pyx_v_X->dimensions[0]), __pyx_t_5, __Pyx_div_long(((long)(__pyx_v_X->strides[0])), __pyx_v_itemsize), __pyx_t_7);
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":325
 *     return naw
 * 
 * cdef inline MetaData metadataFromNDArray(ar X, bint is_matrix):             # <<<<<<<<<<<<<<
 * 
 *     X = asarray(X, dtype=float_)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pycpx.pyconcert.metadataFromNDArray", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_X);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":338
 * 
 * 
 * cdef NumericalArrayWrapper newCoercedNumericalArray(Xo, MetaData md):             # <<<<<<<<<<<<<<
 *     # Attempts to return a NumericalArray, checking it against MetaData md
 * 
 */

static struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_f_5pycpx_9pyconcert_newCoercedNumericalArray(PyObject *__pyx_v_Xo, MetaData __pyx_v_md) {
  PyArrayObject *__pyx_v_X = 0;
  MetaData __pyx_v_Xmd;
  NumericalArray *__pyx_v_Xna;
  struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newCoercedNumericalArray", 0);
  __Pyx_INCREF(__pyx_v_Xo);

  /* "pycpx/pyconcert.pyx":341
 *     # Attempts to return a NumericalArray, checking it against MetaData md
 * 
 *     if type(Xo) is list:             # <<<<<<<<<<<<<<
 *         Xo = asarray(Xo)
 *     elif isscalar(Xo):
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_Xo)) == ((PyObject *)((PyObject*)(&PyList_Type))));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":342
 * 
 *     if type(Xo) is list:
 *         Xo = asarray(Xo)             # <<<<<<<<<<<<<<
 *     elif isscalar(Xo):
 *         Xo = asarray([Xo])
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_Xo);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_Xo);
    __Pyx_GIVEREF(__pyx_v_Xo);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_Xo, __pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L3;
  }

  /* "pycpx/pyconcert.pyx":343
 *     if type(Xo) is list:
 *         Xo = asarray(Xo)
 *     elif isscalar(Xo):             # <<<<<<<<<<<<<<
 *         Xo = asarray([Xo])
 *     elif issparse(Xo):
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_isscalar); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_Xo);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_Xo);
  __Pyx_GIVEREF(__pyx_v_Xo);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":344
 *         Xo = asarray(Xo)
 *     elif isscalar(Xo):
 *         Xo = asarray([Xo])             # <<<<<<<<<<<<<<
 *     elif issparse(Xo):
 *         Xo = Xo.todense()
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_Xo);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_Xo);
    __Pyx_GIVEREF(__pyx_v_Xo);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_Xo, __pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }

  /* "pycpx/pyconcert.pyx":345
 *     elif isscalar(Xo):
 *         Xo = asarray([Xo])
 *     elif issparse(Xo):             # <<<<<<<<<<<<<<
 *         Xo = Xo.todense()
 *     else:
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_Xo);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_Xo);
  __Pyx_GIVEREF(__pyx_v_Xo);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_5pycpx_9pyconcert_issparse, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":346
 *         Xo = asarray([Xo])
 *     elif issparse(Xo):
 *         Xo = Xo.todense()             # <<<<<<<<<<<<<<
 *     else:
 *         if type(Xo) is not ndarray:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_Xo, __pyx_n_s_todense); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_Xo, __pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":348
 *         Xo = Xo.todense()
 *     else:
 *         if type(Xo) is not ndarray:             # <<<<<<<<<<<<<<
 *             raise TypeError("Unable to understand numerical array value.")
 * 
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_ndarray); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_Xo)) != __pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "pycpx/pyconcert.pyx":349
 *     else:
 *         if type(Xo) is not ndarray:
 *             raise TypeError("Unable to understand numerical array value.")             # <<<<<<<<<<<<<<
 * 
 *     cdef ar X = asarray(Xo, dtype=float_)
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  __pyx_L3:;

  /* "pycpx/pyconcert.pyx":351
 *             raise TypeError("Unable to understand numerical array value.")
 * 
 *     cdef ar X = asarray(Xo, dtype=float_)             # <<<<<<<<<<<<<<
 * 
 *     cdef MetaData Xmd = metadataFromNDArray(X, type(Xo) is matrix)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_Xo);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_Xo);
  __Pyx_GIVEREF(__pyx_v_Xo);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_float); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_X = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pycpx/pyconcert.pyx":353
 *     cdef ar X = asarray(Xo, dtype=float_)
 * 
 *     cdef MetaData Xmd = metadataFromNDArray(X, type(Xo) is matrix)             # <<<<<<<<<<<<<<
 * 
 *     # Now raise an issue if things are not compatible
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_matrix); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_Xo)) == __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_Xmd = __pyx_f_5pycpx_9pyconcert_metadataFromNDArray(__pyx_v_X, __pyx_t_1);

  /* "pycpx/pyconcert.pyx":356
 * 
 *     # Now raise an issue if things are not compatible
 *     if not ( (md.shape(0) == Xmd.shape(0) and md.shape(1) == Xmd.shape(1))             # <<<<<<<<<<<<<<
 *              or Xmd.shape(0) == Xmd.shape(1) == 1):
 * 
 */
  __pyx_t_1 = ((__pyx_v_md.shape(0) == __pyx_v_Xmd.shape(0)) != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = ((__pyx_v_md.shape(1) == __pyx_v_Xmd.shape(1)) != 0);
    __pyx_t_7 = __pyx_t_2;
  } else {
    __pyx_t_7 = __pyx_t_1;
  }
  if (!__pyx_t_7) {

    /* "pycpx/pyconcert.pyx":357
 *     # Now raise an issue if things are not compatible
 *     if not ( (md.shape(0) == Xmd.shape(0) and md.shape(1) == Xmd.shape(1))
 *              or Xmd.shape(0) == Xmd.shape(1) == 1):             # <<<<<<<<<<<<<<
 * 
 *         # One way out
 */
    __pyx_t_8 = __pyx_v_Xmd.shape(1);
    __pyx_t_1 = (__pyx_v_Xmd.shape(0) == __pyx_t_8);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_t_8 == 1);
    }
    __pyx_t_2 = (__pyx_t_1 != 0);
  } else {
    __pyx_t_2 = __pyx_t_7;
  }

  /* "pycpx/pyconcert.pyx":356
 * 
 *     # Now raise an issue if things are not compatible
 *     if not ( (md.shape(0) == Xmd.shape(0) and md.shape(1) == Xmd.shape(1))             # <<<<<<<<<<<<<<
 *              or Xmd.shape(0) == Xmd.shape(1) == 1):
 * 
 */
  __pyx_t_7 = ((!__pyx_t_2) != 0);
  if (__pyx_t_7) {

    /* "pycpx/pyconcert.pyx":360
 * 
 *         # One way out
 *         if X.ndim == 1 and md.shape(0) == Xmd.shape(1) and md.shape(1) == Xmd.shape(0):             # <<<<<<<<<<<<<<
 *             Xmd = Xmd.transposed()
 *         else:
 */
    __pyx_t_7 = ((__pyx_v_X->nd == 1) != 0);
    if (__pyx_t_7) {
      __pyx_t_2 = ((__pyx_v_md.shape(0) == __pyx_v_Xmd.shape(1)) != 0);
      if (__pyx_t_2) {
        __pyx_t_1 = ((__pyx_v_md.shape(1) == __pyx_v_Xmd.shape(0)) != 0);
        __pyx_t_9 = __pyx_t_1;
      } else {
        __pyx_t_9 = __pyx_t_2;
      }
      __pyx_t_2 = __pyx_t_9;
    } else {
      __pyx_t_2 = __pyx_t_7;
    }
    if (__pyx_t_2) {

      /* "pycpx/pyconcert.pyx":361
 *         # One way out
 *         if X.ndim == 1 and md.shape(0) == Xmd.shape(1) and md.shape(1) == Xmd.shape(0):
 *             Xmd = Xmd.transposed()             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError("Incompatible array indices (%d, %d), needs (%d, %d)."
 */
      __pyx_v_Xmd = __pyx_v_Xmd.transposed();
      goto __pyx_L6;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":364
 *         else:
 *             raise IndexError("Incompatible array indices (%d, %d), needs (%d, %d)."
 *                              % (Xmd.shape(0), Xmd.shape(1), md.shape(0), md.shape(1)))             # <<<<<<<<<<<<<<
 * 
 *     cdef NumericalArray *Xna = new NumericalArray(env, (<double*>(X.data)), Xmd)
 */
      __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_Xmd.shape(0)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_Xmd.shape(1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_md.shape(0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_md.shape(1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_6 = 0;
      __pyx_t_3 = 0;
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_array_indices_d_d_n, __pyx_t_10); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "pycpx/pyconcert.pyx":363
 *             Xmd = Xmd.transposed()
 *         else:
 *             raise IndexError("Incompatible array indices (%d, %d), needs (%d, %d)."             # <<<<<<<<<<<<<<
 *                              % (Xmd.shape(0), Xmd.shape(1), md.shape(0), md.shape(1)))
 * 
 */
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "pycpx/pyconcert.pyx":366
 *                              % (Xmd.shape(0), Xmd.shape(1), md.shape(0), md.shape(1)))
 * 
 *     cdef NumericalArray *Xna = new NumericalArray(env, (<double*>(X.data)), Xmd)             # <<<<<<<<<<<<<<
 * 
 *     return newNAW(Xna, X)
 */
  __pyx_v_Xna = new NumericalArray(__pyx_v_5pycpx_9pyconcert_env, ((double *)__pyx_v_X->data), __pyx_v_Xmd);

  /* "pycpx/pyconcert.pyx":368
 *     cdef NumericalArray *Xna = new NumericalArray(env, (<double*>(X.data)), Xmd)
 * 
 *     return newNAW(Xna, X)             # <<<<<<<<<<<<<<
 * 
 * ################################################################################
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_4 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newNAW(__pyx_v_Xna, __pyx_v_X)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":338
 * 
 * 
 * cdef NumericalArrayWrapper newCoercedNumericalArray(Xo, MetaData md):             # <<<<<<<<<<<<<<
 *     # Attempts to return a NumericalArray, checking it against MetaData md
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pycpx.pyconcert.newCoercedNumericalArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_X);
  __Pyx_XDECREF(__pyx_v_Xo);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":385
 *     OP_B_GTEQ     : ">=" }
 * 
 * cdef str opTypeStrings(int op_code):             # <<<<<<<<<<<<<<
 *     return _op_type_strings[op_code & OP_SIMPLE_MASK]
 * 
 */

static PyObject *__pyx_f_5pycpx_9pyconcert_opTypeStrings(int __pyx_v_op_code) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("opTypeStrings", 0);

  /* "pycpx/pyconcert.pyx":386
 * 
 * cdef str opTypeStrings(int op_code):
 *     return _op_type_strings[op_code & OP_SIMPLE_MASK]             # <<<<<<<<<<<<<<
 * 
 * cdef CPlexExpression newEmptyExpression(
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_5pycpx_9pyconcert__op_type_strings == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_op_code & OP_SIMPLE_MASK)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_5pycpx_9pyconcert__op_type_strings, __pyx_t_1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":385
 *     OP_B_GTEQ     : ">=" }
 * 
 * cdef str opTypeStrings(int op_code):             # <<<<<<<<<<<<<<
 *     return _op_type_strings[op_code & OP_SIMPLE_MASK]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.opTypeStrings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":388
 *     return _op_type_strings[op_code & OP_SIMPLE_MASK]
 * 
 * cdef CPlexExpression newEmptyExpression(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexModel model, MetaData md1, MetaData md2):
 * 
 */

static struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newEmptyExpression(int __pyx_v_op_type, struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_model, MetaData __pyx_v_md1, MetaData __pyx_v_md2) {
  int __pyx_v_okay;
  MetaData __pyx_v_md_dest;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newEmptyExpression", 0);

  /* "pycpx/pyconcert.pyx":391
 *     int op_type, CPlexModel model, MetaData md1, MetaData md2):
 * 
 *     cdef bint okay = False             # <<<<<<<<<<<<<<
 *     cdef MetaData md_dest = newMetadata(op_type, md1, md2, &okay)
 * 
 */
  __pyx_v_okay = 0;

  /* "pycpx/pyconcert.pyx":392
 * 
 *     cdef bint okay = False
 *     cdef MetaData md_dest = newMetadata(op_type, md1, md2, &okay)             # <<<<<<<<<<<<<<
 * 
 *     if not okay:
 */
  __pyx_v_md_dest = newMetadata(__pyx_v_op_type, __pyx_v_md1, __pyx_v_md2, (&__pyx_v_okay));

  /* "pycpx/pyconcert.pyx":394
 *     cdef MetaData md_dest = newMetadata(op_type, md1, md2, &okay)
 * 
 *     if not okay:             # <<<<<<<<<<<<<<
 *         if ((op_type & OP_SIMPLE_MASK) == OP_B_MULTIPLY and md1.matrix_multiplication_applies(md2)
 *             or (op_type & OP_SIMPLE_MASK) == OP_B_MATRIXMULTIPLY):
 */
  __pyx_t_1 = ((!(__pyx_v_okay != 0)) != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":395
 * 
 *     if not okay:
 *         if ((op_type & OP_SIMPLE_MASK) == OP_B_MULTIPLY and md1.matrix_multiplication_applies(md2)             # <<<<<<<<<<<<<<
 *             or (op_type & OP_SIMPLE_MASK) == OP_B_MATRIXMULTIPLY):
 * 
 */
    __pyx_t_1 = (((__pyx_v_op_type & OP_SIMPLE_MASK) == OP_B_MULTIPLY) != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = (__pyx_v_md1.matrix_multiplication_applies(__pyx_v_md2) != 0);
      __pyx_t_3 = __pyx_t_2;
    } else {
      __pyx_t_3 = __pyx_t_1;
    }
    if (!__pyx_t_3) {

      /* "pycpx/pyconcert.pyx":396
 *     if not okay:
 *         if ((op_type & OP_SIMPLE_MASK) == OP_B_MULTIPLY and md1.matrix_multiplication_applies(md2)
 *             or (op_type & OP_SIMPLE_MASK) == OP_B_MATRIXMULTIPLY):             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Indexing error in dot product: Left shape = (%d, %d), right shape = (%d, %d)."
 */
      __pyx_t_1 = (((__pyx_v_op_type & OP_SIMPLE_MASK) == OP_B_MATRIXMULTIPLY) != 0);
      __pyx_t_2 = __pyx_t_1;
    } else {
      __pyx_t_2 = __pyx_t_3;
    }
    if (__pyx_t_2) {

      /* "pycpx/pyconcert.pyx":399
 * 
 *             raise ValueError("Indexing error in dot product: Left shape = (%d, %d), right shape = (%d, %d)."
 *                              % (md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Indexing error in '%s': Left shape = (%d, %d), right shape = (%d, %d)."
 */
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_md1.shape(0)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_md1.shape(1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_md2.shape(0)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_md2.shape(1)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Indexing_error_in_dot_product_Le, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "pycpx/pyconcert.pyx":398
 *             or (op_type & OP_SIMPLE_MASK) == OP_B_MATRIXMULTIPLY):
 * 
 *             raise ValueError("Indexing error in dot product: Left shape = (%d, %d), right shape = (%d, %d)."             # <<<<<<<<<<<<<<
 *                              % (md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))
 *         else:
 */
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":402
 *         else:
 *             raise ValueError("Indexing error in '%s': Left shape = (%d, %d), right shape = (%d, %d)."
 *                              % (opTypeStrings(op_type),             # <<<<<<<<<<<<<<
 *                                 md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))
 * 
 */
      __pyx_t_7 = __pyx_f_5pycpx_9pyconcert_opTypeStrings(__pyx_v_op_type); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);

      /* "pycpx/pyconcert.pyx":403
 *             raise ValueError("Indexing error in '%s': Left shape = (%d, %d), right shape = (%d, %d)."
 *                              % (opTypeStrings(op_type),
 *                                 md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))             # <<<<<<<<<<<<<<
 * 
 *     return newCPE(model, md_dest)
 */
      __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_md1.shape(0)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_md1.shape(1)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_md2.shape(0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_md2.shape(1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);

      /* "pycpx/pyconcert.pyx":402
 *         else:
 *             raise ValueError("Indexing error in '%s': Left shape = (%d, %d), right shape = (%d, %d)."
 *                              % (opTypeStrings(op_type),             # <<<<<<<<<<<<<<
 *                                 md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))
 * 
 */
      __pyx_t_9 = PyTuple_New(5); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_6 = 0;
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Indexing_error_in_s_Left_shape_d, __pyx_t_9); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "pycpx/pyconcert.pyx":401
 *                              % (md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))
 *         else:
 *             raise ValueError("Indexing error in '%s': Left shape = (%d, %d), right shape = (%d, %d)."             # <<<<<<<<<<<<<<
 *                              % (opTypeStrings(op_type),
 *                                 md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))
 */
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "pycpx/pyconcert.pyx":405
 *                                 md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))
 * 
 *     return newCPE(model, md_dest)             # <<<<<<<<<<<<<<
 * 
 * ################################################################################
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_4 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPE(__pyx_v_model, __pyx_v_md_dest)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":388
 *     return _op_type_strings[op_code & OP_SIMPLE_MASK]
 * 
 * cdef CPlexExpression newEmptyExpression(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexModel model, MetaData md1, MetaData md2):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycpx.pyconcert.newEmptyExpression", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":410
 * # Now classes for expression interaction, constraint arrays, etc.
 * 
 * cdef inline CPlexExpression expression_op_expression(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr1, CPlexExpression expr2):
 * 
 */

static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_expression_op_expression(int __pyx_v_op_type, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr1, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr2) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_dest = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expression_op_expression", 0);

  /* "pycpx/pyconcert.pyx":413
 *     int op_type, CPlexExpression expr1, CPlexExpression expr2):
 * 
 *     if expr1.model is not expr2.model:             # <<<<<<<<<<<<<<
 *         raise ValueError("Cannot combine expressions from two different models.")
 * 
 */
  __pyx_t_1 = (__pyx_v_expr1->model != __pyx_v_expr2->model);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":414
 * 
 *     if expr1.model is not expr2.model:
 *         raise ValueError("Cannot combine expressions from two different models.")             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexExpression dest = newEmptyExpression(op_type, expr1.model, expr1.data.md(), expr2.data.md())
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":416
 *         raise ValueError("Cannot combine expressions from two different models.")
 * 
 *     cdef CPlexExpression dest = newEmptyExpression(op_type, expr1.model, expr1.data.md(), expr2.data.md())             # <<<<<<<<<<<<<<
 * 
 *     binary_op(op_type, dest.data[0], expr1.data[0], expr2.data[0])
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_expr1->model);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyExpression(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_3), __pyx_v_expr1->data->md(), __pyx_v_expr2->data->md())); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dest = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pycpx/pyconcert.pyx":418
 *     cdef CPlexExpression dest = newEmptyExpression(op_type, expr1.model, expr1.data.md(), expr2.data.md())
 * 
 *     binary_op(op_type, dest.data[0], expr1.data[0], expr2.data[0])             # <<<<<<<<<<<<<<
 * 
 *     return dest
 */
  binary_op(__pyx_v_op_type, (__pyx_v_dest->data[0]), (__pyx_v_expr1->data[0]), (__pyx_v_expr2->data[0]));

  /* "pycpx/pyconcert.pyx":420
 *     binary_op(op_type, dest.data[0], expr1.data[0], expr2.data[0])
 * 
 *     return dest             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_dest));
  __pyx_r = __pyx_v_dest;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":410
 * # Now classes for expression interaction, constraint arrays, etc.
 * 
 * cdef inline CPlexExpression expression_op_expression(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr1, CPlexExpression expr2):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycpx.pyconcert.expression_op_expression", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dest);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":423
 * 
 * 
 * cdef inline CPlexExpression expression_op_array(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr, Xo, bint reverse):
 * 
 */

static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_expression_op_array(int __pyx_v_op_type, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr, PyObject *__pyx_v_Xo, int __pyx_v_reverse) {
  PyArrayObject *__pyx_v_X = 0;
  MetaData __pyx_v_Xmd;
  MetaData __pyx_v_Xmdt;
  NumericalArray *__pyx_v_Xna;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_dest = 0;
  int __pyx_v_matrix_multiplication;
  int __pyx_v_is_simple;
  PyObject *__pyx_v_ve = NULL;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  long __pyx_t_16;
  int __pyx_t_17;
  char const *__pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expression_op_array", 0);

  /* "pycpx/pyconcert.pyx":426
 *     int op_type, CPlexExpression expr, Xo, bint reverse):
 * 
 *     cdef ar X = Xo             # <<<<<<<<<<<<<<
 * 
 *     if X.ndim >= 3:
 */
  if (!(likely(((__pyx_v_Xo) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_Xo, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_Xo;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_X = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":428
 *     cdef ar X = Xo
 * 
 *     if X.ndim >= 3:             # <<<<<<<<<<<<<<
 *         raise ValueError("Cannot work with arrays/matrices of dimension >= 3.")
 * 
 */
  __pyx_t_2 = ((__pyx_v_X->nd >= 3) != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":429
 * 
 *     if X.ndim >= 3:
 *         raise ValueError("Cannot work with arrays/matrices of dimension >= 3.")             # <<<<<<<<<<<<<<
 * 
 *     X = asarray(X, dtype=float_)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":431
 *         raise ValueError("Cannot work with arrays/matrices of dimension >= 3.")
 * 
 *     X = asarray(X, dtype=float_)             # <<<<<<<<<<<<<<
 * 
 *     # See if we need to do an upcast
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_X));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_X));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_X));
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_float); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF_SET(__pyx_v_X, ((PyArrayObject *)__pyx_t_5));
  __pyx_t_5 = 0;

  /* "pycpx/pyconcert.pyx":434
 * 
 *     # See if we need to do an upcast
 *     cdef MetaData Xmd = metadataFromNDArray(X, type(Xo) is matrix)             # <<<<<<<<<<<<<<
 *     cdef MetaData Xmdt
 *     cdef NumericalArray *Xna = new NumericalArray(env, (<double*>(X.data)), Xmd)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_matrix); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_Xo)) == __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_Xmd = __pyx_f_5pycpx_9pyconcert_metadataFromNDArray(__pyx_v_X, __pyx_t_2);

  /* "pycpx/pyconcert.pyx":436
 *     cdef MetaData Xmd = metadataFromNDArray(X, type(Xo) is matrix)
 *     cdef MetaData Xmdt
 *     cdef NumericalArray *Xna = new NumericalArray(env, (<double*>(X.data)), Xmd)             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexExpression dest
 */
  __pyx_v_Xna = new NumericalArray(__pyx_v_5pycpx_9pyconcert_env, ((double *)__pyx_v_X->data), __pyx_v_Xmd);

  /* "pycpx/pyconcert.pyx":441
 * 
 *     # First see if we can make it a "simple" type
 *     cdef bint matrix_multiplication = False             # <<<<<<<<<<<<<<
 *     cdef bint is_simple
 * 
 */
  __pyx_v_matrix_multiplication = 0;

  /* "pycpx/pyconcert.pyx":444
 *     cdef bint is_simple
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if reverse:
 *             try:
 */
  /*try:*/ {

    /* "pycpx/pyconcert.pyx":445
 * 
 *     try:
 *         if reverse:             # <<<<<<<<<<<<<<
 *             try:
 *                 dest = newEmptyExpression(op_type, expr.model, Xmd, expr.data.md())
 */
    __pyx_t_2 = (__pyx_v_reverse != 0);
    if (__pyx_t_2) {

      /* "pycpx/pyconcert.pyx":446
 *     try:
 *         if reverse:
 *             try:             # <<<<<<<<<<<<<<
 *                 dest = newEmptyExpression(op_type, expr.model, Xmd, expr.data.md())
 *                 matrix_multiplication = Xmd.matrix_multiplication_applies(expr.data.md())
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {

          /* "pycpx/pyconcert.pyx":447
 *         if reverse:
 *             try:
 *                 dest = newEmptyExpression(op_type, expr.model, Xmd, expr.data.md())             # <<<<<<<<<<<<<<
 *                 matrix_multiplication = Xmd.matrix_multiplication_applies(expr.data.md())
 *             except ValueError, ve:
 */
          __pyx_t_5 = ((PyObject *)__pyx_v_expr->model);
          __Pyx_INCREF(__pyx_t_5);
          __pyx_t_4 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyExpression(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_5), __pyx_v_Xmd, __pyx_v_expr->data->md())); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_v_dest = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_4);
          __pyx_t_4 = 0;

          /* "pycpx/pyconcert.pyx":448
 *             try:
 *                 dest = newEmptyExpression(op_type, expr.model, Xmd, expr.data.md())
 *                 matrix_multiplication = Xmd.matrix_multiplication_applies(expr.data.md())             # <<<<<<<<<<<<<<
 *             except ValueError, ve:
 *                 if X.ndim == 1:
 */
          __pyx_v_matrix_multiplication = __pyx_v_Xmd.matrix_multiplication_applies(__pyx_v_expr->data->md());
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L15_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "pycpx/pyconcert.pyx":449
 *                 dest = newEmptyExpression(op_type, expr.model, Xmd, expr.data.md())
 *                 matrix_multiplication = Xmd.matrix_multiplication_applies(expr.data.md())
 *             except ValueError, ve:             # <<<<<<<<<<<<<<
 *                 if X.ndim == 1:
 *                     try:
 */
        __pyx_t_9 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_9) {
          __Pyx_AddTraceback("pycpx.pyconcert.expression_op_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __pyx_v_ve = __pyx_t_5;

          /* "pycpx/pyconcert.pyx":450
 *                 matrix_multiplication = Xmd.matrix_multiplication_applies(expr.data.md())
 *             except ValueError, ve:
 *                 if X.ndim == 1:             # <<<<<<<<<<<<<<
 *                     try:
 *                         Xmdt = Xmd.transposed()
 */
          __pyx_t_2 = ((__pyx_v_X->nd == 1) != 0);
          if (__pyx_t_2) {

            /* "pycpx/pyconcert.pyx":451
 *             except ValueError, ve:
 *                 if X.ndim == 1:
 *                     try:             # <<<<<<<<<<<<<<
 *                         Xmdt = Xmd.transposed()
 *                         dest = newEmptyExpression(op_type, expr.model, Xmdt, expr.data.md())
 */
            {
              __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
              __Pyx_XGOTREF(__pyx_t_10);
              __Pyx_XGOTREF(__pyx_t_11);
              __Pyx_XGOTREF(__pyx_t_12);
              /*try:*/ {

                /* "pycpx/pyconcert.pyx":452
 *                 if X.ndim == 1:
 *                     try:
 *                         Xmdt = Xmd.transposed()             # <<<<<<<<<<<<<<
 *                         dest = newEmptyExpression(op_type, expr.model, Xmdt, expr.data.md())
 *                         matrix_multiplication = Xmdt.matrix_multiplication_applies(expr.data.md())
 */
                __pyx_v_Xmdt = __pyx_v_Xmd.transposed();

                /* "pycpx/pyconcert.pyx":453
 *                     try:
 *                         Xmdt = Xmd.transposed()
 *                         dest = newEmptyExpression(op_type, expr.model, Xmdt, expr.data.md())             # <<<<<<<<<<<<<<
 *                         matrix_multiplication = Xmdt.matrix_multiplication_applies(expr.data.md())
 *                     except ValueError:
 */
                __pyx_t_1 = ((PyObject *)__pyx_v_expr->model);
                __Pyx_INCREF(__pyx_t_1);
                __pyx_t_13 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyExpression(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_1), __pyx_v_Xmdt, __pyx_v_expr->data->md())); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L19_error;}
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_XDECREF_SET(__pyx_v_dest, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_13));
                __pyx_t_13 = 0;

                /* "pycpx/pyconcert.pyx":454
 *                         Xmdt = Xmd.transposed()
 *                         dest = newEmptyExpression(op_type, expr.model, Xmdt, expr.data.md())
 *                         matrix_multiplication = Xmdt.matrix_multiplication_applies(expr.data.md())             # <<<<<<<<<<<<<<
 *                     except ValueError:
 *                         raise ve
 */
                __pyx_v_matrix_multiplication = __pyx_v_Xmdt.matrix_multiplication_applies(__pyx_v_expr->data->md());
              }
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              goto __pyx_L26_try_end;
              __pyx_L19_error:;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

              /* "pycpx/pyconcert.pyx":455
 *                         dest = newEmptyExpression(op_type, expr.model, Xmdt, expr.data.md())
 *                         matrix_multiplication = Xmdt.matrix_multiplication_applies(expr.data.md())
 *                     except ValueError:             # <<<<<<<<<<<<<<
 *                         raise ve
 *                 else:
 */
              __pyx_t_9 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
              if (__pyx_t_9) {
                __Pyx_AddTraceback("pycpx.pyconcert.expression_op_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_1, &__pyx_t_14) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L21_except_error;}
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_GOTREF(__pyx_t_14);

                /* "pycpx/pyconcert.pyx":456
 *                         matrix_multiplication = Xmdt.matrix_multiplication_applies(expr.data.md())
 *                     except ValueError:
 *                         raise ve             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise
 */
                __Pyx_Raise(__pyx_v_ve, 0, 0, 0);
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L21_except_error;}
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                goto __pyx_L20_exception_handled;
              }
              goto __pyx_L21_except_error;
              __pyx_L21_except_error:;
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_XGIVEREF(__pyx_t_11);
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
              goto __pyx_L10_except_error;
              __pyx_L20_exception_handled:;
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_XGIVEREF(__pyx_t_11);
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
              __pyx_L26_try_end:;
            }
            goto __pyx_L18;
          }
          /*else*/ {

            /* "pycpx/pyconcert.pyx":458
 *                         raise ve
 *                 else:
 *                     raise             # <<<<<<<<<<<<<<
 * 
 *             is_simple = expr.is_simple or not matrix_multiplication
 */
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestore(__pyx_t_4, __pyx_t_5, __pyx_t_3);
            __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_3 = 0; 
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          }
          __pyx_L18:;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L9_exception_handled;
        }
        goto __pyx_L10_except_error;
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L5_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        __pyx_L15_try_end:;
      }

      /* "pycpx/pyconcert.pyx":460
 *                     raise
 * 
 *             is_simple = expr.is_simple or not matrix_multiplication             # <<<<<<<<<<<<<<
 *             binary_op(op_type | (OP_SIMPLE_FLAG if is_simple else 0), dest.data[0], Xna[0], expr.data[0])
 * 
 */
      if (!__pyx_v_expr->is_simple) {
        __pyx_t_2 = (!(__pyx_v_matrix_multiplication != 0));
        __pyx_t_15 = __pyx_t_2;
      } else {
        __pyx_t_15 = __pyx_v_expr->is_simple;
      }
      __pyx_v_is_simple = __pyx_t_15;

      /* "pycpx/pyconcert.pyx":461
 * 
 *             is_simple = expr.is_simple or not matrix_multiplication
 *             binary_op(op_type | (OP_SIMPLE_FLAG if is_simple else 0), dest.data[0], Xna[0], expr.data[0])             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      if ((__pyx_v_is_simple != 0)) {
        __pyx_t_16 = OP_SIMPLE_FLAG;
      } else {
        __pyx_t_16 = 0;
      }
      binary_op((__pyx_v_op_type | __pyx_t_16), (__pyx_v_dest->data[0]), (__pyx_v_Xna[0]), (__pyx_v_expr->data[0]));
      goto __pyx_L7;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":464
 * 
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 dest = newEmptyExpression(op_type, expr.model, expr.data.md(), Xmd)
 *                 matrix_multiplication = expr.data.md().matrix_multiplication_applies(Xmd)
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_6);
        /*try:*/ {

          /* "pycpx/pyconcert.pyx":465
 *         else:
 *             try:
 *                 dest = newEmptyExpression(op_type, expr.model, expr.data.md(), Xmd)             # <<<<<<<<<<<<<<
 *                 matrix_multiplication = expr.data.md().matrix_multiplication_applies(Xmd)
 *             except ValueError, ve:
 */
          __pyx_t_3 = ((PyObject *)__pyx_v_expr->model);
          __Pyx_INCREF(__pyx_t_3);
          __pyx_t_5 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyExpression(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_3), __pyx_v_expr->data->md(), __pyx_v_Xmd)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L29_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_dest = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_5);
          __pyx_t_5 = 0;

          /* "pycpx/pyconcert.pyx":466
 *             try:
 *                 dest = newEmptyExpression(op_type, expr.model, expr.data.md(), Xmd)
 *                 matrix_multiplication = expr.data.md().matrix_multiplication_applies(Xmd)             # <<<<<<<<<<<<<<
 *             except ValueError, ve:
 *                 if X.ndim == 1:
 */
          __pyx_v_matrix_multiplication = __pyx_v_expr->data->md().matrix_multiplication_applies(__pyx_v_Xmd);
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L36_try_end;
        __pyx_L29_error:;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "pycpx/pyconcert.pyx":467
 *                 dest = newEmptyExpression(op_type, expr.model, expr.data.md(), Xmd)
 *                 matrix_multiplication = expr.data.md().matrix_multiplication_applies(Xmd)
 *             except ValueError, ve:             # <<<<<<<<<<<<<<
 *                 if X.ndim == 1:
 *                     try:
 */
        __pyx_t_9 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_9) {
          __Pyx_AddTraceback("pycpx.pyconcert.expression_op_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L31_except_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __pyx_v_ve = __pyx_t_3;

          /* "pycpx/pyconcert.pyx":468
 *                 matrix_multiplication = expr.data.md().matrix_multiplication_applies(Xmd)
 *             except ValueError, ve:
 *                 if X.ndim == 1:             # <<<<<<<<<<<<<<
 *                     try:
 *                         Xmdt = Xmd.transposed()
 */
          __pyx_t_15 = ((__pyx_v_X->nd == 1) != 0);
          if (__pyx_t_15) {

            /* "pycpx/pyconcert.pyx":469
 *             except ValueError, ve:
 *                 if X.ndim == 1:
 *                     try:             # <<<<<<<<<<<<<<
 *                         Xmdt = Xmd.transposed()
 *                         dest = newEmptyExpression(op_type, expr.model, expr.data.md(), Xmdt)
 */
            {
              __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
              __Pyx_XGOTREF(__pyx_t_12);
              __Pyx_XGOTREF(__pyx_t_11);
              __Pyx_XGOTREF(__pyx_t_10);
              /*try:*/ {

                /* "pycpx/pyconcert.pyx":470
 *                 if X.ndim == 1:
 *                     try:
 *                         Xmdt = Xmd.transposed()             # <<<<<<<<<<<<<<
 *                         dest = newEmptyExpression(op_type, expr.model, expr.data.md(), Xmdt)
 *                         matrix_multiplication = expr.data.md().matrix_multiplication_applies(Xmdt)
 */
                __pyx_v_Xmdt = __pyx_v_Xmd.transposed();

                /* "pycpx/pyconcert.pyx":471
 *                     try:
 *                         Xmdt = Xmd.transposed()
 *                         dest = newEmptyExpression(op_type, expr.model, expr.data.md(), Xmdt)             # <<<<<<<<<<<<<<
 *                         matrix_multiplication = expr.data.md().matrix_multiplication_applies(Xmdt)
 *                     except ValueError:
 */
                __pyx_t_14 = ((PyObject *)__pyx_v_expr->model);
                __Pyx_INCREF(__pyx_t_14);
                __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyExpression(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_14), __pyx_v_expr->data->md(), __pyx_v_Xmdt)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L40_error;}
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_XDECREF_SET(__pyx_v_dest, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_1));
                __pyx_t_1 = 0;

                /* "pycpx/pyconcert.pyx":472
 *                         Xmdt = Xmd.transposed()
 *                         dest = newEmptyExpression(op_type, expr.model, expr.data.md(), Xmdt)
 *                         matrix_multiplication = expr.data.md().matrix_multiplication_applies(Xmdt)             # <<<<<<<<<<<<<<
 *                     except ValueError:
 *                         raise ve
 */
                __pyx_v_matrix_multiplication = __pyx_v_expr->data->md().matrix_multiplication_applies(__pyx_v_Xmdt);
              }
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              goto __pyx_L47_try_end;
              __pyx_L40_error:;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "pycpx/pyconcert.pyx":473
 *                         dest = newEmptyExpression(op_type, expr.model, expr.data.md(), Xmdt)
 *                         matrix_multiplication = expr.data.md().matrix_multiplication_applies(Xmdt)
 *                     except ValueError:             # <<<<<<<<<<<<<<
 *                         raise ve
 *                 else:
 */
              __pyx_t_9 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
              if (__pyx_t_9) {
                __Pyx_AddTraceback("pycpx.pyconcert.expression_op_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_14, &__pyx_t_13) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_GOTREF(__pyx_t_14);
                __Pyx_GOTREF(__pyx_t_13);

                /* "pycpx/pyconcert.pyx":474
 *                         matrix_multiplication = expr.data.md().matrix_multiplication_applies(Xmdt)
 *                     except ValueError:
 *                         raise ve             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise
 */
                __Pyx_Raise(__pyx_v_ve, 0, 0, 0);
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                goto __pyx_L41_exception_handled;
              }
              goto __pyx_L42_except_error;
              __pyx_L42_except_error:;
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_XGIVEREF(__pyx_t_11);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
              goto __pyx_L31_except_error;
              __pyx_L41_exception_handled:;
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_XGIVEREF(__pyx_t_11);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
              __pyx_L47_try_end:;
            }
            goto __pyx_L39;
          }
          /*else*/ {

            /* "pycpx/pyconcert.pyx":476
 *                         raise ve
 *                 else:
 *                     raise             # <<<<<<<<<<<<<<
 * 
 *             is_simple = expr.is_simple or not matrix_multiplication
 */
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_4);
            __Pyx_ErrRestore(__pyx_t_5, __pyx_t_3, __pyx_t_4);
            __pyx_t_5 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L31_except_error;}
          }
          __pyx_L39:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L30_exception_handled;
        }
        goto __pyx_L31_except_error;
        __pyx_L31_except_error:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_6);
        goto __pyx_L5_error;
        __pyx_L30_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_6);
        __pyx_L36_try_end:;
      }

      /* "pycpx/pyconcert.pyx":478
 *                     raise
 * 
 *             is_simple = expr.is_simple or not matrix_multiplication             # <<<<<<<<<<<<<<
 *             binary_op(op_type | (OP_SIMPLE_FLAG if is_simple else 0), dest.data[0], expr.data[0], Xna[0])
 * 
 */
      if (!__pyx_v_expr->is_simple) {
        __pyx_t_15 = (!(__pyx_v_matrix_multiplication != 0));
        __pyx_t_2 = __pyx_t_15;
      } else {
        __pyx_t_2 = __pyx_v_expr->is_simple;
      }
      __pyx_v_is_simple = __pyx_t_2;

      /* "pycpx/pyconcert.pyx":479
 * 
 *             is_simple = expr.is_simple or not matrix_multiplication
 *             binary_op(op_type | (OP_SIMPLE_FLAG if is_simple else 0), dest.data[0], expr.data[0], Xna[0])             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */
      if ((__pyx_v_is_simple != 0)) {
        __pyx_t_16 = OP_SIMPLE_FLAG;
      } else {
        __pyx_t_16 = 0;
      }
      binary_op((__pyx_v_op_type | __pyx_t_16), (__pyx_v_dest->data[0]), (__pyx_v_expr->data[0]), (__pyx_v_Xna[0]));
    }
    __pyx_L7:;
  }

  /* "pycpx/pyconcert.pyx":482
 * 
 *     finally:
 *         del Xna             # <<<<<<<<<<<<<<
 * 
 *     # Need to determine when the simple flag can be propegated
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_Xna;
      goto __pyx_L6;
    }
    /*exception exit:*/{
      __pyx_L5_error:;
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_9 = __pyx_lineno; __pyx_t_17 = __pyx_clineno; __pyx_t_18 = __pyx_filename;
      {
        delete __pyx_v_Xna;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_17; __pyx_filename = __pyx_t_18;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }

  /* "pycpx/pyconcert.pyx":485
 * 
 *     # Need to determine when the simple flag can be propegated
 *     dest.is_simple = (expr.is_simple and not matrix_multiplication)             # <<<<<<<<<<<<<<
 * 
 *     return dest
 */
  if (__pyx_v_expr->is_simple) {
    __pyx_t_2 = (!(__pyx_v_matrix_multiplication != 0));
    __pyx_t_15 = __pyx_t_2;
  } else {
    __pyx_t_15 = __pyx_v_expr->is_simple;
  }
  __pyx_v_dest->is_simple = __pyx_t_15;

  /* "pycpx/pyconcert.pyx":487
 *     dest.is_simple = (expr.is_simple and not matrix_multiplication)
 * 
 *     return dest             # <<<<<<<<<<<<<<
 * 
 * cdef inline CPlexExpression expression_op_scalar(
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_dest));
  __pyx_r = __pyx_v_dest;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":423
 * 
 * 
 * cdef inline CPlexExpression expression_op_array(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr, Xo, bint reverse):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pycpx.pyconcert.expression_op_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_X);
  __Pyx_XDECREF((PyObject *)__pyx_v_dest);
  __Pyx_XDECREF(__pyx_v_ve);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":489
 *     return dest
 * 
 * cdef inline CPlexExpression expression_op_scalar(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr, double v, bint reverse):
 * 
 */

static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_expression_op_scalar(int __pyx_v_op_type, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr, double __pyx_v_v, int __pyx_v_reverse) {
  Scalar *__pyx_v_sc;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_dest = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expression_op_scalar", 0);

  /* "pycpx/pyconcert.pyx":492
 *     int op_type, CPlexExpression expr, double v, bint reverse):
 * 
 *     cdef Scalar *sc = new Scalar(env, v)             # <<<<<<<<<<<<<<
 *     cdef CPlexExpression dest
 * 
 */
  __pyx_v_sc = new Scalar(__pyx_v_5pycpx_9pyconcert_env, __pyx_v_v);

  /* "pycpx/pyconcert.pyx":495
 *     cdef CPlexExpression dest
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if reverse:
 *             dest = newEmptyExpression(op_type, expr.model, sc.md(), expr.data.md())
 */
  /*try:*/ {

    /* "pycpx/pyconcert.pyx":496
 * 
 *     try:
 *         if reverse:             # <<<<<<<<<<<<<<
 *             dest = newEmptyExpression(op_type, expr.model, sc.md(), expr.data.md())
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], sc[0], expr.data[0])
 */
    __pyx_t_1 = (__pyx_v_reverse != 0);
    if (__pyx_t_1) {

      /* "pycpx/pyconcert.pyx":497
 *     try:
 *         if reverse:
 *             dest = newEmptyExpression(op_type, expr.model, sc.md(), expr.data.md())             # <<<<<<<<<<<<<<
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], sc[0], expr.data[0])
 * 
 */
      __pyx_t_2 = ((PyObject *)__pyx_v_expr->model);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyExpression(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_2), __pyx_v_sc->md(), __pyx_v_expr->data->md())); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_dest = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycpx/pyconcert.pyx":498
 *         if reverse:
 *             dest = newEmptyExpression(op_type, expr.model, sc.md(), expr.data.md())
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], sc[0], expr.data[0])             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      binary_op((__pyx_v_op_type | OP_SIMPLE_FLAG), (__pyx_v_dest->data[0]), (__pyx_v_sc[0]), (__pyx_v_expr->data[0]));
      goto __pyx_L6;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":501
 * 
 *         else:
 *             dest = newEmptyExpression(op_type, expr.model, expr.data.md(), sc.md())             # <<<<<<<<<<<<<<
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], expr.data[0], sc[0])
 * 
 */
      __pyx_t_3 = ((PyObject *)__pyx_v_expr->model);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_2 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyExpression(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_3), __pyx_v_expr->data->md(), __pyx_v_sc->md())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_dest = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pycpx/pyconcert.pyx":502
 *         else:
 *             dest = newEmptyExpression(op_type, expr.model, expr.data.md(), sc.md())
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], expr.data[0], sc[0])             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */
      binary_op((__pyx_v_op_type | OP_SIMPLE_FLAG), (__pyx_v_dest->data[0]), (__pyx_v_expr->data[0]), (__pyx_v_sc[0]));
    }
    __pyx_L6:;
  }

  /* "pycpx/pyconcert.pyx":505
 * 
 *     finally:
 *         del sc             # <<<<<<<<<<<<<<
 * 
 *     dest.is_simple = expr.is_simple
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_sc;
      goto __pyx_L5;
    }
    /*exception exit:*/{
      __pyx_L4_error:;
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        delete __pyx_v_sc;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "pycpx/pyconcert.pyx":507
 *         del sc
 * 
 *     dest.is_simple = expr.is_simple             # <<<<<<<<<<<<<<
 * 
 *     return dest
 */
  __pyx_t_1 = __pyx_v_expr->is_simple;
  __pyx_v_dest->is_simple = __pyx_t_1;

  /* "pycpx/pyconcert.pyx":509
 *     dest.is_simple = expr.is_simple
 * 
 *     return dest             # <<<<<<<<<<<<<<
 * 
 * ############################################################
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_dest));
  __pyx_r = __pyx_v_dest;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":489
 *     return dest
 * 
 * cdef inline CPlexExpression expression_op_scalar(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr, double v, bint reverse):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycpx.pyconcert.expression_op_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dest);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":514
 * # The main control function for expressions
 * 
 * cdef CPlexExpression expr_var_op_var(int op_type, a1, a2):             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexExpression expr1 = None, expr2 = None
 */

static struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_expr_var_op_var(int __pyx_v_op_type, PyObject *__pyx_v_a1, PyObject *__pyx_v_a2) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr1 = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr2 = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expr_var_op_var", 0);

  /* "pycpx/pyconcert.pyx":516
 * cdef CPlexExpression expr_var_op_var(int op_type, a1, a2):
 * 
 *     cdef CPlexExpression expr1 = None, expr2 = None             # <<<<<<<<<<<<<<
 * 
 *     if type(a1) is CPlexExpression:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_expr1 = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)Py_None);
  __Pyx_INCREF(Py_None);
  __pyx_v_expr2 = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)Py_None);

  /* "pycpx/pyconcert.pyx":518
 *     cdef CPlexExpression expr1 = None, expr2 = None
 * 
 *     if type(a1) is CPlexExpression:             # <<<<<<<<<<<<<<
 *         expr1 = a1
 * 
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_a1)) == ((PyObject *)((PyObject*)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression)));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":519
 * 
 *     if type(a1) is CPlexExpression:
 *         expr1 = a1             # <<<<<<<<<<<<<<
 * 
 *     if type(a2) is CPlexExpression:
 */
    if (!(likely(((__pyx_v_a1) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_a1, __pyx_ptype_5pycpx_9pyconcert_CPlexExpression))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __pyx_v_a1;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_expr1, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3));
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pycpx/pyconcert.pyx":521
 *         expr1 = a1
 * 
 *     if type(a2) is CPlexExpression:             # <<<<<<<<<<<<<<
 *         expr2 = a2
 * 
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_a2)) == ((PyObject *)((PyObject*)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression)));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":522
 * 
 *     if type(a2) is CPlexExpression:
 *         expr2 = a2             # <<<<<<<<<<<<<<
 * 
 *     # Got two expressions?
 */
    if (!(likely(((__pyx_v_a2) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_a2, __pyx_ptype_5pycpx_9pyconcert_CPlexExpression))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __pyx_v_a2;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_expr2, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3));
    __pyx_t_3 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pycpx/pyconcert.pyx":525
 * 
 *     # Got two expressions?
 *     if expr1 is not None and expr2 is not None:             # <<<<<<<<<<<<<<
 *         return expression_op_expression(op_type, expr1, expr2)
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_expr1) != Py_None);
  if ((__pyx_t_1 != 0)) {
    __pyx_t_2 = (((PyObject *)__pyx_v_expr2) != Py_None);
    __pyx_t_4 = (__pyx_t_2 != 0);
  } else {
    __pyx_t_4 = (__pyx_t_1 != 0);
  }
  if (__pyx_t_4) {

    /* "pycpx/pyconcert.pyx":526
 *     # Got two expressions?
 *     if expr1 is not None and expr2 is not None:
 *         return expression_op_expression(op_type, expr1, expr2)             # <<<<<<<<<<<<<<
 * 
 *     elif expr1 is not None:
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expression_op_expression(__pyx_v_op_type, __pyx_v_expr1, __pyx_v_expr2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pycpx/pyconcert.pyx":528
 *         return expression_op_expression(op_type, expr1, expr2)
 * 
 *     elif expr1 is not None:             # <<<<<<<<<<<<<<
 *         if isinstance(a2, ndarray):
 *             return expression_op_array(op_type, expr1, a2, False)
 */
  __pyx_t_4 = (((PyObject *)__pyx_v_expr1) != Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":529
 * 
 *     elif expr1 is not None:
 *         if isinstance(a2, ndarray):             # <<<<<<<<<<<<<<
 *             return expression_op_array(op_type, expr1, a2, False)
 *         elif isscalar(a2):
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_ndarray); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_a2, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = (__pyx_t_1 != 0);
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":530
 *     elif expr1 is not None:
 *         if isinstance(a2, ndarray):
 *             return expression_op_array(op_type, expr1, a2, False)             # <<<<<<<<<<<<<<
 *         elif isscalar(a2):
 *             return expression_op_scalar(op_type, expr1, a2, False)
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expression_op_array(__pyx_v_op_type, __pyx_v_expr1, __pyx_v_a2, 0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;
    }

    /* "pycpx/pyconcert.pyx":531
 *         if isinstance(a2, ndarray):
 *             return expression_op_array(op_type, expr1, a2, False)
 *         elif isscalar(a2):             # <<<<<<<<<<<<<<
 *             return expression_op_scalar(op_type, expr1, a2, False)
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_isscalar); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_a2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_a2);
    __Pyx_GIVEREF(__pyx_v_a2);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":532
 *             return expression_op_array(op_type, expr1, a2, False)
 *         elif isscalar(a2):
 *             return expression_op_scalar(op_type, expr1, a2, False)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Unknown type: %s" % repr(type(a2)))
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_a2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expression_op_scalar(__pyx_v_op_type, __pyx_v_expr1, __pyx_t_7, 0)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_6);
      __pyx_t_6 = 0;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":534
 *             return expression_op_scalar(op_type, expr1, a2, False)
 *         else:
 *             raise TypeError("Unknown type: %s" % repr(type(a2)))             # <<<<<<<<<<<<<<
 * 
 *     elif expr2 is not None:
 */
      __pyx_t_6 = PyObject_Repr(((PyObject *)Py_TYPE(__pyx_v_a2))); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_type_s, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "pycpx/pyconcert.pyx":536
 *             raise TypeError("Unknown type: %s" % repr(type(a2)))
 * 
 *     elif expr2 is not None:             # <<<<<<<<<<<<<<
 *         if isinstance(a1, ndarray):
 *             return expression_op_array(op_type, expr2, a1, True)
 */
  __pyx_t_4 = (((PyObject *)__pyx_v_expr2) != Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":537
 * 
 *     elif expr2 is not None:
 *         if isinstance(a1, ndarray):             # <<<<<<<<<<<<<<
 *             return expression_op_array(op_type, expr2, a1, True)
 *         elif isscalar(a1):
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_ndarray); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_a1, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = (__pyx_t_1 != 0);
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":538
 *     elif expr2 is not None:
 *         if isinstance(a1, ndarray):
 *             return expression_op_array(op_type, expr2, a1, True)             # <<<<<<<<<<<<<<
 *         elif isscalar(a1):
 *             return expression_op_scalar(op_type, expr2, a1, True)
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_5 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expression_op_array(__pyx_v_op_type, __pyx_v_expr2, __pyx_v_a1, 1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_5);
      __pyx_t_5 = 0;
      goto __pyx_L0;
    }

    /* "pycpx/pyconcert.pyx":539
 *         if isinstance(a1, ndarray):
 *             return expression_op_array(op_type, expr2, a1, True)
 *         elif isscalar(a1):             # <<<<<<<<<<<<<<
 *             return expression_op_scalar(op_type, expr2, a1, True)
 *         else:
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_isscalar); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_a1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_a1);
    __Pyx_GIVEREF(__pyx_v_a1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":540
 *             return expression_op_array(op_type, expr2, a1, True)
 *         elif isscalar(a1):
 *             return expression_op_scalar(op_type, expr2, a1, True)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Unknown type: %s" % repr(type(a1)))
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_a1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expression_op_scalar(__pyx_v_op_type, __pyx_v_expr2, __pyx_t_7, 1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":542
 *             return expression_op_scalar(op_type, expr2, a1, True)
 *         else:
 *             raise TypeError("Unknown type: %s" % repr(type(a1)))             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
      __pyx_t_3 = PyObject_Repr(((PyObject *)Py_TYPE(__pyx_v_a1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_type_s, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":545
 * 
 *     else:
 *         assert False             # <<<<<<<<<<<<<<
 * 
 * ##################################################
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!0)) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif
  }

  /* "pycpx/pyconcert.pyx":514
 * # The main control function for expressions
 * 
 * cdef CPlexExpression expr_var_op_var(int op_type, a1, a2):             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexExpression expr1 = None, expr2 = None
 */

  /* function exit code */
  __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycpx.pyconcert.expr_var_op_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_expr1);
  __Pyx_XDECREF((PyObject *)__pyx_v_expr2);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":557
 * 
 * 
 * cdef inline setSliceParts(Slice* s, t, long md_size):             # <<<<<<<<<<<<<<
 *     cdef slice s0 = None
 *     cdef long ti
 */

static CYTHON_INLINE PyObject *__pyx_f_5pycpx_9pyconcert_setSliceParts(Slice *__pyx_v_s, PyObject *__pyx_v_t, long __pyx_v_md_size) {
  PyObject *__pyx_v_s0 = 0;
  long __pyx_v_ti;
  int __pyx_v_sl_is_slice;
  long __pyx_v_shape;
  long __pyx_v_size;
  long __pyx_v_step;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  long __pyx_t_11;
  long __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setSliceParts", 0);

  /* "pycpx/pyconcert.pyx":558
 * 
 * cdef inline setSliceParts(Slice* s, t, long md_size):
 *     cdef slice s0 = None             # <<<<<<<<<<<<<<
 *     cdef long ti
 * 
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_s0 = ((PyObject*)Py_None);

  /* "pycpx/pyconcert.pyx":561
 *     cdef long ti
 * 
 *     if type(t) is slice:             # <<<<<<<<<<<<<<
 *         sl_is_slice = True
 *         s0 = t
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_t)) == ((PyObject *)((PyObject*)(&PySlice_Type))));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":562
 * 
 *     if type(t) is slice:
 *         sl_is_slice = True             # <<<<<<<<<<<<<<
 *         s0 = t
 *     elif type(t) is Ellipsis:
 */
    __pyx_v_sl_is_slice = 1;

    /* "pycpx/pyconcert.pyx":563
 *     if type(t) is slice:
 *         sl_is_slice = True
 *         s0 = t             # <<<<<<<<<<<<<<
 *     elif type(t) is Ellipsis:
 *         sl_is_slice = True
 */
    if (!(likely(PySlice_Check(__pyx_v_t))||((__pyx_v_t) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "slice", Py_TYPE(__pyx_v_t)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __pyx_v_t;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_s0, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }

  /* "pycpx/pyconcert.pyx":564
 *         sl_is_slice = True
 *         s0 = t
 *     elif type(t) is Ellipsis:             # <<<<<<<<<<<<<<
 *         sl_is_slice = True
 *         s0 = slice(None,None,None)
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_t)) == __pyx_builtin_Ellipsis);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":565
 *         s0 = t
 *     elif type(t) is Ellipsis:
 *         sl_is_slice = True             # <<<<<<<<<<<<<<
 *         s0 = slice(None,None,None)
 *     elif type(t) is int or type(t) is long:
 */
    __pyx_v_sl_is_slice = 1;

    /* "pycpx/pyconcert.pyx":566
 *     elif type(t) is Ellipsis:
 *         sl_is_slice = True
 *         s0 = slice(None,None,None)             # <<<<<<<<<<<<<<
 *     elif type(t) is int or type(t) is long:
 *         sl_is_slice = False
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PySlice_Type))), __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PySlice_Check(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "slice", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF_SET(__pyx_v_s0, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }

  /* "pycpx/pyconcert.pyx":567
 *         sl_is_slice = True
 *         s0 = slice(None,None,None)
 *     elif type(t) is int or type(t) is long:             # <<<<<<<<<<<<<<
 *         sl_is_slice = False
 *         ti = <long>t
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_t)) == ((PyObject *)((PyObject*)(&PyInt_Type))));
  if (!(__pyx_t_1 != 0)) {
    __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_t)) == ((PyObject *)((PyObject*)(&PyLong_Type))));
    __pyx_t_4 = (__pyx_t_2 != 0);
  } else {
    __pyx_t_4 = (__pyx_t_1 != 0);
  }
  if (__pyx_t_4) {

    /* "pycpx/pyconcert.pyx":568
 *         s0 = slice(None,None,None)
 *     elif type(t) is int or type(t) is long:
 *         sl_is_slice = False             # <<<<<<<<<<<<<<
 *         ti = <long>t
 *         if ti > md_size:
 */
    __pyx_v_sl_is_slice = 0;

    /* "pycpx/pyconcert.pyx":569
 *     elif type(t) is int or type(t) is long:
 *         sl_is_slice = False
 *         ti = <long>t             # <<<<<<<<<<<<<<
 *         if ti > md_size:
 *             raise IndexError("Invalid index (%d >= %d) " % (ti, md_size))
 */
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_t); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_ti = ((long)__pyx_t_5);

    /* "pycpx/pyconcert.pyx":570
 *         sl_is_slice = False
 *         ti = <long>t
 *         if ti > md_size:             # <<<<<<<<<<<<<<
 *             raise IndexError("Invalid index (%d >= %d) " % (ti, md_size))
 * 
 */
    __pyx_t_4 = ((__pyx_v_ti > __pyx_v_md_size) != 0);
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":571
 *         ti = <long>t
 *         if ti > md_size:
 *             raise IndexError("Invalid index (%d >= %d) " % (ti, md_size))             # <<<<<<<<<<<<<<
 * 
 *         s0 = slice(ti,ti+1,1)
 */
      __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_ti); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_md_size); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_3 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_index_d_d, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pycpx/pyconcert.pyx":573
 *             raise IndexError("Invalid index (%d >= %d) " % (ti, md_size))
 * 
 *         s0 = slice(ti,ti+1,1)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Index %s not understood." % t)
 */
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_ti); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_From_long((__pyx_v_ti + 1)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PySlice_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PySlice_Check(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "slice", Py_TYPE(__pyx_t_7)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF_SET(__pyx_v_s0, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":575
 *         s0 = slice(ti,ti+1,1)
 *     else:
 *         raise TypeError("Index %s not understood." % t)             # <<<<<<<<<<<<<<
 * 
 *     cdef long shape, size, step
 */
    __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Index_s_not_understood, __pyx_v_t); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pycpx/pyconcert.pyx":579
 *     cdef long shape, size, step
 * 
 *     shape, size, step = s0.indices(md_size)             # <<<<<<<<<<<<<<
 * 
 *     if shape == size:
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_s0, __pyx_n_s_indices); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_md_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    #else
    __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
    index = 0; __pyx_t_6 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    index = 1; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    index = 2; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L6_unpacking_done:;
  }
  __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_6); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_long(__pyx_t_7); if (unlikely((__pyx_t_11 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_12 = __Pyx_PyInt_As_long(__pyx_t_8); if (unlikely((__pyx_t_12 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_shape = __pyx_t_5;
  __pyx_v_size = __pyx_t_11;
  __pyx_v_step = __pyx_t_12;

  /* "pycpx/pyconcert.pyx":581
 *     shape, size, step = s0.indices(md_size)
 * 
 *     if shape == size:             # <<<<<<<<<<<<<<
 *         raise IndexError("Invalid index or range.")
 * 
 */
  __pyx_t_4 = ((__pyx_v_shape == __pyx_v_size) != 0);
  if (__pyx_t_4) {

    /* "pycpx/pyconcert.pyx":582
 * 
 *     if shape == size:
 *         raise IndexError("Invalid index or range.")             # <<<<<<<<<<<<<<
 * 
 *     s[0] = Slice(shape, size, step)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":584
 *         raise IndexError("Invalid index or range.")
 * 
 *     s[0] = Slice(shape, size, step)             # <<<<<<<<<<<<<<
 *     return sl_is_slice
 * 
 */
  (__pyx_v_s[0]) = Slice(__pyx_v_shape, __pyx_v_size, __pyx_v_step);

  /* "pycpx/pyconcert.pyx":585
 * 
 *     s[0] = Slice(shape, size, step)
 *     return sl_is_slice             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_sl_is_slice); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":557
 * 
 * 
 * cdef inline setSliceParts(Slice* s, t, long md_size):             # <<<<<<<<<<<<<<
 *     cdef slice s0 = None
 *     cdef long ti
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pycpx.pyconcert.setSliceParts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":597
 *     cdef readonly object __array_priority__
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise Exception("CPlexExpression not meant to be instantiated directly.")
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression___init__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pycpx_9pyconcert_15CPlexExpression___init__(CYTHON_UNUSED struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pycpx/pyconcert.pyx":598
 * 
 *     def __init__(self):
 *         raise Exception("CPlexExpression not meant to be instantiated directly.")             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, v):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pycpx/pyconcert.pyx":597
 *     cdef readonly object __array_priority__
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise Exception("CPlexExpression not meant to be instantiated directly.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":600
 *         raise Exception("CPlexExpression not meant to be instantiated directly.")
 * 
 *     def __add__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_ADD, self, v)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_3__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_3__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_2__add__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_2__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pycpx/pyconcert.pyx":601
 * 
 *     def __add__(self, v):
 *         return expr_var_op_var(OP_B_ADD, self, v)             # <<<<<<<<<<<<<<
 * 
 *     def __radd__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expr_var_op_var(OP_B_ADD, __pyx_v_self, __pyx_v_v)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":600
 *         raise Exception("CPlexExpression not meant to be instantiated directly.")
 * 
 *     def __add__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_ADD, self, v)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":603
 *         return expr_var_op_var(OP_B_ADD, self, v)
 * 
 *     def __radd__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_ADD, v, self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_5__radd__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_5__radd__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__radd__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_4__radd__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_4__radd__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__radd__", 0);

  /* "pycpx/pyconcert.pyx":604
 * 
 *     def __radd__(self, v):
 *         return expr_var_op_var(OP_B_ADD, v, self)             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expr_var_op_var(OP_B_ADD, __pyx_v_v, ((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":603
 *         return expr_var_op_var(OP_B_ADD, self, v)
 * 
 *     def __radd__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_ADD, v, self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__radd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":606
 *         return expr_var_op_var(OP_B_ADD, v, self)
 * 
 *     def __sub__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_SUBTRACT, self, v)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_7__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_7__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_6__sub__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_6__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "pycpx/pyconcert.pyx":607
 * 
 *     def __sub__(self, v):
 *         return expr_var_op_var(OP_B_SUBTRACT, self, v)             # <<<<<<<<<<<<<<
 * 
 *     def __rsub__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expr_var_op_var(OP_B_SUBTRACT, __pyx_v_self, __pyx_v_v)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":606
 *         return expr_var_op_var(OP_B_ADD, v, self)
 * 
 *     def __sub__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_SUBTRACT, self, v)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":609
 *         return expr_var_op_var(OP_B_SUBTRACT, self, v)
 * 
 *     def __rsub__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_SUBTRACT, v, self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_9__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_9__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rsub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_8__rsub__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_8__rsub__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rsub__", 0);

  /* "pycpx/pyconcert.pyx":610
 * 
 *     def __rsub__(self, v):
 *         return expr_var_op_var(OP_B_SUBTRACT, v, self)             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expr_var_op_var(OP_B_SUBTRACT, __pyx_v_v, ((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":609
 *         return expr_var_op_var(OP_B_SUBTRACT, self, v)
 * 
 *     def __rsub__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_SUBTRACT, v, self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__rsub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":612
 *         return expr_var_op_var(OP_B_SUBTRACT, v, self)
 * 
 *     def __mul__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_MULTIPLY, self, v)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_11__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_11__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_10__mul__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_10__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pycpx/pyconcert.pyx":613
 * 
 *     def __mul__(self, v):
 *         return expr_var_op_var(OP_B_MULTIPLY, self, v)             # <<<<<<<<<<<<<<
 * 
 *     def __rmul__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expr_var_op_var(OP_B_MULTIPLY, __pyx_v_self, __pyx_v_v)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":612
 *         return expr_var_op_var(OP_B_SUBTRACT, v, self)
 * 
 *     def __mul__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_MULTIPLY, self, v)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":615
 *         return expr_var_op_var(OP_B_MULTIPLY, self, v)
 * 
 *     def __rmul__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_MULTIPLY, v, self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_13__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_13__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rmul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_12__rmul__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_12__rmul__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rmul__", 0);

  /* "pycpx/pyconcert.pyx":616
 * 
 *     def __rmul__(self, v):
 *         return expr_var_op_var(OP_B_MULTIPLY, v, self)             # <<<<<<<<<<<<<<
 * 
 *     def __div__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expr_var_op_var(OP_B_MULTIPLY, __pyx_v_v, ((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":615
 *         return expr_var_op_var(OP_B_MULTIPLY, self, v)
 * 
 *     def __rmul__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_MULTIPLY, v, self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":618
 *         return expr_var_op_var(OP_B_MULTIPLY, v, self)
 * 
 *     def __div__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_DIVIDE, self, v)
 * 
 */

/* Python wrapper */
#if PY_MAJOR_VERSION < 3
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_15__div__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_15__div__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__div__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_14__div__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

#if PY_MAJOR_VERSION < 3
static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_14__div__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__div__", 0);

  /* "pycpx/pyconcert.pyx":619
 * 
 *     def __div__(self, v):
 *         return expr_var_op_var(OP_B_DIVIDE, self, v)             # <<<<<<<<<<<<<<
 * 
 *     def __rdiv__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expr_var_op_var(OP_B_DIVIDE, __pyx_v_self, __pyx_v_v)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":618
 *         return expr_var_op_var(OP_B_MULTIPLY, v, self)
 * 
 *     def __div__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_DIVIDE, self, v)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__div__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

/* "pycpx/pyconcert.pyx":621
 *         return expr_var_op_var(OP_B_DIVIDE, self, v)
 * 
 *     def __rdiv__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_DIVIDE, v, self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_17__rdiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_17__rdiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rdiv__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_16__rdiv__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_16__rdiv__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rdiv__", 0);

  /* "pycpx/pyconcert.pyx":622
 * 
 *     def __rdiv__(self, v):
 *         return expr_var_op_var(OP_B_DIVIDE, v, self)             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expr_var_op_var(OP_B_DIVIDE, __pyx_v_v, ((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":621
 *         return expr_var_op_var(OP_B_DIVIDE, self, v)
 * 
 *     def __rdiv__(self, v):             # <<<<<<<<<<<<<<
 *         return expr_var_op_var(OP_B_DIVIDE, v, self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__rdiv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":624
 *         return expr_var_op_var(OP_B_DIVIDE, v, self)
 * 
 *     def dot(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Performs the matrix dot product with `v`, regardless of
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_19dot(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_18dot[] = "\n        Performs the matrix dot product with `v`, regardless of\n        whether this expression or `v` is array or matrix type. \n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_19dot(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_18dot(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_18dot(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pycpx/pyconcert.pyx":629
 *         whether this expression or `v` is array or matrix type.
 *         """
 *         return expr_var_op_var(OP_B_MATRIXMULTIPLY, v, self)             # <<<<<<<<<<<<<<
 * 
 *     def mult(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expr_var_op_var(OP_B_MATRIXMULTIPLY, __pyx_v_v, ((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":624
 *         return expr_var_op_var(OP_B_DIVIDE, v, self)
 * 
 *     def dot(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Performs the matrix dot product with `v`, regardless of
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":631
 *         return expr_var_op_var(OP_B_MATRIXMULTIPLY, v, self)
 * 
 *     def mult(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Performs coefficient-wise mutliply operation with `v`,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_21mult(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_20mult[] = "\n        Performs coefficient-wise mutliply operation with `v`,\n        regardless of whether this expression or `v` is array or\n        matrix type.  This expresion and `v` must both have the same\n        dimensions, unless one is a scalar (1x1 matrix/array), in\n        which case it is repeated to match the shape of the other.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_21mult(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mult (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_20mult(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_20mult(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mult", 0);

  /* "pycpx/pyconcert.pyx":639
 *         which case it is repeated to match the shape of the other.
 *         """
 *         return expr_var_op_var(OP_B_ARRAYMULTIPLY, v, self)             # <<<<<<<<<<<<<<
 * 
 *     ##################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_expr_var_op_var(OP_B_ARRAYMULTIPLY, __pyx_v_v, ((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":631
 *         return expr_var_op_var(OP_B_MATRIXMULTIPLY, v, self)
 * 
 *     def mult(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Performs coefficient-wise mutliply operation with `v`,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.mult", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":644
 *     # Generation of constraints
 * 
 *     def __richcmp__(a1, a2, int op):             # <<<<<<<<<<<<<<
 *         # <	0
 *         # ==	2
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_23__richcmp__(PyObject *__pyx_v_a1, PyObject *__pyx_v_a2, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_23__richcmp__(PyObject *__pyx_v_a1, PyObject *__pyx_v_a2, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_22__richcmp__(((PyObject *)__pyx_v_a1), ((PyObject *)__pyx_v_a2), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_22__richcmp__(PyObject *__pyx_v_a1, PyObject *__pyx_v_a2, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pycpx/pyconcert.pyx":661
 *         elif op == 4:
 *             return cstr_var_op_var(OP_B_GT, a1, a2)
 *         elif op == 5:             # <<<<<<<<<<<<<<
 *             return cstr_var_op_var(OP_B_GTEQ, a1, a2)
 *         else:
 */
  switch (__pyx_v_op) {

    /* "pycpx/pyconcert.pyx":651
 *         # !=	3
 *         # >=	5
 *         if op == 0:             # <<<<<<<<<<<<<<
 *             return cstr_var_op_var(OP_B_LT, a1, a2)
 *         elif op == 1:
 */
    case 0:

    /* "pycpx/pyconcert.pyx":652
 *         # >=	5
 *         if op == 0:
 *             return cstr_var_op_var(OP_B_LT, a1, a2)             # <<<<<<<<<<<<<<
 *         elif op == 1:
 *             return cstr_var_op_var(OP_B_LTEQ, a1, a2)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(OP_B_LT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_var_op_var(__pyx_t_1, __pyx_v_a1, __pyx_v_a2)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    break;

    /* "pycpx/pyconcert.pyx":653
 *         if op == 0:
 *             return cstr_var_op_var(OP_B_LT, a1, a2)
 *         elif op == 1:             # <<<<<<<<<<<<<<
 *             return cstr_var_op_var(OP_B_LTEQ, a1, a2)
 *         elif op == 2:
 */
    case 1:

    /* "pycpx/pyconcert.pyx":654
 *             return cstr_var_op_var(OP_B_LT, a1, a2)
 *         elif op == 1:
 *             return cstr_var_op_var(OP_B_LTEQ, a1, a2)             # <<<<<<<<<<<<<<
 *         elif op == 2:
 *             return cstr_var_op_var(OP_B_EQUAL, a1, a2)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_LTEQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_var_op_var(__pyx_t_2, __pyx_v_a1, __pyx_v_a2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;

    /* "pycpx/pyconcert.pyx":655
 *         elif op == 1:
 *             return cstr_var_op_var(OP_B_LTEQ, a1, a2)
 *         elif op == 2:             # <<<<<<<<<<<<<<
 *             return cstr_var_op_var(OP_B_EQUAL, a1, a2)
 *         elif op == 3:
 */
    case 2:

    /* "pycpx/pyconcert.pyx":656
 *             return cstr_var_op_var(OP_B_LTEQ, a1, a2)
 *         elif op == 2:
 *             return cstr_var_op_var(OP_B_EQUAL, a1, a2)             # <<<<<<<<<<<<<<
 *         elif op == 3:
 *             return cstr_var_op_var(OP_B_NOTEQ, a1, a2)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(OP_B_EQUAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_var_op_var(__pyx_t_1, __pyx_v_a1, __pyx_v_a2)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    break;

    /* "pycpx/pyconcert.pyx":657
 *         elif op == 2:
 *             return cstr_var_op_var(OP_B_EQUAL, a1, a2)
 *         elif op == 3:             # <<<<<<<<<<<<<<
 *             return cstr_var_op_var(OP_B_NOTEQ, a1, a2)
 *         elif op == 4:
 */
    case 3:

    /* "pycpx/pyconcert.pyx":658
 *             return cstr_var_op_var(OP_B_EQUAL, a1, a2)
 *         elif op == 3:
 *             return cstr_var_op_var(OP_B_NOTEQ, a1, a2)             # <<<<<<<<<<<<<<
 *         elif op == 4:
 *             return cstr_var_op_var(OP_B_GT, a1, a2)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_NOTEQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_var_op_var(__pyx_t_2, __pyx_v_a1, __pyx_v_a2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;

    /* "pycpx/pyconcert.pyx":659
 *         elif op == 3:
 *             return cstr_var_op_var(OP_B_NOTEQ, a1, a2)
 *         elif op == 4:             # <<<<<<<<<<<<<<
 *             return cstr_var_op_var(OP_B_GT, a1, a2)
 *         elif op == 5:
 */
    case 4:

    /* "pycpx/pyconcert.pyx":660
 *             return cstr_var_op_var(OP_B_NOTEQ, a1, a2)
 *         elif op == 4:
 *             return cstr_var_op_var(OP_B_GT, a1, a2)             # <<<<<<<<<<<<<<
 *         elif op == 5:
 *             return cstr_var_op_var(OP_B_GTEQ, a1, a2)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(OP_B_GT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_var_op_var(__pyx_t_1, __pyx_v_a1, __pyx_v_a2)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    break;

    /* "pycpx/pyconcert.pyx":661
 *         elif op == 4:
 *             return cstr_var_op_var(OP_B_GT, a1, a2)
 *         elif op == 5:             # <<<<<<<<<<<<<<
 *             return cstr_var_op_var(OP_B_GTEQ, a1, a2)
 *         else:
 */
    case 5:

    /* "pycpx/pyconcert.pyx":662
 *             return cstr_var_op_var(OP_B_GT, a1, a2)
 *         elif op == 5:
 *             return cstr_var_op_var(OP_B_GTEQ, a1, a2)             # <<<<<<<<<<<<<<
 *         else:
 *             assert False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_GTEQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_var_op_var(__pyx_t_2, __pyx_v_a1, __pyx_v_a2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default:

    /* "pycpx/pyconcert.pyx":664
 *             return cstr_var_op_var(OP_B_GTEQ, a1, a2)
 *         else:
 *             assert False             # <<<<<<<<<<<<<<
 * 
 *     # More special methods coming
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!0)) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif
    break;
  }

  /* "pycpx/pyconcert.pyx":644
 *     # Generation of constraints
 * 
 *     def __richcmp__(a1, a2, int op):             # <<<<<<<<<<<<<<
 *         # <	0
 *         # ==	2
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":668
 *     # More special methods coming
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the transpose of the current expression matrix.  This
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_25T(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_24T[] = "\n        Returns the transpose of the current expression matrix.  This\n        is the property form of :meth:`transpose()`.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_25T(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("T (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_24T(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_24T(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("T", 0);

  /* "pycpx/pyconcert.pyx":674
 *         """
 * 
 *         return self.transpose()             # <<<<<<<<<<<<<<
 * 
 *     cpdef transpose(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self->__pyx_vtab)->transpose(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":668
 *     # More special methods coming
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the transpose of the current expression matrix.  This
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.T", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":676
 *         return self.transpose()
 * 
 *     cpdef transpose(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the transpose of the current expression matrix.
 */

static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_27transpose(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5pycpx_9pyconcert_15CPlexExpression_transpose(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transpose", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_transpose); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_27transpose)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pycpx/pyconcert.pyx":681
 *         """
 * 
 *         return newCPEFromCPEWithSameProperties(self, self.data.newTransposed())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromCPEWithSameProperties(__pyx_v_self, __pyx_v_self->data->newTransposed())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":676
 *         return self.transpose()
 * 
 *     cpdef transpose(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the transpose of the current expression matrix.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.transpose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_27transpose(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_26transpose[] = "\n        Returns the transpose of the current expression matrix.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_27transpose(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transpose (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_26transpose(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_26transpose(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transpose", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self->__pyx_vtab)->transpose(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.transpose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":684
 * 
 *     @property
 *     def A(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the expression object as an array, causing it to
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_29A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_28A[] = "\n        Returns the expression object as an array, causing it to\n        interact with other objects using array semantics.  By\n        default, expression objects are 2-d matrices (possibly n by 1\n        column vectors or a 1 x n row vectors).\n\n        Note that if at least one of the operands of the product\n        operator, ``*``, is a matrix, matrix multiplication is\n        performed.  Element-wise array operation is performed only if\n        the two operands are arrays.  This behavior is identical to\n        numpy, with the exception that 1x1 blocks are treated as\n        scalars.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_29A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_28A(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_28A(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A", 0);

  /* "pycpx/pyconcert.pyx":699
 *         """
 * 
 *         return newCPEFromCPEWithSameProperties(self, self.data.newAsArray())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromCPEWithSameProperties(__pyx_v_self, __pyx_v_self->data->newAsArray())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":684
 * 
 *     @property
 *     def A(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the expression object as an array, causing it to
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.A", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":702
 * 
 *     @property
 *     def M(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the expression object as a matrix, causing it to
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_31M(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_30M[] = "\n        Returns the expression object as a matrix, causing it to\n        interact with other objects using matrix semantics.  By\n        default, expression objects are 2-d matrices (possibly n by 1\n        column vectors or a 1 x n row vectors).\n\n        Note that if at least one of the operands of the product\n        operator, ``*``, is a matrix, matrix multiplication is\n        performed.  Element-wise array operation is performed only if\n        the two operands are arrays.  This behavior is identical to\n        numpy, with the exception that 1x1 blocks are treated as\n        scalars.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_31M(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("M (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_30M(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_30M(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("M", 0);

  /* "pycpx/pyconcert.pyx":716
 *         scalars.
 *         """
 *         return newCPEFromCPEWithSameProperties(self, self.data.newAsMatrix())             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromCPEWithSameProperties(__pyx_v_self, __pyx_v_self->data->newAsMatrix())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":702
 * 
 *     @property
 *     def M(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the expression object as a matrix, causing it to
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.M", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":718
 *         return newCPEFromCPEWithSameProperties(self, self.data.newAsMatrix())
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_NEGATIVE))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_33__neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_33__neg__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_32__neg__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_32__neg__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__neg__", 0);

  /* "pycpx/pyconcert.pyx":719
 * 
 *     def __neg__(self):
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_NEGATIVE))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromCPEWithSameProperties(__pyx_v_self, newFromUnaryOp((__pyx_v_self->data[0]), OP_U_NEGATIVE))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":718
 *         return newCPEFromCPEWithSameProperties(self, self.data.newAsMatrix())
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_NEGATIVE))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":722
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the shape of the expression as a 2-tuple.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_35shape(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_34shape[] = "\n        Returns the shape of the expression as a 2-tuple.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_35shape(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shape (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_34shape(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_34shape(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shape", 0);

  /* "pycpx/pyconcert.pyx":726
 *         Returns the shape of the expression as a 2-tuple.
 *         """
 *         return (self.data.md().shape(0), self.data.md().shape(1))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->data->md().shape(0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->data->md().shape(1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":722
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the shape of the expression as a 2-tuple.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.shape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":729
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the total number of elements in the current expression.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_37size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_36size[] = "\n        Returns the total number of elements in the current expression.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_37size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_36size(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_36size(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "pycpx/pyconcert.pyx":734
 *         """
 * 
 *         return self.data.md().size()             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->data->md().size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":729
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the total number of elements in the current expression.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":736
 *         return self.data.md().size()
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 * 
 *         # This is a little tricky.  We need to make variables
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_39__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_39__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_38__hash__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_38__hash__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_hash_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pycpx/pyconcert.pyx":749
 *         # (which would handle all the slicing stuff).
 * 
 *         if self.key is None:             # <<<<<<<<<<<<<<
 *             raise NotImplemented
 * 
 */
  __pyx_t_1 = (__pyx_v_self->key == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":750
 * 
 *         if self.key is None:
 *             raise NotImplemented             # <<<<<<<<<<<<<<
 * 
 *         return self.model._getKeyStringId(self.key, self.data.md())
 */
    __Pyx_Raise(__pyx_builtin_NotImplemented, 0, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":752
 *             raise NotImplemented
 * 
 *         return self.model._getKeyStringId(self.key, self.data.md())             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
  __pyx_t_3 = __pyx_v_self->key;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->model->__pyx_vtab)->_getKeyStringId(__pyx_v_self->model, ((PyObject*)__pyx_t_3), __pyx_v_self->data->md()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_AsHash_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_hash_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":736
 *         return self.data.md().size()
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 * 
 *         # This is a little tricky.  We need to make variables
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":754
 *         return self.model._getKeyStringId(self.key, self.data.md())
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 * 
 *         cdef tuple t
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_41__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_41__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_40__getitem__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_40__getitem__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_t = 0;
  Slice __pyx_v_s0;
  Slice __pyx_v_s1;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_new_cpx = 0;
  int __pyx_v_sl0_is_slice;
  int __pyx_v_sl1_is_slice;
  long __pyx_v_shape_0;
  long __pyx_v_shape_1;
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_v_new_size = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pycpx/pyconcert.pyx":759
 *         cdef Slice s0, s1
 *         cdef CPlexExpression new_cpx
 *         cdef bint sl0_is_slice = True, sl1_is_slice = True             # <<<<<<<<<<<<<<
 * 
 *         if type(key) is tuple:
 */
  __pyx_v_sl0_is_slice = 1;
  __pyx_v_sl1_is_slice = 1;

  /* "pycpx/pyconcert.pyx":761
 *         cdef bint sl0_is_slice = True, sl1_is_slice = True
 * 
 *         if type(key) is tuple:             # <<<<<<<<<<<<<<
 *             t = <tuple>key
 * 
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_key)) == ((PyObject *)((PyObject*)(&PyTuple_Type))));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":762
 * 
 *         if type(key) is tuple:
 *             t = <tuple>key             # <<<<<<<<<<<<<<
 * 
 *             if len(t) == 1:
 */
    __pyx_t_3 = __pyx_v_key;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_t = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pycpx/pyconcert.pyx":764
 *             t = <tuple>key
 * 
 *             if len(t) == 1:             # <<<<<<<<<<<<<<
 *                 return self.__getitem__(t[0])
 *             if len(t) != 2:
 */
    if (unlikely(__pyx_v_t == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v_t); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_4 == 1) != 0);
    if (__pyx_t_2) {

      /* "pycpx/pyconcert.pyx":765
 * 
 *             if len(t) == 1:
 *                 return self.__getitem__(t[0])             # <<<<<<<<<<<<<<
 *             if len(t) != 2:
 *                 raise IndexError("Expression arrays only 2 dimensional.")
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getitem); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__pyx_v_t == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_t, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;
    }

    /* "pycpx/pyconcert.pyx":766
 *             if len(t) == 1:
 *                 return self.__getitem__(t[0])
 *             if len(t) != 2:             # <<<<<<<<<<<<<<
 *                 raise IndexError("Expression arrays only 2 dimensional.")
 * 
 */
    if (unlikely(__pyx_v_t == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v_t); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_4 != 2) != 0);
    if (__pyx_t_2) {

      /* "pycpx/pyconcert.pyx":767
 *                 return self.__getitem__(t[0])
 *             if len(t) != 2:
 *                 raise IndexError("Expression arrays only 2 dimensional.")             # <<<<<<<<<<<<<<
 * 
 *             sl0_is_slice = setSliceParts(&s0, t[0], self.data.md().shape(0))
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pycpx/pyconcert.pyx":769
 *                 raise IndexError("Expression arrays only 2 dimensional.")
 * 
 *             sl0_is_slice = setSliceParts(&s0, t[0], self.data.md().shape(0))             # <<<<<<<<<<<<<<
 *             sl1_is_slice = setSliceParts(&s1, t[1], self.data.md().shape(1))
 * 
 */
    if (unlikely(__pyx_v_t == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_t, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_f_5pycpx_9pyconcert_setSliceParts((&__pyx_v_s0), __pyx_t_5, __pyx_v_self->data->md().shape(0)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_sl0_is_slice = __pyx_t_2;

    /* "pycpx/pyconcert.pyx":770
 * 
 *             sl0_is_slice = setSliceParts(&s0, t[0], self.data.md().shape(0))
 *             sl1_is_slice = setSliceParts(&s1, t[1], self.data.md().shape(1))             # <<<<<<<<<<<<<<
 * 
 *             new_cpx = newCPEFromExisting(
 */
    if (unlikely(__pyx_v_t == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_t, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __pyx_f_5pycpx_9pyconcert_setSliceParts((&__pyx_v_s1), __pyx_t_6, __pyx_v_self->data->md().shape(1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_sl1_is_slice = __pyx_t_2;

    /* "pycpx/pyconcert.pyx":773
 * 
 *             new_cpx = newCPEFromExisting(
 *                 self.model, self.data.newFromGeneralSlice(s0, s1))             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_5 = ((PyObject *)__pyx_v_self->model);
    __Pyx_INCREF(__pyx_t_5);

    /* "pycpx/pyconcert.pyx":772
 *             sl1_is_slice = setSliceParts(&s1, t[1], self.data.md().shape(1))
 * 
 *             new_cpx = newCPEFromExisting(             # <<<<<<<<<<<<<<
 *                 self.model, self.data.newFromGeneralSlice(s0, s1))
 * 
 */
    __pyx_t_6 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_5), __pyx_v_self->data->newFromGeneralSlice(__pyx_v_s0, __pyx_v_s1))); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_new_cpx = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_6);
    __pyx_t_6 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":776
 * 
 *         else:
 *             sl0_is_slice = setSliceParts(&s0, key, self.data.md().shape(0))             # <<<<<<<<<<<<<<
 * 
 *             new_cpx = newCPEFromExisting(
 */
    __pyx_t_6 = __pyx_f_5pycpx_9pyconcert_setSliceParts((&__pyx_v_s0), __pyx_v_key, __pyx_v_self->data->md().shape(0)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_sl0_is_slice = __pyx_t_2;

    /* "pycpx/pyconcert.pyx":779
 * 
 *             new_cpx = newCPEFromExisting(
 *                 self.model, self.data.newFromSlice(s0, SliceFull(self.data.md().shape(1))))             # <<<<<<<<<<<<<<
 * 
 *         cdef long shape_0 = new_cpx.data.md().shape(0)
 */
    __pyx_t_6 = ((PyObject *)__pyx_v_self->model);
    __Pyx_INCREF(__pyx_t_6);

    /* "pycpx/pyconcert.pyx":778
 *             sl0_is_slice = setSliceParts(&s0, key, self.data.md().shape(0))
 * 
 *             new_cpx = newCPEFromExisting(             # <<<<<<<<<<<<<<
 *                 self.model, self.data.newFromSlice(s0, SliceFull(self.data.md().shape(1))))
 * 
 */
    __pyx_t_5 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_6), __pyx_v_self->data->newFromSlice(__pyx_v_s0, SliceFull(__pyx_v_self->data->md().shape(1))))); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_new_cpx = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "pycpx/pyconcert.pyx":781
 *                 self.model, self.data.newFromSlice(s0, SliceFull(self.data.md().shape(1))))
 * 
 *         cdef long shape_0 = new_cpx.data.md().shape(0)             # <<<<<<<<<<<<<<
 *         cdef long shape_1 = new_cpx.data.md().shape(1)
 * 
 */
  __pyx_v_shape_0 = __pyx_v_new_cpx->data->md().shape(0);

  /* "pycpx/pyconcert.pyx":782
 * 
 *         cdef long shape_0 = new_cpx.data.md().shape(0)
 *         cdef long shape_1 = new_cpx.data.md().shape(1)             # <<<<<<<<<<<<<<
 * 
 *         # Now that we have set new_cpx, we need to figure out the new size
 */
  __pyx_v_shape_1 = __pyx_v_new_cpx->data->md().shape(1);

  /* "pycpx/pyconcert.pyx":785
 * 
 *         # Now that we have set new_cpx, we need to figure out the new size
 *         if self.original_size is not None:             # <<<<<<<<<<<<<<
 *             size = self.original_size
 * 
 */
  __pyx_t_2 = (__pyx_v_self->original_size != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":786
 *         # Now that we have set new_cpx, we need to figure out the new size
 *         if self.original_size is not None:
 *             size = self.original_size             # <<<<<<<<<<<<<<
 * 
 *             if size == s_scalar:
 */
    __pyx_t_5 = __pyx_v_self->original_size;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_size = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pycpx/pyconcert.pyx":788
 *             size = self.original_size
 * 
 *             if size == s_scalar:             # <<<<<<<<<<<<<<
 *                 assert shape_0 == 1 and shape_1 == 1
 *                 new_size = s_scalar
 */
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_size, __pyx_v_5pycpx_9pyconcert_s_scalar, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_1) {

      /* "pycpx/pyconcert.pyx":789
 * 
 *             if size == s_scalar:
 *                 assert shape_0 == 1 and shape_1 == 1             # <<<<<<<<<<<<<<
 *                 new_size = s_scalar
 * 
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = ((__pyx_v_shape_0 == 1) != 0);
        if (__pyx_t_1) {
          __pyx_t_2 = ((__pyx_v_shape_1 == 1) != 0);
          __pyx_t_7 = __pyx_t_2;
        } else {
          __pyx_t_7 = __pyx_t_1;
        }
        if (unlikely(!__pyx_t_7)) {
          PyErr_SetNone(PyExc_AssertionError);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
      }
      #endif

      /* "pycpx/pyconcert.pyx":790
 *             if size == s_scalar:
 *                 assert shape_0 == 1 and shape_1 == 1
 *                 new_size = s_scalar             # <<<<<<<<<<<<<<
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 2):
 */
      __Pyx_INCREF(__pyx_v_5pycpx_9pyconcert_s_scalar);
      __pyx_v_new_size = __pyx_v_5pycpx_9pyconcert_s_scalar;
      goto __pyx_L7;
    }

    /* "pycpx/pyconcert.pyx":792
 *                 new_size = s_scalar
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 2):             # <<<<<<<<<<<<<<
 * 
 *                 if sl0_is_slice and not sl1_is_slice:
 */
    __pyx_t_7 = (((PyObject *)Py_TYPE(__pyx_v_size)) == ((PyObject *)((PyObject*)(&PyTuple_Type))));
    if ((__pyx_t_7 != 0)) {
      if (unlikely(__pyx_v_size == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_size)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = ((__pyx_t_4 == 2) != 0);
      __pyx_t_2 = __pyx_t_1;
    } else {
      __pyx_t_2 = (__pyx_t_7 != 0);
    }
    if (__pyx_t_2) {

      /* "pycpx/pyconcert.pyx":794
 *             elif (type(size) is tuple and len(<tuple>size) == 2):
 * 
 *                 if sl0_is_slice and not sl1_is_slice:             # <<<<<<<<<<<<<<
 *                     assert shape_1 == 1
 *                     new_size = shape_0
 */
      if ((__pyx_v_sl0_is_slice != 0)) {
        __pyx_t_2 = ((!(__pyx_v_sl1_is_slice != 0)) != 0);
        __pyx_t_7 = __pyx_t_2;
      } else {
        __pyx_t_7 = (__pyx_v_sl0_is_slice != 0);
      }
      if (__pyx_t_7) {

        /* "pycpx/pyconcert.pyx":795
 * 
 *                 if sl0_is_slice and not sl1_is_slice:
 *                     assert shape_1 == 1             # <<<<<<<<<<<<<<
 *                     new_size = shape_0
 *                 elif sl0_is_slice and not sl1_is_slice:
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!((__pyx_v_shape_1 == 1) != 0))) {
            PyErr_SetNone(PyExc_AssertionError);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
        }
        #endif

        /* "pycpx/pyconcert.pyx":796
 *                 if sl0_is_slice and not sl1_is_slice:
 *                     assert shape_1 == 1
 *                     new_size = shape_0             # <<<<<<<<<<<<<<
 *                 elif sl0_is_slice and not sl1_is_slice:
 *                     assert shape_0 == 1
 */
        __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_shape_0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_v_new_size = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }

      /* "pycpx/pyconcert.pyx":797
 *                     assert shape_1 == 1
 *                     new_size = shape_0
 *                 elif sl0_is_slice and not sl1_is_slice:             # <<<<<<<<<<<<<<
 *                     assert shape_0 == 1
 *                     new_size = shape_1
 */
      if ((__pyx_v_sl0_is_slice != 0)) {
        __pyx_t_7 = ((!(__pyx_v_sl1_is_slice != 0)) != 0);
        __pyx_t_2 = __pyx_t_7;
      } else {
        __pyx_t_2 = (__pyx_v_sl0_is_slice != 0);
      }
      if (__pyx_t_2) {

        /* "pycpx/pyconcert.pyx":798
 *                     new_size = shape_0
 *                 elif sl0_is_slice and not sl1_is_slice:
 *                     assert shape_0 == 1             # <<<<<<<<<<<<<<
 *                     new_size = shape_1
 *                 elif not sl0_is_slice and not sl1_is_slice:
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!((__pyx_v_shape_0 == 1) != 0))) {
            PyErr_SetNone(PyExc_AssertionError);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
        }
        #endif

        /* "pycpx/pyconcert.pyx":799
 *                 elif sl0_is_slice and not sl1_is_slice:
 *                     assert shape_0 == 1
 *                     new_size = shape_1             # <<<<<<<<<<<<<<
 *                 elif not sl0_is_slice and not sl1_is_slice:
 *                     assert shape_0 == shape_1 == 1
 */
        __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_shape_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_v_new_size = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }

      /* "pycpx/pyconcert.pyx":800
 *                     assert shape_0 == 1
 *                     new_size = shape_1
 *                 elif not sl0_is_slice and not sl1_is_slice:             # <<<<<<<<<<<<<<
 *                     assert shape_0 == shape_1 == 1
 *                     new_size = s_scalar
 */
      __pyx_t_2 = ((!(__pyx_v_sl0_is_slice != 0)) != 0);
      if (__pyx_t_2) {
        __pyx_t_7 = ((!(__pyx_v_sl1_is_slice != 0)) != 0);
        __pyx_t_1 = __pyx_t_7;
      } else {
        __pyx_t_1 = __pyx_t_2;
      }
      if (__pyx_t_1) {

        /* "pycpx/pyconcert.pyx":801
 *                     new_size = shape_1
 *                 elif not sl0_is_slice and not sl1_is_slice:
 *                     assert shape_0 == shape_1 == 1             # <<<<<<<<<<<<<<
 *                     new_size = s_scalar
 *                 else:
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          __pyx_t_1 = (__pyx_v_shape_0 == __pyx_v_shape_1);
          if (__pyx_t_1) {
            __pyx_t_1 = (__pyx_v_shape_1 == 1);
          }
          if (unlikely(!(__pyx_t_1 != 0))) {
            PyErr_SetNone(PyExc_AssertionError);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
        }
        #endif

        /* "pycpx/pyconcert.pyx":802
 *                 elif not sl0_is_slice and not sl1_is_slice:
 *                     assert shape_0 == shape_1 == 1
 *                     new_size = s_scalar             # <<<<<<<<<<<<<<
 *                 else:
 *                     new_size = (shape_0, shape_1)
 */
        __Pyx_INCREF(__pyx_v_5pycpx_9pyconcert_s_scalar);
        __pyx_v_new_size = __pyx_v_5pycpx_9pyconcert_s_scalar;
        goto __pyx_L8;
      }
      /*else*/ {

        /* "pycpx/pyconcert.pyx":804
 *                     new_size = s_scalar
 *                 else:
 *                     new_size = (shape_0, shape_1)             # <<<<<<<<<<<<<<
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 1) or isscalar(size):
 */
        __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_shape_0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_shape_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_v_new_size = __pyx_t_3;
        __pyx_t_3 = 0;
      }
      __pyx_L8:;
      goto __pyx_L7;
    }

    /* "pycpx/pyconcert.pyx":806
 *                     new_size = (shape_0, shape_1)
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 1) or isscalar(size):             # <<<<<<<<<<<<<<
 *                 assert shape_1 == 1
 * 
 */
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_size)) == ((PyObject *)((PyObject*)(&PyTuple_Type))));
    if (__pyx_t_1) {
      if (unlikely(__pyx_v_size == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_4 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_size)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = (__pyx_t_4 == 1);
      __pyx_t_7 = __pyx_t_2;
    } else {
      __pyx_t_7 = __pyx_t_1;
    }
    if (!__pyx_t_7) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_isscalar); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_size);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_size);
      __Pyx_GIVEREF(__pyx_v_size);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_2 = __pyx_t_1;
    } else {
      __pyx_t_2 = __pyx_t_7;
    }
    if (__pyx_t_2) {

      /* "pycpx/pyconcert.pyx":807
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 1) or isscalar(size):
 *                 assert shape_1 == 1             # <<<<<<<<<<<<<<
 * 
 *                 if sl0_is_slice:
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        if (unlikely(!((__pyx_v_shape_1 == 1) != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
      }
      #endif

      /* "pycpx/pyconcert.pyx":809
 *                 assert shape_1 == 1
 * 
 *                 if sl0_is_slice:             # <<<<<<<<<<<<<<
 *                     new_size = shape_0
 *                 else:
 */
      __pyx_t_2 = (__pyx_v_sl0_is_slice != 0);
      if (__pyx_t_2) {

        /* "pycpx/pyconcert.pyx":810
 * 
 *                 if sl0_is_slice:
 *                     new_size = shape_0             # <<<<<<<<<<<<<<
 *                 else:
 *                     new_size = s_scalar
 */
        __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_shape_0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_v_new_size = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L9;
      }
      /*else*/ {

        /* "pycpx/pyconcert.pyx":812
 *                     new_size = shape_0
 *                 else:
 *                     new_size = s_scalar             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        __Pyx_INCREF(__pyx_v_5pycpx_9pyconcert_s_scalar);
        __pyx_v_new_size = __pyx_v_5pycpx_9pyconcert_s_scalar;
      }
      __pyx_L9:;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":815
 * 
 *             else:
 *                 assert False             # <<<<<<<<<<<<<<
 * 
 *             new_cpx.original_size = new_size
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        if (unlikely(!0)) {
          PyErr_SetNone(PyExc_AssertionError);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
      }
      #endif
    }
    __pyx_L7:;

    /* "pycpx/pyconcert.pyx":817
 *                 assert False
 * 
 *             new_cpx.original_size = new_size             # <<<<<<<<<<<<<<
 * 
 *         new_cpx.key = self.key
 */
    if (unlikely(!__pyx_v_new_size)) { __Pyx_RaiseUnboundLocalError("new_size"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __Pyx_INCREF(__pyx_v_new_size);
    __Pyx_GIVEREF(__pyx_v_new_size);
    __Pyx_GOTREF(__pyx_v_new_cpx->original_size);
    __Pyx_DECREF(__pyx_v_new_cpx->original_size);
    __pyx_v_new_cpx->original_size = __pyx_v_new_size;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "pycpx/pyconcert.pyx":819
 *             new_cpx.original_size = new_size
 * 
 *         new_cpx.key = self.key             # <<<<<<<<<<<<<<
 * 
 *         return new_cpx
 */
  __pyx_t_5 = __pyx_v_self->key;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_new_cpx->key);
  __Pyx_DECREF(__pyx_v_new_cpx->key);
  __pyx_v_new_cpx->key = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pycpx/pyconcert.pyx":821
 *         new_cpx.key = self.key
 * 
 *         return new_cpx             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_cpx));
  __pyx_r = ((PyObject *)__pyx_v_new_cpx);
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":754
 *         return self.model._getKeyStringId(self.key, self.data.md())
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 * 
 *         cdef tuple t
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_cpx);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XDECREF(__pyx_v_new_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":824
 * 
 * 
 *     cpdef CPlexExpression sum(self, axis = None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the sum of the current
 */

static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_43sum(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_15CPlexExpression_sum(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_5pycpx_9pyconcert_15CPlexExpression_sum *__pyx_optional_args) {
  PyObject *__pyx_v_axis = ((PyObject *)Py_None);
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sum", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_axis = __pyx_optional_args->axis;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sum); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_43sum)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_axis);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_axis);
      __Pyx_GIVEREF(__pyx_v_axis);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5pycpx_9pyconcert_CPlexExpression))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pycpx/pyconcert.pyx":842
 * 
 *         """
 *         return newCPEFromExisting(self.model, newFromReduction(             # <<<<<<<<<<<<<<
 *             self.data[0],
 *             OP_R_SUM | (OP_SIMPLE_FLAG if self.is_simple else 0),
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_v_self->model);
  __Pyx_INCREF(__pyx_t_1);

  /* "pycpx/pyconcert.pyx":844
 *         return newCPEFromExisting(self.model, newFromReduction(
 *             self.data[0],
 *             OP_R_SUM | (OP_SIMPLE_FLAG if self.is_simple else 0),             # <<<<<<<<<<<<<<
 *             -1 if axis is None else axis))
 * 
 */
  if ((__pyx_v_self->is_simple != 0)) {
    __pyx_t_4 = OP_SIMPLE_FLAG;
  } else {
    __pyx_t_4 = 0;
  }

  /* "pycpx/pyconcert.pyx":845
 *             self.data[0],
 *             OP_R_SUM | (OP_SIMPLE_FLAG if self.is_simple else 0),
 *             -1 if axis is None else axis))             # <<<<<<<<<<<<<<
 * 
 *     def mean(self, axis = None):
 */
  __pyx_t_6 = (__pyx_v_axis == Py_None);
  if ((__pyx_t_6 != 0)) {
    __pyx_t_5 = -1;
  } else {
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_axis); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __pyx_t_7;
  }

  /* "pycpx/pyconcert.pyx":842
 * 
 *         """
 *         return newCPEFromExisting(self.model, newFromReduction(             # <<<<<<<<<<<<<<
 *             self.data[0],
 *             OP_R_SUM | (OP_SIMPLE_FLAG if self.is_simple else 0),
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_1), newFromReduction((__pyx_v_self->data[0]), (OP_R_SUM | __pyx_t_4), __pyx_t_5))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":824
 * 
 * 
 *     cpdef CPlexExpression sum(self, axis = None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the sum of the current
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_43sum(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_42sum[] = "\n        Returns an expression representing the sum of the current\n        expression.  If `axis` is None (default), it is the sum of\n        every element in the expression; otherwise, the sum is\n        performed along the particular axis (0 or 1).  If ``X`` has\n        shape ``(m, n)``, then ``X.sum(0)`` has shape ``(1,n)``.\n\n        The sum can be used in constraints, the objective, or in\n        retriving values.  For example, the following are all valid::\n\n          m.constrain(X.sum(axis = 1) <= 10)\n\n          m.minimize(X.sum())\n\n          print m[X.sum(axis = 0)]\n\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_43sum(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_axis);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sum") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_axis = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sum", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_42sum(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), __pyx_v_axis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_42sum(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_axis) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5pycpx_9pyconcert_15CPlexExpression_sum __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sum", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.axis = __pyx_v_axis;
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self->__pyx_vtab)->sum(__pyx_v_self, 1, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":847
 *             -1 if axis is None else axis))
 * 
 *     def mean(self, axis = None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the mean of the current
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_45mean(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_44mean[] = "\n        Returns an expression representing the mean of the current\n        expression.  If `axis` is None (default), it is the mean of\n        every element in the expression; otherwise, the mean is\n        performed along the particular axis (0 or 1).  If ``X`` has\n        shape ``(m, n)``, then ``X.mean(0)`` has shape ``(1,n)``.\n\n        The mean can be used in constraints, the objective, or in\n        retriving values.  For example, the following are all valid::\n\n          m.constrain(X.mean(axis = 1) <= 10)\n\n          m.minimize(X.mean())\n\n          print m[X.mean(axis = 0)]\n\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_45mean(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mean (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_axis);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mean") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_axis = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mean", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_44mean(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), __pyx_v_axis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_44mean(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_axis) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_sum_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5pycpx_9pyconcert_15CPlexExpression_sum __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mean", 0);

  /* "pycpx/pyconcert.pyx":866
 *         """
 * 
 *         cdef CPlexExpression sum_res = self.sum(axis)             # <<<<<<<<<<<<<<
 * 
 *         if axis == 0:
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.axis = __pyx_v_axis;
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self->__pyx_vtab)->sum(__pyx_v_self, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sum_res = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":868
 *         cdef CPlexExpression sum_res = self.sum(axis)
 * 
 *         if axis == 0:             # <<<<<<<<<<<<<<
 *             return sum_res / self.data.md().shape(0)
 *         elif axis == 1:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_axis, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "pycpx/pyconcert.pyx":869
 * 
 *         if axis == 0:
 *             return sum_res / self.data.md().shape(0)             # <<<<<<<<<<<<<<
 *         elif axis == 1:
 *             return sum_res / self.data.md().shape(1)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->data->md().shape(0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyNumber_Divide(((PyObject *)__pyx_v_sum_res), __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "pycpx/pyconcert.pyx":870
 *         if axis == 0:
 *             return sum_res / self.data.md().shape(0)
 *         elif axis == 1:             # <<<<<<<<<<<<<<
 *             return sum_res / self.data.md().shape(1)
 *         else:
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_axis, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "pycpx/pyconcert.pyx":871
 *             return sum_res / self.data.md().shape(0)
 *         elif axis == 1:
 *             return sum_res / self.data.md().shape(1)             # <<<<<<<<<<<<<<
 *         else:
 *             return sum_res / self.data.md().size()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->data->md().shape(1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyNumber_Divide(((PyObject *)__pyx_v_sum_res), __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":873
 *             return sum_res / self.data.md().shape(1)
 *         else:
 *             return sum_res / self.data.md().size()             # <<<<<<<<<<<<<<
 * 
 *     def max(self, axis = None):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->data->md().size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyNumber_Divide(((PyObject *)__pyx_v_sum_res), __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "pycpx/pyconcert.pyx":847
 *             -1 if axis is None else axis))
 * 
 *     def mean(self, axis = None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the mean of the current
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_sum_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":875
 *             return sum_res / self.data.md().size()
 * 
 *     def max(self, axis = None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the maximum value of the
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_47max(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_46max[] = "\n        Returns an expression representing the maximum value of the\n        current expression.  If `axis` is None (default), it is the\n        maximum of every element in the expression; otherwise, it is\n        the maximum value along the particular axis (0 or 1).  If\n        ``X`` has shape ``(m, n)``, then ``X.max(0)`` has shape\n        ``(1,n)``.\n\n        `max()` can be used in constraints, the objective, or in\n        retriving values.  For example, the following are all valid::\n\n          m.constrain(X.max(axis = 1) <= 10)\n\n          m.minimize(X.max())\n\n          print m[X.max(axis = 0)]\n\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_47max(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_axis);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "max") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_axis = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("max", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_46max(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), __pyx_v_axis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_46max(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_axis) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max", 0);

  /* "pycpx/pyconcert.pyx":894
 * 
 *         """
 *         return newCPEFromExisting(self.model, newFromReduction(             # <<<<<<<<<<<<<<
 *             self.data[0],
 *             OP_R_MAX | (OP_SIMPLE_FLAG if self.is_simple else 0),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->model);
  __Pyx_INCREF(__pyx_t_1);

  /* "pycpx/pyconcert.pyx":896
 *         return newCPEFromExisting(self.model, newFromReduction(
 *             self.data[0],
 *             OP_R_MAX | (OP_SIMPLE_FLAG if self.is_simple else 0),             # <<<<<<<<<<<<<<
 *             -1 if axis is None else axis))
 * 
 */
  if ((__pyx_v_self->is_simple != 0)) {
    __pyx_t_2 = OP_SIMPLE_FLAG;
  } else {
    __pyx_t_2 = 0;
  }

  /* "pycpx/pyconcert.pyx":897
 *             self.data[0],
 *             OP_R_MAX | (OP_SIMPLE_FLAG if self.is_simple else 0),
 *             -1 if axis is None else axis))             # <<<<<<<<<<<<<<
 * 
 *     def min(self, axis = None):
 */
  __pyx_t_4 = (__pyx_v_axis == Py_None);
  if ((__pyx_t_4 != 0)) {
    __pyx_t_3 = -1;
  } else {
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_axis); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __pyx_t_5;
  }

  /* "pycpx/pyconcert.pyx":894
 * 
 *         """
 *         return newCPEFromExisting(self.model, newFromReduction(             # <<<<<<<<<<<<<<
 *             self.data[0],
 *             OP_R_MAX | (OP_SIMPLE_FLAG if self.is_simple else 0),
 */
  __pyx_t_6 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_1), newFromReduction((__pyx_v_self->data[0]), (OP_R_MAX | __pyx_t_2), __pyx_t_3))); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":875
 *             return sum_res / self.data.md().size()
 * 
 *     def max(self, axis = None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the maximum value of the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":899
 *             -1 if axis is None else axis))
 * 
 *     def min(self, axis = None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the minimum value of the
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_49min(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_48min[] = "\n        Returns an expression representing the minimum value of the\n        current expression.  If `axis` is None (default), it is the\n        minimum of every element in the expression; otherwise, it is\n        the minimum value along the particular axis (0 or 1).  If\n        ``X`` has shape ``(m, n)``, then ``X.min(0)`` has shape\n        ``(1,n)``.\n\n        `min()` can be used in constraints, the objective, or in\n        retriving values.  For example, the following are all valid::\n\n          m.constrain(X.min(axis = 1) <= 10)\n\n          m.minimize(X.min())\n\n          print m[X.min(axis = 0)]\n\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_49min(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_axis);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "min") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_axis = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("min", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_48min(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), __pyx_v_axis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_48min(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_axis) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min", 0);

  /* "pycpx/pyconcert.pyx":918
 * 
 *         """
 *         return newCPEFromExisting(self.model, newFromReduction(             # <<<<<<<<<<<<<<
 *             self.data[0],
 *             OP_R_MIN | (OP_SIMPLE_FLAG if self.is_simple else 0),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->model);
  __Pyx_INCREF(__pyx_t_1);

  /* "pycpx/pyconcert.pyx":920
 *         return newCPEFromExisting(self.model, newFromReduction(
 *             self.data[0],
 *             OP_R_MIN | (OP_SIMPLE_FLAG if self.is_simple else 0),             # <<<<<<<<<<<<<<
 *             -1 if axis is None else axis))
 * 
 */
  if ((__pyx_v_self->is_simple != 0)) {
    __pyx_t_2 = OP_SIMPLE_FLAG;
  } else {
    __pyx_t_2 = 0;
  }

  /* "pycpx/pyconcert.pyx":921
 *             self.data[0],
 *             OP_R_MIN | (OP_SIMPLE_FLAG if self.is_simple else 0),
 *             -1 if axis is None else axis))             # <<<<<<<<<<<<<<
 * 
 *     def __abs__(self):
 */
  __pyx_t_4 = (__pyx_v_axis == Py_None);
  if ((__pyx_t_4 != 0)) {
    __pyx_t_3 = -1;
  } else {
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_axis); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __pyx_t_5;
  }

  /* "pycpx/pyconcert.pyx":918
 * 
 *         """
 *         return newCPEFromExisting(self.model, newFromReduction(             # <<<<<<<<<<<<<<
 *             self.data[0],
 *             OP_R_MIN | (OP_SIMPLE_FLAG if self.is_simple else 0),
 */
  __pyx_t_6 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromExisting(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_1), newFromReduction((__pyx_v_self->data[0]), (OP_R_MIN | __pyx_t_2), __pyx_t_3))); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":899
 *             -1 if axis is None else axis))
 * 
 *     def min(self, axis = None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the minimum value of the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":923
 *             -1 if axis is None else axis))
 * 
 *     def __abs__(self):             # <<<<<<<<<<<<<<
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_ABS))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_51__abs__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_51__abs__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__abs__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_50__abs__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_50__abs__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__abs__", 0);

  /* "pycpx/pyconcert.pyx":924
 * 
 *     def __abs__(self):
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_ABS))             # <<<<<<<<<<<<<<
 * 
 *     def abs(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromCPEWithSameProperties(__pyx_v_self, newFromUnaryOp((__pyx_v_self->data[0]), OP_U_ABS))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":923
 *             -1 if axis is None else axis))
 * 
 *     def __abs__(self):             # <<<<<<<<<<<<<<
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_ABS))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__abs__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":926
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_ABS))
 * 
 *     def abs(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the absolute value,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_53abs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_52abs[] = "\n        Returns an expression representing the absolute value,\n        elementwise, of the current expression.  The returned value\n        has the same shape and properties as the current expression.\n\n        Can also be called simply using the ``abs()`` builtin function.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_53abs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("abs (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_52abs(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_52abs(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("abs", 0);

  /* "pycpx/pyconcert.pyx":935
 *         """
 * 
 *         return self.__abs__()             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_abs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":926
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_ABS))
 * 
 *     def abs(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an expression representing the absolute value,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.abs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":937
 *         return self.__abs__()
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a copy of the current expression.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_55copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_15CPlexExpression_54copy[] = "\n        Returns a copy of the current expression.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_55copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_54copy(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_54copy(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pycpx/pyconcert.pyx":942
 *         """
 * 
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_NO_TRANSLATE))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEFromCPEWithSameProperties(__pyx_v_self, newFromUnaryOp((__pyx_v_self->data[0]), OP_U_NO_TRANSLATE))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":937
 *         return self.__abs__()
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a copy of the current expression.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":944
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_NO_TRANSLATE))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.data.md().size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_57__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_57__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_56__len__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_56__len__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pycpx/pyconcert.pyx":945
 * 
 *     def __len__(self):
 *         return self.data.md().size()             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_r = __pyx_v_self->data->md().size();
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":944
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_NO_TRANSLATE))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.data.md().size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":947
 *         return self.data.md().size()
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_59__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_59__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_58__len__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_58__len__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pycpx/pyconcert.pyx":948
 * 
 *     def __len__(self):
 *         return self.size()             # <<<<<<<<<<<<<<
 * 
 *     def __pos__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":947
 *         return self.data.md().size()
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":950
 *         return self.size()
 * 
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_61__pos__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_61__pos__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pos__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_60__pos__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_60__pos__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pos__", 0);

  /* "pycpx/pyconcert.pyx":951
 * 
 *     def __pos__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":950
 *         return self.size()
 * 
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":953
 *         return self
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return self.copy()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_63__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_63__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_62__copy__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_62__copy__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "pycpx/pyconcert.pyx":954
 * 
 *     def __copy__(self):
 *         return self.copy()             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":953
 *         return self
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return self.copy()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":956
 *         return self.copy()
 * 
 *     def __deepcopy__(self):             # <<<<<<<<<<<<<<
 *         return self.copy()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_65__deepcopy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_65__deepcopy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_64__deepcopy__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_64__deepcopy__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "pycpx/pyconcert.pyx":957
 * 
 *     def __deepcopy__(self):
 *         return self.copy()             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":956
 *         return self.copy()
 * 
 *     def __deepcopy__(self):             # <<<<<<<<<<<<<<
 *         return self.copy()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":959
 *         return self.copy()
 * 
 *     def __call__(self, *args):             # <<<<<<<<<<<<<<
 *         if args:
 *             return self.model[self[args]]
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_67__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_67__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_66__call__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_66__call__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "pycpx/pyconcert.pyx":960
 * 
 *     def __call__(self, *args):
 *         if args:             # <<<<<<<<<<<<<<
 *             return self.model[self[args]]
 *         else:
 */
  __pyx_t_1 = (__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":961
 *     def __call__(self, *args):
 *         if args:
 *             return self.model[self[args]]             # <<<<<<<<<<<<<<
 *         else:
 *             return self.model[self]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_args); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self->model), __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":963
 *             return self.model[self[args]]
 *         else:
 *             return self.model[self]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self->model), ((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pycpx/pyconcert.pyx":959
 *         return self.copy()
 * 
 *     def __call__(self, *args):             # <<<<<<<<<<<<<<
 *         if args:
 *             return self.model[self[args]]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexExpression.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":595
 *     cdef object original_size
 *     cdef str key
 *     cdef readonly object __array_priority__             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_18__array_priority___1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_18__array_priority___1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexExpression_18__array_priority_____get__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_15CPlexExpression_18__array_priority_____get__(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->__array_priority__);
  __pyx_r = __pyx_v_self->__array_priority__;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":992
 * 
 * 
 * cdef inline ar toDoubleArray_1d(a, str name, long required_size):             # <<<<<<<<<<<<<<
 *     cdef ar a_1
 *     cdef size_t i
 */

static CYTHON_INLINE PyArrayObject *__pyx_f_5pycpx_9pyconcert_toDoubleArray_1d(PyObject *__pyx_v_a, PyObject *__pyx_v_name, long __pyx_v_required_size) {
  PyArrayObject *__pyx_v_a_1 = 0;
  size_t __pyx_v_i;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  size_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toDoubleArray_1d", 0);
  __Pyx_INCREF(__pyx_v_a);

  /* "pycpx/pyconcert.pyx":996
 *     cdef size_t i
 * 
 *     if issparse(a):             # <<<<<<<<<<<<<<
 *         a = a.todense()
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_a);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_a);
  __Pyx_GIVEREF(__pyx_v_a);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_5pycpx_9pyconcert_issparse, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "pycpx/pyconcert.pyx":997
 * 
 *     if issparse(a):
 *         a = a.todense()             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_a, __pyx_n_s_todense); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_a, __pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pycpx/pyconcert.pyx":999
 *         a = a.todense()
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         a_1 = asarray(a, dtype = float_)
 *     except ValueError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "pycpx/pyconcert.pyx":1000
 * 
 *     try:
 *         a_1 = asarray(a, dtype = float_)             # <<<<<<<<<<<<<<
 *     except ValueError:
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d."
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_a);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_a);
      __Pyx_GIVEREF(__pyx_v_a);
      __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_float); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __pyx_v_a_1 = ((PyArrayObject *)__pyx_t_8);
      __pyx_t_8 = 0;
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L11_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pycpx/pyconcert.pyx":1001
 *     try:
 *         a_1 = asarray(a, dtype = float_)
 *     except ValueError:             # <<<<<<<<<<<<<<
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d."
 *                         % (name, required_size))
 */
    __pyx_t_9 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("pycpx.pyconcert.toDoubleArray_1d", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "pycpx/pyconcert.pyx":1003
 *     except ValueError:
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d."
 *                         % (name, required_size))             # <<<<<<<<<<<<<<
 *     except TypeError:
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d."
 */
      __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_required_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_must_be_convertable_to_1d_num, __pyx_t_10); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "pycpx/pyconcert.pyx":1002
 *         a_1 = asarray(a, dtype = float_)
 *     except ValueError:
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d."             # <<<<<<<<<<<<<<
 *                         % (name, required_size))
 *     except TypeError:
 */
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L5_exception_handled;
    }

    /* "pycpx/pyconcert.pyx":1004
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d."
 *                         % (name, required_size))
 *     except TypeError:             # <<<<<<<<<<<<<<
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d."
 *                         % (name, required_size))
 */
    __pyx_t_9 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("pycpx.pyconcert.toDoubleArray_1d", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "pycpx/pyconcert.pyx":1006
 *     except TypeError:
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d."
 *                         % (name, required_size))             # <<<<<<<<<<<<<<
 * 
 *     if a_1.size == 0:
 */
      __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_required_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_must_be_convertable_to_1d_num, __pyx_t_10); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "pycpx/pyconcert.pyx":1005
 *                         % (name, required_size))
 *     except TypeError:
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d."             # <<<<<<<<<<<<<<
 *                         % (name, required_size))
 * 
 */
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L5_exception_handled;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L5_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    __pyx_L11_try_end:;
  }

  /* "pycpx/pyconcert.pyx":1008
 *                         % (name, required_size))
 * 
 *     if a_1.size == 0:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_a_1), __pyx_n_s_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_3) {

    /* "pycpx/pyconcert.pyx":1009
 * 
 *     if a_1.size == 0:
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     if a_1.ndim != 1:
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(Py_None);
    __pyx_r = ((PyArrayObject *)Py_None);
    goto __pyx_L0;
  }

  /* "pycpx/pyconcert.pyx":1011
 *         return None
 * 
 *     if a_1.ndim != 1:             # <<<<<<<<<<<<<<
 * 
 *         if a_1.ndim == 2 and (a_1.shape[0] == 1 or a_1.shape[1] == 1):
 */
  __pyx_t_3 = ((__pyx_v_a_1->nd != 1) != 0);
  if (__pyx_t_3) {

    /* "pycpx/pyconcert.pyx":1013
 *     if a_1.ndim != 1:
 * 
 *         if a_1.ndim == 2 and (a_1.shape[0] == 1 or a_1.shape[1] == 1):             # <<<<<<<<<<<<<<
 *             a_1 = a_1.ravel()
 *         else:
 */
    __pyx_t_3 = ((__pyx_v_a_1->nd == 2) != 0);
    if (__pyx_t_3) {
      __pyx_t_11 = (((__pyx_v_a_1->dimensions[0]) == 1) != 0);
      if (!__pyx_t_11) {
        __pyx_t_12 = (((__pyx_v_a_1->dimensions[1]) == 1) != 0);
        __pyx_t_13 = __pyx_t_12;
      } else {
        __pyx_t_13 = __pyx_t_11;
      }
      __pyx_t_11 = __pyx_t_13;
    } else {
      __pyx_t_11 = __pyx_t_3;
    }
    if (__pyx_t_11) {

      /* "pycpx/pyconcert.pyx":1014
 * 
 *         if a_1.ndim == 2 and (a_1.shape[0] == 1 or a_1.shape[1] == 1):
 *             a_1 = a_1.ravel()             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("`%s` must be convertable to 1d numpy array of length %d (shape = (%s) )."
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_a_1), __pyx_n_s_ravel); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF_SET(__pyx_v_a_1, ((PyArrayObject *)__pyx_t_8));
      __pyx_t_8 = 0;
      goto __pyx_L18;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":1017
 *         else:
 *             raise TypeError("`%s` must be convertable to 1d numpy array of length %d (shape = (%s) )."
 *                             % (name, required_size,             # <<<<<<<<<<<<<<
 *                                ', '.join(["%d" % a_1.shape[i] for i in range(a_1.ndim)])))
 * 
 */
      __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_required_size); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);

      /* "pycpx/pyconcert.pyx":1018
 *             raise TypeError("`%s` must be convertable to 1d numpy array of length %d (shape = (%s) )."
 *                             % (name, required_size,
 *                                ', '.join(["%d" % a_1.shape[i] for i in range(a_1.ndim)])))             # <<<<<<<<<<<<<<
 * 
 *     if a_1.shape[0] != required_size:
 */
      __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __pyx_v_a_1->nd;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_9; __pyx_t_14+=1) {
        __pyx_v_i = __pyx_t_14;
        __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_a_1->dimensions[__pyx_v_i])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_d, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s__9, __pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pycpx/pyconcert.pyx":1017
 *         else:
 *             raise TypeError("`%s` must be convertable to 1d numpy array of length %d (shape = (%s) )."
 *                             % (name, required_size,             # <<<<<<<<<<<<<<
 *                                ', '.join(["%d" % a_1.shape[i] for i in range(a_1.ndim)])))
 * 
 */
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_8 = 0;
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_must_be_convertable_to_1d_num_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pycpx/pyconcert.pyx":1016
 *             a_1 = a_1.ravel()
 *         else:
 *             raise TypeError("`%s` must be convertable to 1d numpy array of length %d (shape = (%s) )."             # <<<<<<<<<<<<<<
 *                             % (name, required_size,
 *                                ', '.join(["%d" % a_1.shape[i] for i in range(a_1.ndim)])))
 */
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L18:;
    goto __pyx_L17;
  }
  __pyx_L17:;

  /* "pycpx/pyconcert.pyx":1020
 *                                ', '.join(["%d" % a_1.shape[i] for i in range(a_1.ndim)])))
 * 
 *     if a_1.shape[0] != required_size:             # <<<<<<<<<<<<<<
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d (length = %d)."
 *                         % (name, required_size, a_1.shape[0]))
 */
  __pyx_t_11 = (((__pyx_v_a_1->dimensions[0]) != __pyx_v_required_size) != 0);
  if (__pyx_t_11) {

    /* "pycpx/pyconcert.pyx":1022
 *     if a_1.shape[0] != required_size:
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d (length = %d)."
 *                         % (name, required_size, a_1.shape[0]))             # <<<<<<<<<<<<<<
 * 
 *     return a_1
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_required_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_a_1->dimensions[0])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_1 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_must_be_convertable_to_1d_num_3, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pycpx/pyconcert.pyx":1021
 * 
 *     if a_1.shape[0] != required_size:
 *         raise TypeError("`%s` must be convertable to 1d numpy array of length %d (length = %d)."             # <<<<<<<<<<<<<<
 *                         % (name, required_size, a_1.shape[0]))
 * 
 */
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":1024
 *                         % (name, required_size, a_1.shape[0]))
 * 
 *     return a_1             # <<<<<<<<<<<<<<
 * 
 * cdef CPlexExpression newVariableBlock(CPlexModel model, size, var_type, lower_bound,
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_a_1));
  __pyx_r = __pyx_v_a_1;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":992
 * 
 * 
 * cdef inline ar toDoubleArray_1d(a, str name, long required_size):             # <<<<<<<<<<<<<<
 *     cdef ar a_1
 *     cdef size_t i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pycpx.pyconcert.toDoubleArray_1d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a_1);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1026
 *     return a_1
 * 
 * cdef CPlexExpression newVariableBlock(CPlexModel model, size, var_type, lower_bound,             # <<<<<<<<<<<<<<
 *                                       upper_bound, str name, str key):
 * 
 */

static struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_f_5pycpx_9pyconcert_newVariableBlock(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_model, PyObject *__pyx_v_size, PyObject *__pyx_v_var_type, PyObject *__pyx_v_lower_bound, PyObject *__pyx_v_upper_bound, PyObject *__pyx_v_name, PyObject *__pyx_v_key) {
  enum IloNumVar::Type __pyx_v_cpx_var_type;
  long __pyx_v_n;
  long __pyx_v_d_0;
  long __pyx_v_d_1;
  PyObject *__pyx_v_var_mode = NULL;
  int __pyx_v_var_type_n;
  long __pyx_v_i;
  double __pyx_v_d;
  PyArrayObject *__pyx_v_dv = 0;
  IloNumArray *__pyx_v_lb;
  PyArrayObject *__pyx_v_finite_elements = 0;
  PyArrayObject *__pyx_v_dv_r = NULL;
  IloNumArray *__pyx_v_ub;
  IloNumVarArray *__pyx_v_v;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_j = NULL;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_cpx = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dv;
  __Pyx_Buffer __pyx_pybuffer_dv;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_finite_elements;
  __Pyx_Buffer __pyx_pybuffer_finite_elements;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  double __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  char *__pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newVariableBlock", 0);
  __pyx_pybuffer_dv.pybuffer.buf = NULL;
  __pyx_pybuffer_dv.refcount = 0;
  __pyx_pybuffernd_dv.data = NULL;
  __pyx_pybuffernd_dv.rcbuffer = &__pyx_pybuffer_dv;
  __pyx_pybuffer_finite_elements.pybuffer.buf = NULL;
  __pyx_pybuffer_finite_elements.refcount = 0;
  __pyx_pybuffernd_finite_elements.data = NULL;
  __pyx_pybuffernd_finite_elements.rcbuffer = &__pyx_pybuffer_finite_elements;

  /* "pycpx/pyconcert.pyx":1036
 *     cdef long n, d_0, d_1
 * 
 *     if size == s_scalar:             # <<<<<<<<<<<<<<
 *         d_0 = d_1 = n = 1
 *         var_mode = "scalar"
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_size, __pyx_v_5pycpx_9pyconcert_s_scalar, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":1037
 * 
 *     if size == s_scalar:
 *         d_0 = d_1 = n = 1             # <<<<<<<<<<<<<<
 *         var_mode = "scalar"
 * 
 */
    __pyx_v_d_0 = 1;
    __pyx_v_d_1 = 1;
    __pyx_v_n = 1;

    /* "pycpx/pyconcert.pyx":1038
 *     if size == s_scalar:
 *         d_0 = d_1 = n = 1
 *         var_mode = "scalar"             # <<<<<<<<<<<<<<
 * 
 *     elif isscalar(size):
 */
    __Pyx_INCREF(__pyx_n_s_scalar);
    __pyx_v_var_mode = __pyx_n_s_scalar;
    goto __pyx_L3;
  }

  /* "pycpx/pyconcert.pyx":1040
 *         var_mode = "scalar"
 * 
 *     elif isscalar(size):             # <<<<<<<<<<<<<<
 *         d_0 = n = size
 *         d_1 = 1
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_isscalar); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_size);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_size);
  __Pyx_GIVEREF(__pyx_v_size);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":1041
 * 
 *     elif isscalar(size):
 *         d_0 = n = size             # <<<<<<<<<<<<<<
 *         d_1 = 1
 *         var_mode = "array"
 */
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_size); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_d_0 = __pyx_t_5;
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_size); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_n = __pyx_t_5;

    /* "pycpx/pyconcert.pyx":1042
 *     elif isscalar(size):
 *         d_0 = n = size
 *         d_1 = 1             # <<<<<<<<<<<<<<
 *         var_mode = "array"
 * 
 */
    __pyx_v_d_1 = 1;

    /* "pycpx/pyconcert.pyx":1043
 *         d_0 = n = size
 *         d_1 = 1
 *         var_mode = "array"             # <<<<<<<<<<<<<<
 * 
 *     elif type(size) is tuple and len(<tuple>size) == 1:
 */
    __Pyx_INCREF(__pyx_n_s_array);
    __pyx_v_var_mode = __pyx_n_s_array;
    goto __pyx_L3;
  }

  /* "pycpx/pyconcert.pyx":1045
 *         var_mode = "array"
 * 
 *     elif type(size) is tuple and len(<tuple>size) == 1:             # <<<<<<<<<<<<<<
 *         d_0 = n = (<tuple>size)[0]
 *         d_1 = 1
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_size)) == ((PyObject *)((PyObject*)(&PyTuple_Type))));
  if ((__pyx_t_1 != 0)) {
    if (unlikely(__pyx_v_size == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_size)); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = ((__pyx_t_6 == 1) != 0);
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = (__pyx_t_1 != 0);
  }
  if (__pyx_t_8) {

    /* "pycpx/pyconcert.pyx":1046
 * 
 *     elif type(size) is tuple and len(<tuple>size) == 1:
 *         d_0 = n = (<tuple>size)[0]             # <<<<<<<<<<<<<<
 *         d_1 = 1
 *         var_mode = "array"
 */
    if (unlikely(__pyx_v_size == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(((PyObject*)__pyx_v_size), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_d_0 = __pyx_t_5;
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_n = __pyx_t_5;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pycpx/pyconcert.pyx":1047
 *     elif type(size) is tuple and len(<tuple>size) == 1:
 *         d_0 = n = (<tuple>size)[0]
 *         d_1 = 1             # <<<<<<<<<<<<<<
 *         var_mode = "array"
 * 
 */
    __pyx_v_d_1 = 1;

    /* "pycpx/pyconcert.pyx":1048
 *         d_0 = n = (<tuple>size)[0]
 *         d_1 = 1
 *         var_mode = "array"             # <<<<<<<<<<<<<<
 * 
 *     elif type(size) is tuple and len(<tuple>size) == 2:
 */
    __Pyx_INCREF(__pyx_n_s_array);
    __pyx_v_var_mode = __pyx_n_s_array;
    goto __pyx_L3;
  }

  /* "pycpx/pyconcert.pyx":1050
 *         var_mode = "array"
 * 
 *     elif type(size) is tuple and len(<tuple>size) == 2:             # <<<<<<<<<<<<<<
 *         d_0 = (<tuple>size)[0]
 *         d_1 = (<tuple>size)[1]
 */
  __pyx_t_8 = (((PyObject *)Py_TYPE(__pyx_v_size)) == ((PyObject *)((PyObject*)(&PyTuple_Type))));
  if ((__pyx_t_8 != 0)) {
    if (unlikely(__pyx_v_size == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_size)); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = ((__pyx_t_6 == 2) != 0);
    __pyx_t_7 = __pyx_t_1;
  } else {
    __pyx_t_7 = (__pyx_t_8 != 0);
  }
  if (__pyx_t_7) {

    /* "pycpx/pyconcert.pyx":1051
 * 
 *     elif type(size) is tuple and len(<tuple>size) == 2:
 *         d_0 = (<tuple>size)[0]             # <<<<<<<<<<<<<<
 *         d_1 = (<tuple>size)[1]
 *         n = d_0 * d_1
 */
    if (unlikely(__pyx_v_size == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(((PyObject*)__pyx_v_size), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_d_0 = __pyx_t_5;

    /* "pycpx/pyconcert.pyx":1052
 *     elif type(size) is tuple and len(<tuple>size) == 2:
 *         d_0 = (<tuple>size)[0]
 *         d_1 = (<tuple>size)[1]             # <<<<<<<<<<<<<<
 *         n = d_0 * d_1
 *         var_mode = "matrix"
 */
    if (unlikely(__pyx_v_size == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(((PyObject*)__pyx_v_size), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_d_1 = __pyx_t_5;

    /* "pycpx/pyconcert.pyx":1053
 *         d_0 = (<tuple>size)[0]
 *         d_1 = (<tuple>size)[1]
 *         n = d_0 * d_1             # <<<<<<<<<<<<<<
 *         var_mode = "matrix"
 * 
 */
    __pyx_v_n = (__pyx_v_d_0 * __pyx_v_d_1);

    /* "pycpx/pyconcert.pyx":1054
 *         d_1 = (<tuple>size)[1]
 *         n = d_0 * d_1
 *         var_mode = "matrix"             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
    __Pyx_INCREF(__pyx_n_s_matrix);
    __pyx_v_var_mode = __pyx_n_s_matrix;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":1057
 * 
 *     else:
 *         raise ValueError("Size '%s' not understood." % str(size))             # <<<<<<<<<<<<<<
 * 
 *     cdef int var_type_n
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_size);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_size);
    __Pyx_GIVEREF(__pyx_v_size);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Size_s_not_understood, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pycpx/pyconcert.pyx":1064
 *     cdef ar[double] dv
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         var_type_n = _vartype_map[var_type.lower() if type(var_type) is str else var_type]
 *     except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    /*try:*/ {

      /* "pycpx/pyconcert.pyx":1065
 * 
 *     try:
 *         var_type_n = _vartype_map[var_type.lower() if type(var_type) is str else var_type]             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("Variable mode %s not recognized." % repr(var_type))
 */
      if (unlikely(__pyx_v_5pycpx_9pyconcert__vartype_map == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      }
      __pyx_t_7 = (((PyObject *)Py_TYPE(__pyx_v_var_type)) == ((PyObject *)((PyObject*)(&PyString_Type))));
      if ((__pyx_t_7 != 0)) {
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_var_type, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_4 = __pyx_t_2;
        __pyx_t_2 = 0;
      } else {
        __Pyx_INCREF(__pyx_v_var_type);
        __pyx_t_4 = __pyx_v_var_type;
      }
      __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_5pycpx_9pyconcert__vartype_map, __pyx_t_4); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L4_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_var_type_n = __pyx_t_12;
    }
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    goto __pyx_L11_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pycpx/pyconcert.pyx":1066
 *     try:
 *         var_type_n = _vartype_map[var_type.lower() if type(var_type) is str else var_type]
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("Variable mode %s not recognized." % repr(var_type))
 * 
 */
    __pyx_t_12 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("pycpx.pyconcert.newVariableBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_4, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_3);

      /* "pycpx/pyconcert.pyx":1067
 *         var_type_n = _vartype_map[var_type.lower() if type(var_type) is str else var_type]
 *     except KeyError:
 *         raise ValueError("Variable mode %s not recognized." % repr(var_type))             # <<<<<<<<<<<<<<
 * 
 *     if var_type_n == FLOAT_TYPE:
 */
      __pyx_t_13 = PyObject_Repr(__pyx_v_var_type); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = __Pyx_PyString_Format(__pyx_kp_s_Variable_mode_s_not_recognized, __pyx_t_13); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_13, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_Raise(__pyx_t_14, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L5_exception_handled;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L1_error;
    __pyx_L5_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    __pyx_L11_try_end:;
  }

  /* "pycpx/pyconcert.pyx":1073
 *     elif var_type_n == INT_TYPE:
 *         cpx_var_type = Int
 *     elif var_type_n == BOOL_TYPE:             # <<<<<<<<<<<<<<
 *         cpx_var_type = Bool
 *     else:
 */
  switch (__pyx_v_var_type_n) {

    /* "pycpx/pyconcert.pyx":1069
 *         raise ValueError("Variable mode %s not recognized." % repr(var_type))
 * 
 *     if var_type_n == FLOAT_TYPE:             # <<<<<<<<<<<<<<
 *         cpx_var_type = Float
 *     elif var_type_n == INT_TYPE:
 */
    case 0:

    /* "pycpx/pyconcert.pyx":1070
 * 
 *     if var_type_n == FLOAT_TYPE:
 *         cpx_var_type = Float             # <<<<<<<<<<<<<<
 *     elif var_type_n == INT_TYPE:
 *         cpx_var_type = Int
 */
    __pyx_v_cpx_var_type = IloNumVar::Float;
    break;

    /* "pycpx/pyconcert.pyx":1071
 *     if var_type_n == FLOAT_TYPE:
 *         cpx_var_type = Float
 *     elif var_type_n == INT_TYPE:             # <<<<<<<<<<<<<<
 *         cpx_var_type = Int
 *     elif var_type_n == BOOL_TYPE:
 */
    case 1:

    /* "pycpx/pyconcert.pyx":1072
 *         cpx_var_type = Float
 *     elif var_type_n == INT_TYPE:
 *         cpx_var_type = Int             # <<<<<<<<<<<<<<
 *     elif var_type_n == BOOL_TYPE:
 *         cpx_var_type = Bool
 */
    __pyx_v_cpx_var_type = IloNumVar::Int;
    break;

    /* "pycpx/pyconcert.pyx":1073
 *     elif var_type_n == INT_TYPE:
 *         cpx_var_type = Int
 *     elif var_type_n == BOOL_TYPE:             # <<<<<<<<<<<<<<
 *         cpx_var_type = Bool
 *     else:
 */
    case 2:

    /* "pycpx/pyconcert.pyx":1074
 *         cpx_var_type = Int
 *     elif var_type_n == BOOL_TYPE:
 *         cpx_var_type = Bool             # <<<<<<<<<<<<<<
 *     else:
 *         assert False
 */
    __pyx_v_cpx_var_type = IloNumVar::Bool;
    break;
    default:

    /* "pycpx/pyconcert.pyx":1076
 *         cpx_var_type = Bool
 *     else:
 *         assert False             # <<<<<<<<<<<<<<
 * 
 *     ########################################
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!0)) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif
    break;
  }

  /* "pycpx/pyconcert.pyx":1081
 *     # Now set the lower bounds
 * 
 *     cdef IloNumArray *lb = new IloNumArray(env, n)             # <<<<<<<<<<<<<<
 *     cdef ar[int_t, mode="c"] finite_elements = None
 * 
 */
  __pyx_v_lb = new IloNumArray(__pyx_v_5pycpx_9pyconcert_env, __pyx_v_n);

  /* "pycpx/pyconcert.pyx":1082
 * 
 *     cdef IloNumArray *lb = new IloNumArray(env, n)
 *     cdef ar[int_t, mode="c"] finite_elements = None             # <<<<<<<<<<<<<<
 * 
 *     if lower_bound is None:
 */
  __pyx_t_15 = ((PyArrayObject *)Py_None);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_finite_elements.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_finite_elements = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_finite_elements.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_finite_elements.diminfo[0].strides = __pyx_pybuffernd_finite_elements.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_finite_elements.diminfo[0].shape = __pyx_pybuffernd_finite_elements.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_15 = 0;
  __Pyx_INCREF(Py_None);
  __pyx_v_finite_elements = ((PyArrayObject *)Py_None);

  /* "pycpx/pyconcert.pyx":1084
 *     cdef ar[int_t, mode="c"] finite_elements = None
 * 
 *     if lower_bound is None:             # <<<<<<<<<<<<<<
 *         for 0 <= i < n:
 *             lb[0][i] = -IloInfinity
 */
  __pyx_t_7 = (__pyx_v_lower_bound == Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "pycpx/pyconcert.pyx":1085
 * 
 *     if lower_bound is None:
 *         for 0 <= i < n:             # <<<<<<<<<<<<<<
 *             lb[0][i] = -IloInfinity
 * 
 */
    __pyx_t_5 = __pyx_v_n;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

      /* "pycpx/pyconcert.pyx":1086
 *     if lower_bound is None:
 *         for 0 <= i < n:
 *             lb[0][i] = -IloInfinity             # <<<<<<<<<<<<<<
 * 
 *     elif isscalar(lower_bound):
 */
      ((__pyx_v_lb[0])[__pyx_v_i]) = (-IloInfinity);
    }
    goto __pyx_L14;
  }

  /* "pycpx/pyconcert.pyx":1088
 *             lb[0][i] = -IloInfinity
 * 
 *     elif isscalar(lower_bound):             # <<<<<<<<<<<<<<
 *         d = lower_bound
 *         for 0 <= i < n:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_isscalar); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_lower_bound);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_lower_bound);
  __Pyx_GIVEREF(__pyx_v_lower_bound);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {

    /* "pycpx/pyconcert.pyx":1089
 * 
 *     elif isscalar(lower_bound):
 *         d = lower_bound             # <<<<<<<<<<<<<<
 *         for 0 <= i < n:
 *             lb[0][i] = d
 */
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_lower_bound); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_d = __pyx_t_16;

    /* "pycpx/pyconcert.pyx":1090
 *     elif isscalar(lower_bound):
 *         d = lower_bound
 *         for 0 <= i < n:             # <<<<<<<<<<<<<<
 *             lb[0][i] = d
 * 
 */
    __pyx_t_5 = __pyx_v_n;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

      /* "pycpx/pyconcert.pyx":1091
 *         d = lower_bound
 *         for 0 <= i < n:
 *             lb[0][i] = d             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
      ((__pyx_v_lb[0])[__pyx_v_i]) = __pyx_v_d;
    }
    goto __pyx_L14;
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":1094
 * 
 *     else:
 *         dv_r = toDoubleArray_1d(lower_bound, "lower_bound", n)             # <<<<<<<<<<<<<<
 * 
 *         if dv_r is None:
 */
    __pyx_t_2 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_toDoubleArray_1d(__pyx_v_lower_bound, __pyx_n_s_lower_bound, __pyx_v_n)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_dv_r = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pycpx/pyconcert.pyx":1096
 *         dv_r = toDoubleArray_1d(lower_bound, "lower_bound", n)
 * 
 *         if dv_r is None:             # <<<<<<<<<<<<<<
 *             for 0 <= i < n:
 *                 lb[0][i] = -IloInfinity
 */
    __pyx_t_8 = (((PyObject *)__pyx_v_dv_r) == Py_None);
    __pyx_t_7 = (__pyx_t_8 != 0);
    if (__pyx_t_7) {

      /* "pycpx/pyconcert.pyx":1097
 * 
 *         if dv_r is None:
 *             for 0 <= i < n:             # <<<<<<<<<<<<<<
 *                 lb[0][i] = -IloInfinity
 *         else:
 */
      __pyx_t_5 = __pyx_v_n;
      for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

        /* "pycpx/pyconcert.pyx":1098
 *         if dv_r is None:
 *             for 0 <= i < n:
 *                 lb[0][i] = -IloInfinity             # <<<<<<<<<<<<<<
 *         else:
 *             dv = dv_r
 */
        ((__pyx_v_lb[0])[__pyx_v_i]) = (-IloInfinity);
      }
      goto __pyx_L19;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":1100
 *                 lb[0][i] = -IloInfinity
 *         else:
 *             dv = dv_r             # <<<<<<<<<<<<<<
 * 
 *             finite_elements = empty(n, int_)
 */
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dv.rcbuffer->pybuffer);
        __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dv.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_v_dv_r), &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_12 < 0)) {
          PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dv.rcbuffer->pybuffer, (PyObject*)__pyx_v_dv, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
          }
        }
        __pyx_pybuffernd_dv.diminfo[0].strides = __pyx_pybuffernd_dv.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dv.diminfo[0].shape = __pyx_pybuffernd_dv.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_dv_r));
      __pyx_v_dv = ((PyArrayObject *)__pyx_v_dv_r);

      /* "pycpx/pyconcert.pyx":1102
 *             dv = dv_r
 * 
 *             finite_elements = empty(n, int_)             # <<<<<<<<<<<<<<
 *             isfinite(dv_r, finite_elements)
 * 
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_n); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_15 = ((PyArrayObject *)__pyx_t_3);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_finite_elements.rcbuffer->pybuffer);
        __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_finite_elements.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_12 < 0)) {
          PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_finite_elements.rcbuffer->pybuffer, (PyObject*)__pyx_v_finite_elements, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
          }
        }
        __pyx_pybuffernd_finite_elements.diminfo[0].strides = __pyx_pybuffernd_finite_elements.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_finite_elements.diminfo[0].shape = __pyx_pybuffernd_finite_elements.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_15 = 0;
      __Pyx_DECREF_SET(__pyx_v_finite_elements, ((PyArrayObject *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "pycpx/pyconcert.pyx":1103
 * 
 *             finite_elements = empty(n, int_)
 *             isfinite(dv_r, finite_elements)             # <<<<<<<<<<<<<<
 * 
 *             for 0 <= i < n:
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_isfinite); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(((PyObject *)__pyx_v_dv_r));
      PyTuple_SET_ITEM(__pyx_t_14, 0, ((PyObject *)__pyx_v_dv_r));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_dv_r));
      __Pyx_INCREF(((PyObject *)__pyx_v_finite_elements));
      PyTuple_SET_ITEM(__pyx_t_14, 1, ((PyObject *)__pyx_v_finite_elements));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_finite_elements));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pycpx/pyconcert.pyx":1105
 *             isfinite(dv_r, finite_elements)
 * 
 *             for 0 <= i < n:             # <<<<<<<<<<<<<<
 *                 lb[0][i] = dv[i] if finite_elements[i] else -IloInfinity
 * 
 */
      __pyx_t_5 = __pyx_v_n;
      for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

        /* "pycpx/pyconcert.pyx":1106
 * 
 *             for 0 <= i < n:
 *                 lb[0][i] = dv[i] if finite_elements[i] else -IloInfinity             # <<<<<<<<<<<<<<
 * 
 *     ########################################
 */
        __pyx_t_17 = __pyx_v_i;
        __pyx_t_12 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_pybuffernd_finite_elements.diminfo[0].shape;
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_finite_elements.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        if (((*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_finite_elements.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_finite_elements.diminfo[0].strides)) != 0)) {
          __pyx_t_18 = __pyx_v_i;
          __pyx_t_12 = -1;
          if (__pyx_t_18 < 0) {
            __pyx_t_18 += __pyx_pybuffernd_dv.diminfo[0].shape;
            if (unlikely(__pyx_t_18 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_dv.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_16 = (*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_dv.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_dv.diminfo[0].strides));
        } else {
          __pyx_t_16 = (-IloInfinity);
        }
        ((__pyx_v_lb[0])[__pyx_v_i]) = __pyx_t_16;
      }
    }
    __pyx_L19:;
  }
  __pyx_L14:;

  /* "pycpx/pyconcert.pyx":1111
 *     # Now set the upper bounds
 * 
 *     cdef IloNumArray *ub = new IloNumArray(env, n)             # <<<<<<<<<<<<<<
 * 
 *     if upper_bound is None:
 */
  __pyx_v_ub = new IloNumArray(__pyx_v_5pycpx_9pyconcert_env, __pyx_v_n);

  /* "pycpx/pyconcert.pyx":1113
 *     cdef IloNumArray *ub = new IloNumArray(env, n)
 * 
 *     if upper_bound is None:             # <<<<<<<<<<<<<<
 *         for 0 <= i < n:
 *             ub[0][i] = IloInfinity
 */
  __pyx_t_7 = (__pyx_v_upper_bound == Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "pycpx/pyconcert.pyx":1114
 * 
 *     if upper_bound is None:
 *         for 0 <= i < n:             # <<<<<<<<<<<<<<
 *             ub[0][i] = IloInfinity
 * 
 */
    __pyx_t_5 = __pyx_v_n;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

      /* "pycpx/pyconcert.pyx":1115
 *     if upper_bound is None:
 *         for 0 <= i < n:
 *             ub[0][i] = IloInfinity             # <<<<<<<<<<<<<<
 * 
 *     elif isscalar(upper_bound):
 */
      ((__pyx_v_ub[0])[__pyx_v_i]) = IloInfinity;
    }
    goto __pyx_L24;
  }

  /* "pycpx/pyconcert.pyx":1117
 *             ub[0][i] = IloInfinity
 * 
 *     elif isscalar(upper_bound):             # <<<<<<<<<<<<<<
 *         d = upper_bound
 *         for 0 <= i < n:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_isscalar); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_v_upper_bound);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_upper_bound);
  __Pyx_GIVEREF(__pyx_v_upper_bound);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_8) {

    /* "pycpx/pyconcert.pyx":1118
 * 
 *     elif isscalar(upper_bound):
 *         d = upper_bound             # <<<<<<<<<<<<<<
 *         for 0 <= i < n:
 *             ub[0][i] = d
 */
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_upper_bound); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_d = __pyx_t_16;

    /* "pycpx/pyconcert.pyx":1119
 *     elif isscalar(upper_bound):
 *         d = upper_bound
 *         for 0 <= i < n:             # <<<<<<<<<<<<<<
 *             ub[0][i] = d
 * 
 */
    __pyx_t_5 = __pyx_v_n;
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

      /* "pycpx/pyconcert.pyx":1120
 *         d = upper_bound
 *         for 0 <= i < n:
 *             ub[0][i] = d             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
      ((__pyx_v_ub[0])[__pyx_v_i]) = __pyx_v_d;
    }
    goto __pyx_L24;
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":1123
 * 
 *     else:
 *         dv_r = toDoubleArray_1d(upper_bound, "upper_bound", n)             # <<<<<<<<<<<<<<
 * 
 *         if dv_r is None:
 */
    __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_toDoubleArray_1d(__pyx_v_upper_bound, __pyx_n_s_upper_bound, __pyx_v_n)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_dv_r, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pycpx/pyconcert.pyx":1125
 *         dv_r = toDoubleArray_1d(upper_bound, "upper_bound", n)
 * 
 *         if dv_r is None:             # <<<<<<<<<<<<<<
 *             for 0 <= i < n:
 *                 ub[0][i] = IloInfinity
 */
    __pyx_t_8 = (((PyObject *)__pyx_v_dv_r) == Py_None);
    __pyx_t_7 = (__pyx_t_8 != 0);
    if (__pyx_t_7) {

      /* "pycpx/pyconcert.pyx":1126
 * 
 *         if dv_r is None:
 *             for 0 <= i < n:             # <<<<<<<<<<<<<<
 *                 ub[0][i] = IloInfinity
 *         else:
 */
      __pyx_t_5 = __pyx_v_n;
      for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

        /* "pycpx/pyconcert.pyx":1127
 *         if dv_r is None:
 *             for 0 <= i < n:
 *                 ub[0][i] = IloInfinity             # <<<<<<<<<<<<<<
 *         else:
 *             dv = dv_r
 */
        ((__pyx_v_ub[0])[__pyx_v_i]) = IloInfinity;
      }
      goto __pyx_L29;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":1129
 *                 ub[0][i] = IloInfinity
 *         else:
 *             dv = dv_r             # <<<<<<<<<<<<<<
 * 
 *             if finite_elements is None:
 */
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dv.rcbuffer->pybuffer);
        __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dv.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_v_dv_r), &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_12 < 0)) {
          PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dv.rcbuffer->pybuffer, (PyObject*)__pyx_v_dv, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
          }
        }
        __pyx_pybuffernd_dv.diminfo[0].strides = __pyx_pybuffernd_dv.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dv.diminfo[0].shape = __pyx_pybuffernd_dv.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_dv_r));
      __Pyx_XDECREF_SET(__pyx_v_dv, ((PyArrayObject *)__pyx_v_dv_r));

      /* "pycpx/pyconcert.pyx":1131
 *             dv = dv_r
 * 
 *             if finite_elements is None:             # <<<<<<<<<<<<<<
 *                 finite_elements = empty(n, int_)
 * 
 */
      __pyx_t_7 = (((PyObject *)__pyx_v_finite_elements) == Py_None);
      __pyx_t_8 = (__pyx_t_7 != 0);
      if (__pyx_t_8) {

        /* "pycpx/pyconcert.pyx":1132
 * 
 *             if finite_elements is None:
 *                 finite_elements = empty(n, int_)             # <<<<<<<<<<<<<<
 * 
 *             isfinite(dv_r, finite_elements)
 */
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_14 = __Pyx_PyInt_From_long(__pyx_v_n); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_14 = 0;
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_15 = ((PyArrayObject *)__pyx_t_2);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_finite_elements.rcbuffer->pybuffer);
          __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_finite_elements.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_12 < 0)) {
            PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_finite_elements.rcbuffer->pybuffer, (PyObject*)__pyx_v_finite_elements, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
            }
          }
          __pyx_pybuffernd_finite_elements.diminfo[0].strides = __pyx_pybuffernd_finite_elements.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_finite_elements.diminfo[0].shape = __pyx_pybuffernd_finite_elements.rcbuffer->pybuffer.shape[0];
          if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_15 = 0;
        __Pyx_DECREF_SET(__pyx_v_finite_elements, ((PyArrayObject *)__pyx_t_2));
        __pyx_t_2 = 0;
        goto __pyx_L32;
      }
      __pyx_L32:;

      /* "pycpx/pyconcert.pyx":1134
 *                 finite_elements = empty(n, int_)
 * 
 *             isfinite(dv_r, finite_elements)             # <<<<<<<<<<<<<<
 * 
 *             for 0 <= i < n:
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_isfinite); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(((PyObject *)__pyx_v_dv_r));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_dv_r));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_dv_r));
      __Pyx_INCREF(((PyObject *)__pyx_v_finite_elements));
      PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_finite_elements));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_finite_elements));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pycpx/pyconcert.pyx":1136
 *             isfinite(dv_r, finite_elements)
 * 
 *             for 0 <= i < n:             # <<<<<<<<<<<<<<
 *                 ub[0][i] = dv[i] if finite_elements[i] else IloInfinity
 * 
 */
      __pyx_t_5 = __pyx_v_n;
      for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

        /* "pycpx/pyconcert.pyx":1137
 * 
 *             for 0 <= i < n:
 *                 ub[0][i] = dv[i] if finite_elements[i] else IloInfinity             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_19 = __pyx_v_i;
        __pyx_t_12 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_finite_elements.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_finite_elements.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        if (((*__Pyx_BufPtrCContig1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_finite_elements.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_finite_elements.diminfo[0].strides)) != 0)) {
          __pyx_t_20 = __pyx_v_i;
          __pyx_t_12 = -1;
          if (__pyx_t_20 < 0) {
            __pyx_t_20 += __pyx_pybuffernd_dv.diminfo[0].shape;
            if (unlikely(__pyx_t_20 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_dv.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_16 = (*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_dv.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_dv.diminfo[0].strides));
        } else {
          __pyx_t_16 = IloInfinity;
        }
        ((__pyx_v_ub[0])[__pyx_v_i]) = __pyx_t_16;
      }
    }
    __pyx_L29:;
  }
  __pyx_L24:;

  /* "pycpx/pyconcert.pyx":1142
 *     ########################################
 *     # Now get the variables
 *     cdef IloNumVarArray* v = new IloNumVarArray(env, lb[0], ub[0], cpx_var_type)             # <<<<<<<<<<<<<<
 * 
 *     del lb
 */
  __pyx_v_v = new IloNumVarArray(__pyx_v_5pycpx_9pyconcert_env, (__pyx_v_lb[0]), (__pyx_v_ub[0]), __pyx_v_cpx_var_type);

  /* "pycpx/pyconcert.pyx":1144
 *     cdef IloNumVarArray* v = new IloNumVarArray(env, lb[0], ub[0], cpx_var_type)
 * 
 *     del lb             # <<<<<<<<<<<<<<
 *     del ub
 * 
 */
  delete __pyx_v_lb;

  /* "pycpx/pyconcert.pyx":1145
 * 
 *     del lb
 *     del ub             # <<<<<<<<<<<<<<
 * 
 *     ############################################################
 */
  delete __pyx_v_ub;

  /* "pycpx/pyconcert.pyx":1150
 *     # Set names if applicable
 * 
 *     if name is not None:             # <<<<<<<<<<<<<<
 * 
 *         if n == 1:
 */
  __pyx_t_8 = (__pyx_v_name != ((PyObject*)Py_None));
  __pyx_t_7 = (__pyx_t_8 != 0);
  if (__pyx_t_7) {

    /* "pycpx/pyconcert.pyx":1152
 *     if name is not None:
 * 
 *         if n == 1:             # <<<<<<<<<<<<<<
 *             s = bytes(name)
 *             v[0][0].setName(s)
 */
    __pyx_t_7 = ((__pyx_v_n == 1) != 0);
    if (__pyx_t_7) {

      /* "pycpx/pyconcert.pyx":1153
 * 
 *         if n == 1:
 *             s = bytes(name)             # <<<<<<<<<<<<<<
 *             v[0][0].setName(s)
 * 
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyBytes_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_s = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "pycpx/pyconcert.pyx":1154
 *         if n == 1:
 *             s = bytes(name)
 *             v[0][0].setName(s)             # <<<<<<<<<<<<<<
 * 
 *         elif var_mode == "array":
 */
      __pyx_t_21 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_21) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((__pyx_v_v[0])[0]).setName(__pyx_t_21);
      goto __pyx_L36;
    }

    /* "pycpx/pyconcert.pyx":1156
 *             v[0][0].setName(s)
 * 
 *         elif var_mode == "array":             # <<<<<<<<<<<<<<
 *             for 0 <= i < d_0:
 *                 for 0 <= j < d_1:
 */
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_var_mode, __pyx_n_s_array, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_7) {

      /* "pycpx/pyconcert.pyx":1157
 * 
 *         elif var_mode == "array":
 *             for 0 <= i < d_0:             # <<<<<<<<<<<<<<
 *                 for 0 <= j < d_1:
 *                     s = bytes("%s[%d]" % (name, i*d_1 + j))
 */
      __pyx_t_5 = __pyx_v_d_0;
      for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

        /* "pycpx/pyconcert.pyx":1158
 *         elif var_mode == "array":
 *             for 0 <= i < d_0:
 *                 for 0 <= j < d_1:             # <<<<<<<<<<<<<<
 *                     s = bytes("%s[%d]" % (name, i*d_1 + j))
 *                     v[0][i*d_1 + j].setName(s)
 */
        __pyx_t_22 = __pyx_v_d_1;
        for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23++) {
          __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_23); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "pycpx/pyconcert.pyx":1159
 *             for 0 <= i < d_0:
 *                 for 0 <= j < d_1:
 *                     s = bytes("%s[%d]" % (name, i*d_1 + j))             # <<<<<<<<<<<<<<
 *                     v[0][i*d_1 + j].setName(s)
 *         else:
 */
          __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_i * __pyx_v_d_1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_v_j); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_v_name);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
          __Pyx_GIVEREF(__pyx_v_name);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_d, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyBytes_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_3));
          __pyx_t_3 = 0;

          /* "pycpx/pyconcert.pyx":1160
 *                 for 0 <= j < d_1:
 *                     s = bytes("%s[%d]" % (name, i*d_1 + j))
 *                     v[0][i*d_1 + j].setName(s)             # <<<<<<<<<<<<<<
 *         else:
 *             for 0 <= i < d_0:
 */
          __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_i * __pyx_v_d_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_j); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_24 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_24 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_21 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_21) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          ((__pyx_v_v[0])[__pyx_t_24]).setName(__pyx_t_21);
          __pyx_t_23 = __Pyx_PyInt_As_long(__pyx_v_j); if (unlikely((__pyx_t_23 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "pycpx/pyconcert.pyx":1158
 *         elif var_mode == "array":
 *             for 0 <= i < d_0:
 *                 for 0 <= j < d_1:             # <<<<<<<<<<<<<<
 *                     s = bytes("%s[%d]" % (name, i*d_1 + j))
 *                     v[0][i*d_1 + j].setName(s)
 */
        __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_23); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_4);
        __pyx_t_4 = 0;
      }
      goto __pyx_L36;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":1162
 *                     v[0][i*d_1 + j].setName(s)
 *         else:
 *             for 0 <= i < d_0:             # <<<<<<<<<<<<<<
 *                 for 0 <= j < d_1:
 *                     s = bytes("%s[%d,%d]" % (name, i,j))
 */
      __pyx_t_5 = __pyx_v_d_0;
      for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

        /* "pycpx/pyconcert.pyx":1163
 *         else:
 *             for 0 <= i < d_0:
 *                 for 0 <= j < d_1:             # <<<<<<<<<<<<<<
 *                     s = bytes("%s[%d,%d]" % (name, i,j))
 *                     v[0][i*d_1 + j].setName(s)
 */
        __pyx_t_23 = __pyx_v_d_1;
        for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_23; __pyx_t_22++) {
          __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_22); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "pycpx/pyconcert.pyx":1164
 *             for 0 <= i < d_0:
 *                 for 0 <= j < d_1:
 *                     s = bytes("%s[%d,%d]" % (name, i,j))             # <<<<<<<<<<<<<<
 *                     v[0][i*d_1 + j].setName(s)
 * 
 */
          __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_v_name);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_name);
          __Pyx_GIVEREF(__pyx_v_name);
          PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_v_j);
          PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_j);
          __Pyx_GIVEREF(__pyx_v_j);
          __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_s_d_d, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyBytes_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_4));
          __pyx_t_4 = 0;

          /* "pycpx/pyconcert.pyx":1165
 *                 for 0 <= j < d_1:
 *                     s = bytes("%s[%d,%d]" % (name, i,j))
 *                     v[0][i*d_1 + j].setName(s)             # <<<<<<<<<<<<<<
 * 
 *     ############################################################
 */
          __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_i * __pyx_v_d_1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_v_j); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_24 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_24 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_21 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_21) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          ((__pyx_v_v[0])[__pyx_t_24]).setName(__pyx_t_21);
          __pyx_t_22 = __Pyx_PyInt_As_long(__pyx_v_j); if (unlikely((__pyx_t_22 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "pycpx/pyconcert.pyx":1163
 *         else:
 *             for 0 <= i < d_0:
 *                 for 0 <= j < d_1:             # <<<<<<<<<<<<<<
 *                     s = bytes("%s[%d,%d]" % (name, i,j))
 *                     v[0][i*d_1 + j].setName(s)
 */
        __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_22); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
        __pyx_t_3 = 0;
      }
    }
    __pyx_L36:;
    goto __pyx_L35;
  }
  __pyx_L35:;

  /* "pycpx/pyconcert.pyx":1171
 *     # of the new variable set.
 * 
 *     cdef CPlexExpression cpx = newCPEwithVariables(model, MetaData(MATRIX_MODE, d_0, d_1), v)             # <<<<<<<<<<<<<<
 * 
 *     for 0 <= i < d_0:
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPEwithVariables(__pyx_v_model, MetaData(MATRIX_MODE, __pyx_v_d_0, __pyx_v_d_1), __pyx_v_v)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_cpx = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pycpx/pyconcert.pyx":1173
 *     cdef CPlexExpression cpx = newCPEwithVariables(model, MetaData(MATRIX_MODE, d_0, d_1), v)
 * 
 *     for 0 <= i < d_0:             # <<<<<<<<<<<<<<
 *         for 0 <= j < d_1:
 *             cpx.data.set(i, j, v[0][i*d_1 + j])
 */
  __pyx_t_5 = __pyx_v_d_0;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_5; __pyx_v_i++) {

    /* "pycpx/pyconcert.pyx":1174
 * 
 *     for 0 <= i < d_0:
 *         for 0 <= j < d_1:             # <<<<<<<<<<<<<<
 *             cpx.data.set(i, j, v[0][i*d_1 + j])
 * 
 */
    __pyx_t_22 = __pyx_v_d_1;
    for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23++) {
      __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_23); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycpx/pyconcert.pyx":1175
 *     for 0 <= i < d_0:
 *         for 0 <= j < d_1:
 *             cpx.data.set(i, j, v[0][i*d_1 + j])             # <<<<<<<<<<<<<<
 * 
 *     cpx.original_size = size
 */
      __pyx_t_24 = __Pyx_PyInt_As_long(__pyx_v_j); if (unlikely((__pyx_t_24 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_i * __pyx_v_d_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_j); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_25 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_25 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_cpx->data->set(__pyx_v_i, __pyx_t_24, ((__pyx_v_v[0])[__pyx_t_25]));
      __pyx_t_23 = __Pyx_PyInt_As_long(__pyx_v_j); if (unlikely((__pyx_t_23 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pycpx/pyconcert.pyx":1174
 * 
 *     for 0 <= i < d_0:
 *         for 0 <= j < d_1:             # <<<<<<<<<<<<<<
 *             cpx.data.set(i, j, v[0][i*d_1 + j])
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_23); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_4);
    __pyx_t_4 = 0;
  }

  /* "pycpx/pyconcert.pyx":1177
 *             cpx.data.set(i, j, v[0][i*d_1 + j])
 * 
 *     cpx.original_size = size             # <<<<<<<<<<<<<<
 *     cpx.key = key
 * 
 */
  __Pyx_INCREF(__pyx_v_size);
  __Pyx_GIVEREF(__pyx_v_size);
  __Pyx_GOTREF(__pyx_v_cpx->original_size);
  __Pyx_DECREF(__pyx_v_cpx->original_size);
  __pyx_v_cpx->original_size = __pyx_v_size;

  /* "pycpx/pyconcert.pyx":1178
 * 
 *     cpx.original_size = size
 *     cpx.key = key             # <<<<<<<<<<<<<<
 * 
 *     return cpx
 */
  __Pyx_INCREF(__pyx_v_key);
  __Pyx_GIVEREF(__pyx_v_key);
  __Pyx_GOTREF(__pyx_v_cpx->key);
  __Pyx_DECREF(__pyx_v_cpx->key);
  __pyx_v_cpx->key = __pyx_v_key;

  /* "pycpx/pyconcert.pyx":1180
 *     cpx.key = key
 * 
 *     return cpx             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_cpx));
  __pyx_r = __pyx_v_cpx;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":1026
 *     return a_1
 * 
 * cdef CPlexExpression newVariableBlock(CPlexModel model, size, var_type, lower_bound,             # <<<<<<<<<<<<<<
 *                                       upper_bound, str name, str key):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dv.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_finite_elements.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pycpx.pyconcert.newVariableBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dv.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_finite_elements.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_var_mode);
  __Pyx_XDECREF((PyObject *)__pyx_v_dv);
  __Pyx_XDECREF((PyObject *)__pyx_v_finite_elements);
  __Pyx_XDECREF((PyObject *)__pyx_v_dv_r);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF((PyObject *)__pyx_v_cpx);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1192
 *     cdef CPlexConstraint hooked_constraint
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise Exception("Class CPlexConstraint not meant to be instantiated directly.")
 * 
 */

/* Python wrapper */
static int __pyx_pw_5pycpx_9pyconcert_15CPlexConstraint_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pycpx_9pyconcert_15CPlexConstraint_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexConstraint___init__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pycpx_9pyconcert_15CPlexConstraint___init__(CYTHON_UNUSED struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pycpx/pyconcert.pyx":1193
 * 
 *     def __init__(self):
 *         raise Exception("Class CPlexConstraint not meant to be instantiated directly.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pycpx/pyconcert.pyx":1192
 *     cdef CPlexConstraint hooked_constraint
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise Exception("Class CPlexConstraint not meant to be instantiated directly.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexConstraint.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1195
 *         raise Exception("Class CPlexConstraint not meant to be instantiated directly.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.data
 * 
 */

/* Python wrapper */
static void __pyx_pw_5pycpx_9pyconcert_15CPlexConstraint_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pycpx_9pyconcert_15CPlexConstraint_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pycpx_9pyconcert_15CPlexConstraint_2__dealloc__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pycpx_9pyconcert_15CPlexConstraint_2__dealloc__(struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pycpx/pyconcert.pyx":1196
 * 
 *     def __dealloc__(self):
 *         del self.data             # <<<<<<<<<<<<<<
 * 
 *     def __nonzero__(self):
 */
  delete __pyx_v_self->data;

  /* "pycpx/pyconcert.pyx":1195
 *         raise Exception("Class CPlexConstraint not meant to be instantiated directly.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.data
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pycpx/pyconcert.pyx":1198
 *         del self.data
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         self.model.hook_id_1         = self.id_right
 *         self.model.hook_id_2         = self.id_left
 */

/* Python wrapper */
static int __pyx_pw_5pycpx_9pyconcert_15CPlexConstraint_5__nonzero__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5pycpx_9pyconcert_15CPlexConstraint_5__nonzero__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__nonzero__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_15CPlexConstraint_4__nonzero__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pycpx_9pyconcert_15CPlexConstraint_4__nonzero__(struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__nonzero__", 0);

  /* "pycpx/pyconcert.pyx":1199
 * 
 *     def __nonzero__(self):
 *         self.model.hook_id_1         = self.id_right             # <<<<<<<<<<<<<<
 *         self.model.hook_id_2         = self.id_left
 *         self.model.hooked_constraint = self
 */
  __pyx_t_1 = __pyx_v_self->id_right;
  __pyx_v_self->model->hook_id_1 = __pyx_t_1;

  /* "pycpx/pyconcert.pyx":1200
 *     def __nonzero__(self):
 *         self.model.hook_id_1         = self.id_right
 *         self.model.hook_id_2         = self.id_left             # <<<<<<<<<<<<<<
 *         self.model.hooked_constraint = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->id_left;
  __pyx_v_self->model->hook_id_2 = __pyx_t_1;

  /* "pycpx/pyconcert.pyx":1201
 *         self.model.hook_id_1         = self.id_right
 *         self.model.hook_id_2         = self.id_left
 *         self.model.hooked_constraint = self             # <<<<<<<<<<<<<<
 * 
 *         return True
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_self->model->hooked_constraint);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->model->hooked_constraint));
  __pyx_v_self->model->hooked_constraint = __pyx_v_self;

  /* "pycpx/pyconcert.pyx":1203
 *         self.model.hooked_constraint = self
 * 
 *         return True             # <<<<<<<<<<<<<<
 * 
 * ############################################################
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":1198
 *         del self.data
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         self.model.hook_id_1         = self.id_right
 *         self.model.hook_id_2         = self.id_left
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1211
 *     CPlexConstraint createBlankCPlexConstraint "PY_NEW" (object t)
 * 
 * cdef inline CPlexConstraint newCPC(CPlexModel model, MetaData md, left, right):             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexConstraint c = createBlankCPlexConstraint(CPlexConstraint)
 */

static CYTHON_INLINE struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_newCPC(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_model, MetaData __pyx_v_md, PyObject *__pyx_v_left, PyObject *__pyx_v_right) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_c = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newCPC", 0);

  /* "pycpx/pyconcert.pyx":1213
 * cdef inline CPlexConstraint newCPC(CPlexModel model, MetaData md, left, right):
 * 
 *     cdef CPlexConstraint c = createBlankCPlexConstraint(CPlexConstraint)             # <<<<<<<<<<<<<<
 * 
 *     c.model               = model
 */
  __pyx_t_1 = ((PyObject *)PY_NEW(((PyObject *)((PyObject*)__pyx_ptype_5pycpx_9pyconcert_CPlexConstraint)))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1215
 *     cdef CPlexConstraint c = createBlankCPlexConstraint(CPlexConstraint)
 * 
 *     c.model               = model             # <<<<<<<<<<<<<<
 *     c.data                = new ConstraintArray(env, md)
 *     c.id_right            = id(right)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_model));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_model));
  __Pyx_GOTREF(__pyx_v_c->model);
  __Pyx_DECREF(((PyObject *)__pyx_v_c->model));
  __pyx_v_c->model = __pyx_v_model;

  /* "pycpx/pyconcert.pyx":1216
 * 
 *     c.model               = model
 *     c.data                = new ConstraintArray(env, md)             # <<<<<<<<<<<<<<
 *     c.id_right            = id(right)
 *     c.id_left             = id(left)
 */
  __pyx_v_c->data = new ConstraintArray(__pyx_v_5pycpx_9pyconcert_env, __pyx_v_md);

  /* "pycpx/pyconcert.pyx":1217
 *     c.model               = model
 *     c.data                = new ConstraintArray(env, md)
 *     c.id_right            = id(right)             # <<<<<<<<<<<<<<
 *     c.id_left             = id(left)
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_right);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_right);
  __Pyx_GIVEREF(__pyx_v_right);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c->id_right = __pyx_t_3;

  /* "pycpx/pyconcert.pyx":1218
 *     c.data                = new ConstraintArray(env, md)
 *     c.id_right            = id(right)
 *     c.id_left             = id(left)             # <<<<<<<<<<<<<<
 * 
 *     # Now see if we're pulling in an attached constraint
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_left);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_left);
  __Pyx_GIVEREF(__pyx_v_left);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_c->id_left = __pyx_t_3;

  /* "pycpx/pyconcert.pyx":1221
 * 
 *     # Now see if we're pulling in an attached constraint
 *     if (model.hook_id_1 == c.id_left or model.hook_id_1 == c.id_right             # <<<<<<<<<<<<<<
 *         or model.hook_id_2 == c.id_left or model.hook_id_2 == c.id_right):
 * 
 */
  __pyx_t_4 = ((__pyx_v_model->hook_id_1 == __pyx_v_c->id_left) != 0);
  if (!__pyx_t_4) {

    /* "pycpx/pyconcert.pyx":1222
 *     # Now see if we're pulling in an attached constraint
 *     if (model.hook_id_1 == c.id_left or model.hook_id_1 == c.id_right
 *         or model.hook_id_2 == c.id_left or model.hook_id_2 == c.id_right):             # <<<<<<<<<<<<<<
 * 
 *         c.hooked_constraint = model.hooked_constraint
 */
    __pyx_t_5 = ((__pyx_v_model->hook_id_1 == __pyx_v_c->id_right) != 0);
    if (!__pyx_t_5) {
      __pyx_t_6 = ((__pyx_v_model->hook_id_2 == __pyx_v_c->id_left) != 0);
      if (!__pyx_t_6) {
        __pyx_t_7 = ((__pyx_v_model->hook_id_2 == __pyx_v_c->id_right) != 0);
        __pyx_t_8 = __pyx_t_7;
      } else {
        __pyx_t_8 = __pyx_t_6;
      }
      __pyx_t_6 = __pyx_t_8;
    } else {
      __pyx_t_6 = __pyx_t_5;
    }
    __pyx_t_5 = __pyx_t_6;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  if (__pyx_t_5) {

    /* "pycpx/pyconcert.pyx":1224
 *         or model.hook_id_2 == c.id_left or model.hook_id_2 == c.id_right):
 * 
 *         c.hooked_constraint = model.hooked_constraint             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_model->hooked_constraint);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_c->hooked_constraint);
    __Pyx_DECREF(((PyObject *)__pyx_v_c->hooked_constraint));
    __pyx_v_c->hooked_constraint = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":1227
 * 
 *     else:
 *         c.hooked_constraint = None             # <<<<<<<<<<<<<<
 * 
 *     model.hook_id_1 = id(None)
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_c->hooked_constraint);
    __Pyx_DECREF(((PyObject *)__pyx_v_c->hooked_constraint));
    __pyx_v_c->hooked_constraint = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)Py_None);
  }
  __pyx_L3:;

  /* "pycpx/pyconcert.pyx":1229
 *         c.hooked_constraint = None
 * 
 *     model.hook_id_1 = id(None)             # <<<<<<<<<<<<<<
 *     model.hook_id_2 = id(None)
 *     model.hooked_constraint = None
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_model->hook_id_1 = __pyx_t_3;

  /* "pycpx/pyconcert.pyx":1230
 * 
 *     model.hook_id_1 = id(None)
 *     model.hook_id_2 = id(None)             # <<<<<<<<<<<<<<
 *     model.hooked_constraint = None
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_model->hook_id_2 = __pyx_t_3;

  /* "pycpx/pyconcert.pyx":1231
 *     model.hook_id_1 = id(None)
 *     model.hook_id_2 = id(None)
 *     model.hooked_constraint = None             # <<<<<<<<<<<<<<
 * 
 *     return c
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_model->hooked_constraint);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->hooked_constraint));
  __pyx_v_model->hooked_constraint = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)Py_None);

  /* "pycpx/pyconcert.pyx":1233
 *     model.hooked_constraint = None
 * 
 *     return c             # <<<<<<<<<<<<<<
 * 
 * cdef CPlexConstraint newEmptyConstraint(
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = __pyx_v_c;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":1211
 *     CPlexConstraint createBlankCPlexConstraint "PY_NEW" (object t)
 * 
 * cdef inline CPlexConstraint newCPC(CPlexModel model, MetaData md, left, right):             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexConstraint c = createBlankCPlexConstraint(CPlexConstraint)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.newCPC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1235
 *     return c
 * 
 * cdef CPlexConstraint newEmptyConstraint(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexModel model, left, MetaData md1, right, MetaData md2):
 * 
 */

static struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_newEmptyConstraint(int __pyx_v_op_type, struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_model, PyObject *__pyx_v_left, MetaData __pyx_v_md1, PyObject *__pyx_v_right, MetaData __pyx_v_md2) {
  int __pyx_v_okay;
  MetaData __pyx_v_md_dest;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newEmptyConstraint", 0);

  /* "pycpx/pyconcert.pyx":1238
 *     int op_type, CPlexModel model, left, MetaData md1, right, MetaData md2):
 * 
 *     cdef bint okay = False             # <<<<<<<<<<<<<<
 *     cdef MetaData md_dest = newMetadata(op_type, md1, md2, &okay)
 * 
 */
  __pyx_v_okay = 0;

  /* "pycpx/pyconcert.pyx":1239
 * 
 *     cdef bint okay = False
 *     cdef MetaData md_dest = newMetadata(op_type, md1, md2, &okay)             # <<<<<<<<<<<<<<
 * 
 *     if not okay:
 */
  __pyx_v_md_dest = newMetadata(__pyx_v_op_type, __pyx_v_md1, __pyx_v_md2, (&__pyx_v_okay));

  /* "pycpx/pyconcert.pyx":1241
 *     cdef MetaData md_dest = newMetadata(op_type, md1, md2, &okay)
 * 
 *     if not okay:             # <<<<<<<<<<<<<<
 *         raise ValueError("Indexing error for '%s' constraint: Left shape = (%d, %d), right shape = (%d, %d)."
 *                          % (opTypeStrings(op_type),
 */
  __pyx_t_1 = ((!(__pyx_v_okay != 0)) != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":1243
 *     if not okay:
 *         raise ValueError("Indexing error for '%s' constraint: Left shape = (%d, %d), right shape = (%d, %d)."
 *                          % (opTypeStrings(op_type),             # <<<<<<<<<<<<<<
 *                             md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))
 * 
 */
    __pyx_t_2 = __pyx_f_5pycpx_9pyconcert_opTypeStrings(__pyx_v_op_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);

    /* "pycpx/pyconcert.pyx":1244
 *         raise ValueError("Indexing error for '%s' constraint: Left shape = (%d, %d), right shape = (%d, %d)."
 *                          % (opTypeStrings(op_type),
 *                             md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))             # <<<<<<<<<<<<<<
 * 
 *     return newCPC(model, md_dest, left, right)
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_md1.shape(0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_md1.shape(1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_md2.shape(0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_md2.shape(1)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);

    /* "pycpx/pyconcert.pyx":1243
 *     if not okay:
 *         raise ValueError("Indexing error for '%s' constraint: Left shape = (%d, %d), right shape = (%d, %d)."
 *                          % (opTypeStrings(op_type),             # <<<<<<<<<<<<<<
 *                             md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))
 * 
 */
    __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Indexing_error_for_s_constraint, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pycpx/pyconcert.pyx":1242
 * 
 *     if not okay:
 *         raise ValueError("Indexing error for '%s' constraint: Left shape = (%d, %d), right shape = (%d, %d)."             # <<<<<<<<<<<<<<
 *                          % (opTypeStrings(op_type),
 *                             md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))
 */
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":1246
 *                             md1.shape(0), md1.shape(1), md2.shape(0), md2.shape(1)))
 * 
 *     return newCPC(model, md_dest, left, right)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCPC(__pyx_v_model, __pyx_v_md_dest, __pyx_v_left, __pyx_v_right)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":1235
 *     return c
 * 
 * cdef CPlexConstraint newEmptyConstraint(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexModel model, left, MetaData md1, right, MetaData md2):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pycpx.pyconcert.newEmptyConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1252
 * # Operators
 * 
 * cdef CPlexConstraint cstr_expression_op_expression(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr1, CPlexExpression expr2):
 * 
 */

static struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_cstr_expression_op_expression(int __pyx_v_op_type, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr1, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr2) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_dest = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cstr_expression_op_expression", 0);

  /* "pycpx/pyconcert.pyx":1255
 *     int op_type, CPlexExpression expr1, CPlexExpression expr2):
 * 
 *     if expr1.model is not expr2.model:             # <<<<<<<<<<<<<<
 *         raise ValueError("Cannot combine expressions from two different models.")
 * 
 */
  __pyx_t_1 = (__pyx_v_expr1->model != __pyx_v_expr2->model);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":1256
 * 
 *     if expr1.model is not expr2.model:
 *         raise ValueError("Cannot combine expressions from two different models.")             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexConstraint dest = newEmptyConstraint(
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":1259
 * 
 *     cdef CPlexConstraint dest = newEmptyConstraint(
 *         op_type, expr1.model, expr1, expr1.data.md(), expr2, expr2.data.md())             # <<<<<<<<<<<<<<
 * 
 *     binary_op(op_type, dest.data[0], expr1.data[0], expr2.data[0])
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_expr1->model);
  __Pyx_INCREF(__pyx_t_3);

  /* "pycpx/pyconcert.pyx":1258
 *         raise ValueError("Cannot combine expressions from two different models.")
 * 
 *     cdef CPlexConstraint dest = newEmptyConstraint(             # <<<<<<<<<<<<<<
 *         op_type, expr1.model, expr1, expr1.data.md(), expr2, expr2.data.md())
 * 
 */
  __pyx_t_4 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyConstraint(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_3), ((PyObject *)__pyx_v_expr1), __pyx_v_expr1->data->md(), ((PyObject *)__pyx_v_expr2), __pyx_v_expr2->data->md())); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dest = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pycpx/pyconcert.pyx":1261
 *         op_type, expr1.model, expr1, expr1.data.md(), expr2, expr2.data.md())
 * 
 *     binary_op(op_type, dest.data[0], expr1.data[0], expr2.data[0])             # <<<<<<<<<<<<<<
 * 
 *     return dest
 */
  binary_op(__pyx_v_op_type, (__pyx_v_dest->data[0]), (__pyx_v_expr1->data[0]), (__pyx_v_expr2->data[0]));

  /* "pycpx/pyconcert.pyx":1263
 *     binary_op(op_type, dest.data[0], expr1.data[0], expr2.data[0])
 * 
 *     return dest             # <<<<<<<<<<<<<<
 * 
 * cdef CPlexConstraint cstr_expression_op_array(
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_dest));
  __pyx_r = __pyx_v_dest;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":1252
 * # Operators
 * 
 * cdef CPlexConstraint cstr_expression_op_expression(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr1, CPlexExpression expr2):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycpx.pyconcert.cstr_expression_op_expression", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dest);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1265
 *     return dest
 * 
 * cdef CPlexConstraint cstr_expression_op_array(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr, Xo, bint reverse):
 * 
 */

static struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_cstr_expression_op_array(int __pyx_v_op_type, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr, PyObject *__pyx_v_Xo, int __pyx_v_reverse) {
  PyArrayObject *__pyx_v_X = 0;
  long __pyx_v_itemsize;
  MetaData __pyx_v_Xmd;
  NumericalArray *__pyx_v_Xna;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_dest = 0;
  PyObject *__pyx_v_ve = NULL;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  long __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  char const *__pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cstr_expression_op_array", 0);

  /* "pycpx/pyconcert.pyx":1268
 *     int op_type, CPlexExpression expr, Xo, bint reverse):
 * 
 *     cdef ar X = Xo             # <<<<<<<<<<<<<<
 * 
 *     if X.ndim >= 3:
 */
  if (!(likely(((__pyx_v_Xo) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_Xo, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_Xo;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_X = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1270
 *     cdef ar X = Xo
 * 
 *     if X.ndim >= 3:             # <<<<<<<<<<<<<<
 *         raise ValueError("Cannot work with arrays/matrices of dimension >= 3.")
 * 
 */
  __pyx_t_2 = ((__pyx_v_X->nd >= 3) != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":1271
 * 
 *     if X.ndim >= 3:
 *         raise ValueError("Cannot work with arrays/matrices of dimension >= 3.")             # <<<<<<<<<<<<<<
 * 
 *     X = asarray(X, dtype=float_)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":1273
 *         raise ValueError("Cannot work with arrays/matrices of dimension >= 3.")
 * 
 *     X = asarray(X, dtype=float_)             # <<<<<<<<<<<<<<
 * 
 *     cdef long itemsize = X.itemsize
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_X));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_X));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_X));
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_float); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF_SET(__pyx_v_X, ((PyArrayObject *)__pyx_t_5));
  __pyx_t_5 = 0;

  /* "pycpx/pyconcert.pyx":1275
 *     X = asarray(X, dtype=float_)
 * 
 *     cdef long itemsize = X.itemsize             # <<<<<<<<<<<<<<
 * 
 *     # See if we need to do an upcast
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_X), __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_5); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_itemsize = __pyx_t_6;

  /* "pycpx/pyconcert.pyx":1279
 *     # See if we need to do an upcast
 *     cdef MetaData Xmd = MetaData(CONSTRAINT_MODE,
 *                                  X.shape[0], 1 if X.ndim == 1 else X.shape[1],             # <<<<<<<<<<<<<<
 *                                  (<long>X.strides[0])/itemsize,
 *                                  1 if X.ndim == 1 else (<long>X.strides[1])/itemsize)
 */
  if (((__pyx_v_X->nd == 1) != 0)) {
    __pyx_t_6 = 1;
  } else {
    __pyx_t_6 = (__pyx_v_X->dimensions[1]);
  }

  /* "pycpx/pyconcert.pyx":1280
 *     cdef MetaData Xmd = MetaData(CONSTRAINT_MODE,
 *                                  X.shape[0], 1 if X.ndim == 1 else X.shape[1],
 *                                  (<long>X.strides[0])/itemsize,             # <<<<<<<<<<<<<<
 *                                  1 if X.ndim == 1 else (<long>X.strides[1])/itemsize)
 * 
 */
  if (unlikely(__pyx_v_itemsize == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((long)-1) > 0)) && unlikely(__pyx_v_itemsize == (long)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(((long)(__pyx_v_X->strides[0]))))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":1281
 *                                  X.shape[0], 1 if X.ndim == 1 else X.shape[1],
 *                                  (<long>X.strides[0])/itemsize,
 *                                  1 if X.ndim == 1 else (<long>X.strides[1])/itemsize)             # <<<<<<<<<<<<<<
 * 
 *     cdef NumericalArray *Xna = new NumericalArray(env, (<double*>(X.data)), Xmd)
 */
  if (((__pyx_v_X->nd == 1) != 0)) {
    __pyx_t_7 = 1;
  } else {
    if (unlikely(__pyx_v_itemsize == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(long) == sizeof(long) && (!(((long)-1) > 0)) && unlikely(__pyx_v_itemsize == (long)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(((long)(__pyx_v_X->strides[1]))))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = __Pyx_div_long(((long)(__pyx_v_X->strides[1])), __pyx_v_itemsize);
  }

  /* "pycpx/pyconcert.pyx":1278
 * 
 *     # See if we need to do an upcast
 *     cdef MetaData Xmd = MetaData(CONSTRAINT_MODE,             # <<<<<<<<<<<<<<
 *                                  X.shape[0], 1 if X.ndim == 1 else X.shape[1],
 *                                  (<long>X.strides[0])/itemsize,
 */
  __pyx_v_Xmd = MetaData(CONSTRAINT_MODE, (__pyx_v_X->dimensions[0]), __pyx_t_6, __Pyx_div_long(((long)(__pyx_v_X->strides[0])), __pyx_v_itemsize), __pyx_t_7);

  /* "pycpx/pyconcert.pyx":1283
 *                                  1 if X.ndim == 1 else (<long>X.strides[1])/itemsize)
 * 
 *     cdef NumericalArray *Xna = new NumericalArray(env, (<double*>(X.data)), Xmd)             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexConstraint dest
 */
  __pyx_v_Xna = new NumericalArray(__pyx_v_5pycpx_9pyconcert_env, ((double *)__pyx_v_X->data), __pyx_v_Xmd);

  /* "pycpx/pyconcert.pyx":1287
 *     cdef CPlexConstraint dest
 * 
 *     try:             # <<<<<<<<<<<<<<
 * 
 *         if reverse:
 */
  /*try:*/ {

    /* "pycpx/pyconcert.pyx":1289
 *     try:
 * 
 *         if reverse:             # <<<<<<<<<<<<<<
 *             try:
 *                 dest = newEmptyConstraint(op_type, expr.model, Xo, Xmd, expr, expr.data.md())
 */
    __pyx_t_2 = (__pyx_v_reverse != 0);
    if (__pyx_t_2) {

      /* "pycpx/pyconcert.pyx":1290
 * 
 *         if reverse:
 *             try:             # <<<<<<<<<<<<<<
 *                 dest = newEmptyConstraint(op_type, expr.model, Xo, Xmd, expr, expr.data.md())
 *             except ValueError, ve:
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "pycpx/pyconcert.pyx":1291
 *         if reverse:
 *             try:
 *                 dest = newEmptyConstraint(op_type, expr.model, Xo, Xmd, expr, expr.data.md())             # <<<<<<<<<<<<<<
 *             except ValueError, ve:
 *                 if X.ndim == 1:
 */
          __pyx_t_5 = ((PyObject *)__pyx_v_expr->model);
          __Pyx_INCREF(__pyx_t_5);
          __pyx_t_4 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyConstraint(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_5), __pyx_v_Xo, __pyx_v_Xmd, ((PyObject *)__pyx_v_expr), __pyx_v_expr->data->md())); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1291; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_v_dest = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_4);
          __pyx_t_4 = 0;
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L15_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "pycpx/pyconcert.pyx":1292
 *             try:
 *                 dest = newEmptyConstraint(op_type, expr.model, Xo, Xmd, expr, expr.data.md())
 *             except ValueError, ve:             # <<<<<<<<<<<<<<
 *                 if X.ndim == 1:
 *                     try:
 */
        __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_11) {
          __Pyx_AddTraceback("pycpx.pyconcert.cstr_expression_op_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __pyx_v_ve = __pyx_t_5;

          /* "pycpx/pyconcert.pyx":1293
 *                 dest = newEmptyConstraint(op_type, expr.model, Xo, Xmd, expr, expr.data.md())
 *             except ValueError, ve:
 *                 if X.ndim == 1:             # <<<<<<<<<<<<<<
 *                     try:
 *                         dest = newEmptyConstraint(
 */
          __pyx_t_2 = ((__pyx_v_X->nd == 1) != 0);
          if (__pyx_t_2) {

            /* "pycpx/pyconcert.pyx":1294
 *             except ValueError, ve:
 *                 if X.ndim == 1:
 *                     try:             # <<<<<<<<<<<<<<
 *                         dest = newEmptyConstraint(
 *                             op_type, expr.model, Xo, Xmd.transposed(), expr, expr.data.md())
 */
            {
              __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
              __Pyx_XGOTREF(__pyx_t_12);
              __Pyx_XGOTREF(__pyx_t_13);
              __Pyx_XGOTREF(__pyx_t_14);
              /*try:*/ {

                /* "pycpx/pyconcert.pyx":1296
 *                     try:
 *                         dest = newEmptyConstraint(
 *                             op_type, expr.model, Xo, Xmd.transposed(), expr, expr.data.md())             # <<<<<<<<<<<<<<
 * 
 *                     except ValueError:
 */
                __pyx_t_1 = ((PyObject *)__pyx_v_expr->model);
                __Pyx_INCREF(__pyx_t_1);

                /* "pycpx/pyconcert.pyx":1295
 *                 if X.ndim == 1:
 *                     try:
 *                         dest = newEmptyConstraint(             # <<<<<<<<<<<<<<
 *                             op_type, expr.model, Xo, Xmd.transposed(), expr, expr.data.md())
 * 
 */
                __pyx_t_15 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyConstraint(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_1), __pyx_v_Xo, __pyx_v_Xmd.transposed(), ((PyObject *)__pyx_v_expr), __pyx_v_expr->data->md())); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1295; __pyx_clineno = __LINE__; goto __pyx_L19_error;}
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_XDECREF_SET(__pyx_v_dest, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_15));
                __pyx_t_15 = 0;
              }
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              goto __pyx_L26_try_end;
              __pyx_L19_error:;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;

              /* "pycpx/pyconcert.pyx":1298
 *                             op_type, expr.model, Xo, Xmd.transposed(), expr, expr.data.md())
 * 
 *                     except ValueError:             # <<<<<<<<<<<<<<
 *                         raise ve
 *                 else:
 */
              __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
              if (__pyx_t_11) {
                __Pyx_AddTraceback("pycpx.pyconcert.cstr_expression_op_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_1, &__pyx_t_16) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L21_except_error;}
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_GOTREF(__pyx_t_16);

                /* "pycpx/pyconcert.pyx":1299
 * 
 *                     except ValueError:
 *                         raise ve             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise
 */
                __Pyx_Raise(__pyx_v_ve, 0, 0, 0);
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L21_except_error;}
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                goto __pyx_L20_exception_handled;
              }
              goto __pyx_L21_except_error;
              __pyx_L21_except_error:;
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
              goto __pyx_L10_except_error;
              __pyx_L20_exception_handled:;
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
              __pyx_L26_try_end:;
            }
            goto __pyx_L18;
          }
          /*else*/ {

            /* "pycpx/pyconcert.pyx":1301
 *                         raise ve
 *                 else:
 *                     raise             # <<<<<<<<<<<<<<
 * 
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], Xna[0], expr.data[0])
 */
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestore(__pyx_t_4, __pyx_t_5, __pyx_t_3);
            __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_3 = 0; 
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          }
          __pyx_L18:;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L9_exception_handled;
        }
        goto __pyx_L10_except_error;
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L5_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L15_try_end:;
      }

      /* "pycpx/pyconcert.pyx":1303
 *                     raise
 * 
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], Xna[0], expr.data[0])             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      binary_op((__pyx_v_op_type | OP_SIMPLE_FLAG), (__pyx_v_dest->data[0]), (__pyx_v_Xna[0]), (__pyx_v_expr->data[0]));
      goto __pyx_L7;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":1306
 * 
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 dest = newEmptyConstraint(
 *                     op_type, expr.model, expr, expr.data.md(), Xo, Xmd)
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {

          /* "pycpx/pyconcert.pyx":1308
 *             try:
 *                 dest = newEmptyConstraint(
 *                     op_type, expr.model, expr, expr.data.md(), Xo, Xmd)             # <<<<<<<<<<<<<<
 * 
 *             except ValueError, ve:
 */
          __pyx_t_3 = ((PyObject *)__pyx_v_expr->model);
          __Pyx_INCREF(__pyx_t_3);

          /* "pycpx/pyconcert.pyx":1307
 *         else:
 *             try:
 *                 dest = newEmptyConstraint(             # <<<<<<<<<<<<<<
 *                     op_type, expr.model, expr, expr.data.md(), Xo, Xmd)
 * 
 */
          __pyx_t_5 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyConstraint(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_3), ((PyObject *)__pyx_v_expr), __pyx_v_expr->data->md(), __pyx_v_Xo, __pyx_v_Xmd)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L29_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_dest = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_5);
          __pyx_t_5 = 0;
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L36_try_end;
        __pyx_L29_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "pycpx/pyconcert.pyx":1310
 *                     op_type, expr.model, expr, expr.data.md(), Xo, Xmd)
 * 
 *             except ValueError, ve:             # <<<<<<<<<<<<<<
 *                 if X.ndim == 1:
 *                     try:
 */
        __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_11) {
          __Pyx_AddTraceback("pycpx.pyconcert.cstr_expression_op_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L31_except_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __pyx_v_ve = __pyx_t_3;

          /* "pycpx/pyconcert.pyx":1311
 * 
 *             except ValueError, ve:
 *                 if X.ndim == 1:             # <<<<<<<<<<<<<<
 *                     try:
 *                         dest = newEmptyConstraint(
 */
          __pyx_t_2 = ((__pyx_v_X->nd == 1) != 0);
          if (__pyx_t_2) {

            /* "pycpx/pyconcert.pyx":1312
 *             except ValueError, ve:
 *                 if X.ndim == 1:
 *                     try:             # <<<<<<<<<<<<<<
 *                         dest = newEmptyConstraint(
 *                             op_type, expr.model, expr, expr.data.md(), Xo, Xmd.transposed())
 */
            {
              __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
              __Pyx_XGOTREF(__pyx_t_14);
              __Pyx_XGOTREF(__pyx_t_13);
              __Pyx_XGOTREF(__pyx_t_12);
              /*try:*/ {

                /* "pycpx/pyconcert.pyx":1314
 *                     try:
 *                         dest = newEmptyConstraint(
 *                             op_type, expr.model, expr, expr.data.md(), Xo, Xmd.transposed())             # <<<<<<<<<<<<<<
 * 
 *                     except ValueError:
 */
                __pyx_t_16 = ((PyObject *)__pyx_v_expr->model);
                __Pyx_INCREF(__pyx_t_16);

                /* "pycpx/pyconcert.pyx":1313
 *                 if X.ndim == 1:
 *                     try:
 *                         dest = newEmptyConstraint(             # <<<<<<<<<<<<<<
 *                             op_type, expr.model, expr, expr.data.md(), Xo, Xmd.transposed())
 * 
 */
                __pyx_t_1 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyConstraint(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_16), ((PyObject *)__pyx_v_expr), __pyx_v_expr->data->md(), __pyx_v_Xo, __pyx_v_Xmd.transposed())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L40_error;}
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_XDECREF_SET(__pyx_v_dest, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_1));
                __pyx_t_1 = 0;
              }
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              goto __pyx_L47_try_end;
              __pyx_L40_error:;
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "pycpx/pyconcert.pyx":1316
 *                             op_type, expr.model, expr, expr.data.md(), Xo, Xmd.transposed())
 * 
 *                     except ValueError:             # <<<<<<<<<<<<<<
 *                         raise ve
 *                 else:
 */
              __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
              if (__pyx_t_11) {
                __Pyx_AddTraceback("pycpx.pyconcert.cstr_expression_op_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_16, &__pyx_t_15) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_GOTREF(__pyx_t_16);
                __Pyx_GOTREF(__pyx_t_15);

                /* "pycpx/pyconcert.pyx":1317
 * 
 *                     except ValueError:
 *                         raise ve             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise
 */
                __Pyx_Raise(__pyx_v_ve, 0, 0, 0);
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1317; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                goto __pyx_L41_exception_handled;
              }
              goto __pyx_L42_except_error;
              __pyx_L42_except_error:;
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
              goto __pyx_L31_except_error;
              __pyx_L41_exception_handled:;
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
              __pyx_L47_try_end:;
            }
            goto __pyx_L39;
          }
          /*else*/ {

            /* "pycpx/pyconcert.pyx":1319
 *                         raise ve
 *                 else:
 *                     raise             # <<<<<<<<<<<<<<
 * 
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], expr.data[0], Xna[0])
 */
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_4);
            __Pyx_ErrRestore(__pyx_t_5, __pyx_t_3, __pyx_t_4);
            __pyx_t_5 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1319; __pyx_clineno = __LINE__; goto __pyx_L31_except_error;}
          }
          __pyx_L39:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L30_exception_handled;
        }
        goto __pyx_L31_except_error;
        __pyx_L31_except_error:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        goto __pyx_L5_error;
        __pyx_L30_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        __pyx_L36_try_end:;
      }

      /* "pycpx/pyconcert.pyx":1321
 *                     raise
 * 
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], expr.data[0], Xna[0])             # <<<<<<<<<<<<<<
 *     finally:
 *         del Xna
 */
      binary_op((__pyx_v_op_type | OP_SIMPLE_FLAG), (__pyx_v_dest->data[0]), (__pyx_v_expr->data[0]), (__pyx_v_Xna[0]));
    }
    __pyx_L7:;
  }

  /* "pycpx/pyconcert.pyx":1323
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], expr.data[0], Xna[0])
 *     finally:
 *         del Xna             # <<<<<<<<<<<<<<
 * 
 *     return dest
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_Xna;
      goto __pyx_L6;
    }
    /*exception exit:*/{
      __pyx_L5_error:;
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __pyx_t_11 = __pyx_lineno; __pyx_t_17 = __pyx_clineno; __pyx_t_18 = __pyx_filename;
      {
        delete __pyx_v_Xna;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_17; __pyx_filename = __pyx_t_18;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }

  /* "pycpx/pyconcert.pyx":1325
 *         del Xna
 * 
 *     return dest             # <<<<<<<<<<<<<<
 * 
 * cdef CPlexConstraint cstr_expression_op_scalar(
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_dest));
  __pyx_r = __pyx_v_dest;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":1265
 *     return dest
 * 
 * cdef CPlexConstraint cstr_expression_op_array(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr, Xo, bint reverse):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("pycpx.pyconcert.cstr_expression_op_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_X);
  __Pyx_XDECREF((PyObject *)__pyx_v_dest);
  __Pyx_XDECREF(__pyx_v_ve);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1327
 *     return dest
 * 
 * cdef CPlexConstraint cstr_expression_op_scalar(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr, v, bint reverse):
 * 
 */

static struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_cstr_expression_op_scalar(int __pyx_v_op_type, struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr, PyObject *__pyx_v_v, int __pyx_v_reverse) {
  Scalar *__pyx_v_sc;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_dest = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cstr_expression_op_scalar", 0);

  /* "pycpx/pyconcert.pyx":1330
 *     int op_type, CPlexExpression expr, v, bint reverse):
 * 
 *     cdef Scalar *sc = new Scalar(env, <double?>v)             # <<<<<<<<<<<<<<
 *     cdef CPlexConstraint dest
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_sc = new Scalar(__pyx_v_5pycpx_9pyconcert_env, ((double)__pyx_t_1));

  /* "pycpx/pyconcert.pyx":1333
 *     cdef CPlexConstraint dest
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if reverse:
 *             dest = newEmptyConstraint(op_type, expr.model, v, sc.md(), expr, expr.data.md())
 */
  /*try:*/ {

    /* "pycpx/pyconcert.pyx":1334
 * 
 *     try:
 *         if reverse:             # <<<<<<<<<<<<<<
 *             dest = newEmptyConstraint(op_type, expr.model, v, sc.md(), expr, expr.data.md())
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], sc[0], expr.data[0])
 */
    __pyx_t_2 = (__pyx_v_reverse != 0);
    if (__pyx_t_2) {

      /* "pycpx/pyconcert.pyx":1335
 *     try:
 *         if reverse:
 *             dest = newEmptyConstraint(op_type, expr.model, v, sc.md(), expr, expr.data.md())             # <<<<<<<<<<<<<<
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], sc[0], expr.data[0])
 * 
 */
      __pyx_t_3 = ((PyObject *)__pyx_v_expr->model);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_4 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyConstraint(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_3), __pyx_v_v, __pyx_v_sc->md(), ((PyObject *)__pyx_v_expr), __pyx_v_expr->data->md())); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_dest = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "pycpx/pyconcert.pyx":1336
 *         if reverse:
 *             dest = newEmptyConstraint(op_type, expr.model, v, sc.md(), expr, expr.data.md())
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], sc[0], expr.data[0])             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      binary_op((__pyx_v_op_type | OP_SIMPLE_FLAG), (__pyx_v_dest->data[0]), (__pyx_v_sc[0]), (__pyx_v_expr->data[0]));
      goto __pyx_L6;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":1339
 * 
 *         else:
 *             dest = newEmptyConstraint(op_type, expr.model, expr, expr.data.md(), v, sc.md())             # <<<<<<<<<<<<<<
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], expr.data[0], sc[0])
 *     finally:
 */
      __pyx_t_4 = ((PyObject *)__pyx_v_expr->model);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newEmptyConstraint(__pyx_v_op_type, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_t_4), ((PyObject *)__pyx_v_expr), __pyx_v_expr->data->md(), __pyx_v_v, __pyx_v_sc->md())); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_dest = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pycpx/pyconcert.pyx":1340
 *         else:
 *             dest = newEmptyConstraint(op_type, expr.model, expr, expr.data.md(), v, sc.md())
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], expr.data[0], sc[0])             # <<<<<<<<<<<<<<
 *     finally:
 *         del sc
 */
      binary_op((__pyx_v_op_type | OP_SIMPLE_FLAG), (__pyx_v_dest->data[0]), (__pyx_v_expr->data[0]), (__pyx_v_sc[0]));
    }
    __pyx_L6:;
  }

  /* "pycpx/pyconcert.pyx":1342
 *             binary_op(op_type | OP_SIMPLE_FLAG, dest.data[0], expr.data[0], sc[0])
 *     finally:
 *         del sc             # <<<<<<<<<<<<<<
 * 
 *     return dest
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_sc;
      goto __pyx_L5;
    }
    /*exception exit:*/{
      __pyx_L4_error:;
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_5 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        delete __pyx_v_sc;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "pycpx/pyconcert.pyx":1344
 *         del sc
 * 
 *     return dest             # <<<<<<<<<<<<<<
 * 
 * ##################################################
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_dest));
  __pyx_r = __pyx_v_dest;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":1327
 *     return dest
 * 
 * cdef CPlexConstraint cstr_expression_op_scalar(             # <<<<<<<<<<<<<<
 *     int op_type, CPlexExpression expr, v, bint reverse):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycpx.pyconcert.cstr_expression_op_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dest);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1349
 * # The main constraint operator class
 * 
 * cdef CPlexConstraint cstr_var_op_var(op_type, a1, a2):             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexExpression expr1 = None, expr2 = None
 */

static struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_f_5pycpx_9pyconcert_cstr_var_op_var(PyObject *__pyx_v_op_type, PyObject *__pyx_v_a1, PyObject *__pyx_v_a2) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr1 = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_expr2 = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cstr_var_op_var", 0);

  /* "pycpx/pyconcert.pyx":1351
 * cdef CPlexConstraint cstr_var_op_var(op_type, a1, a2):
 * 
 *     cdef CPlexExpression expr1 = None, expr2 = None             # <<<<<<<<<<<<<<
 * 
 *     if type(a1) is CPlexExpression:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_expr1 = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)Py_None);
  __Pyx_INCREF(Py_None);
  __pyx_v_expr2 = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)Py_None);

  /* "pycpx/pyconcert.pyx":1353
 *     cdef CPlexExpression expr1 = None, expr2 = None
 * 
 *     if type(a1) is CPlexExpression:             # <<<<<<<<<<<<<<
 *         expr1 = <CPlexExpression>a1
 * 
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_a1)) == ((PyObject *)((PyObject*)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression)));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":1354
 * 
 *     if type(a1) is CPlexExpression:
 *         expr1 = <CPlexExpression>a1             # <<<<<<<<<<<<<<
 * 
 *     if type(a2) is CPlexExpression:
 */
    __pyx_t_3 = __pyx_v_a1;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_expr1, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3));
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pycpx/pyconcert.pyx":1356
 *         expr1 = <CPlexExpression>a1
 * 
 *     if type(a2) is CPlexExpression:             # <<<<<<<<<<<<<<
 *         expr2 = <CPlexExpression>a2
 * 
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_a2)) == ((PyObject *)((PyObject*)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression)));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":1357
 * 
 *     if type(a2) is CPlexExpression:
 *         expr2 = <CPlexExpression>a2             # <<<<<<<<<<<<<<
 * 
 *     if expr1 is not None and expr2 is not None:
 */
    __pyx_t_3 = __pyx_v_a2;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_expr2, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3));
    __pyx_t_3 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pycpx/pyconcert.pyx":1359
 *         expr2 = <CPlexExpression>a2
 * 
 *     if expr1 is not None and expr2 is not None:             # <<<<<<<<<<<<<<
 *         return cstr_expression_op_expression(op_type, expr1, expr2)
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_expr1) != Py_None);
  if ((__pyx_t_1 != 0)) {
    __pyx_t_2 = (((PyObject *)__pyx_v_expr2) != Py_None);
    __pyx_t_4 = (__pyx_t_2 != 0);
  } else {
    __pyx_t_4 = (__pyx_t_1 != 0);
  }
  if (__pyx_t_4) {

    /* "pycpx/pyconcert.pyx":1360
 * 
 *     if expr1 is not None and expr2 is not None:
 *         return cstr_expression_op_expression(op_type, expr1, expr2)             # <<<<<<<<<<<<<<
 * 
 *     elif expr1 is not None:
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_op_type); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_expression_op_expression(__pyx_t_5, __pyx_v_expr1, __pyx_v_expr2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pycpx/pyconcert.pyx":1362
 *         return cstr_expression_op_expression(op_type, expr1, expr2)
 * 
 *     elif expr1 is not None:             # <<<<<<<<<<<<<<
 *         if isinstance(a2, ndarray):
 *             return cstr_expression_op_array(op_type, expr1, a2, False)
 */
  __pyx_t_4 = (((PyObject *)__pyx_v_expr1) != Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":1363
 * 
 *     elif expr1 is not None:
 *         if isinstance(a2, ndarray):             # <<<<<<<<<<<<<<
 *             return cstr_expression_op_array(op_type, expr1, a2, False)
 *         elif isscalar(a2):
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_ndarray); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_a2, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = (__pyx_t_1 != 0);
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":1364
 *     elif expr1 is not None:
 *         if isinstance(a2, ndarray):
 *             return cstr_expression_op_array(op_type, expr1, a2, False)             # <<<<<<<<<<<<<<
 *         elif isscalar(a2):
 *             return cstr_expression_op_scalar(op_type, expr1, a2, False)
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_op_type); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_expression_op_array(__pyx_t_5, __pyx_v_expr1, __pyx_v_a2, 0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;
    }

    /* "pycpx/pyconcert.pyx":1365
 *         if isinstance(a2, ndarray):
 *             return cstr_expression_op_array(op_type, expr1, a2, False)
 *         elif isscalar(a2):             # <<<<<<<<<<<<<<
 *             return cstr_expression_op_scalar(op_type, expr1, a2, False)
 *         elif issparse(a2):
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_isscalar); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_a2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_a2);
    __Pyx_GIVEREF(__pyx_v_a2);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":1366
 *             return cstr_expression_op_array(op_type, expr1, a2, False)
 *         elif isscalar(a2):
 *             return cstr_expression_op_scalar(op_type, expr1, a2, False)             # <<<<<<<<<<<<<<
 *         elif issparse(a2):
 *             return cstr_expression_op_array(op_type, expr1, a2.todense(), False)
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_op_type); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_7 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_expression_op_scalar(__pyx_t_5, __pyx_v_expr1, __pyx_v_a2, 0)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_7);
      __pyx_t_7 = 0;
      goto __pyx_L0;
    }

    /* "pycpx/pyconcert.pyx":1367
 *         elif isscalar(a2):
 *             return cstr_expression_op_scalar(op_type, expr1, a2, False)
 *         elif issparse(a2):             # <<<<<<<<<<<<<<
 *             return cstr_expression_op_array(op_type, expr1, a2.todense(), False)
 *         else:
 */
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_a2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_a2);
    __Pyx_GIVEREF(__pyx_v_a2);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_v_5pycpx_9pyconcert_issparse, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":1368
 *             return cstr_expression_op_scalar(op_type, expr1, a2, False)
 *         elif issparse(a2):
 *             return cstr_expression_op_array(op_type, expr1, a2.todense(), False)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Iteraction with type %s not supported yet." % type(a2))
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_op_type); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_a2, __pyx_n_s_todense); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_expression_op_array(__pyx_t_5, __pyx_v_expr1, __pyx_t_7, 0)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_6);
      __pyx_t_6 = 0;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":1370
 *             return cstr_expression_op_array(op_type, expr1, a2.todense(), False)
 *         else:
 *             raise TypeError("Iteraction with type %s not supported yet." % type(a2))             # <<<<<<<<<<<<<<
 *     elif expr2 is not None:
 *         if isinstance(a1, ndarray):
 */
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Iteraction_with_type_s_not_suppo, ((PyObject *)Py_TYPE(__pyx_v_a2))); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "pycpx/pyconcert.pyx":1371
 *         else:
 *             raise TypeError("Iteraction with type %s not supported yet." % type(a2))
 *     elif expr2 is not None:             # <<<<<<<<<<<<<<
 *         if isinstance(a1, ndarray):
 *             return cstr_expression_op_array(op_type, expr2, a1, True)
 */
  __pyx_t_4 = (((PyObject *)__pyx_v_expr2) != Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":1372
 *             raise TypeError("Iteraction with type %s not supported yet." % type(a2))
 *     elif expr2 is not None:
 *         if isinstance(a1, ndarray):             # <<<<<<<<<<<<<<
 *             return cstr_expression_op_array(op_type, expr2, a1, True)
 *         elif isscalar(a1):
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_ndarray); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_a1, __pyx_t_6); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = (__pyx_t_1 != 0);
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":1373
 *     elif expr2 is not None:
 *         if isinstance(a1, ndarray):
 *             return cstr_expression_op_array(op_type, expr2, a1, True)             # <<<<<<<<<<<<<<
 *         elif isscalar(a1):
 *             return cstr_expression_op_scalar(op_type, expr2, a1, True)
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_op_type); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_expression_op_array(__pyx_t_5, __pyx_v_expr2, __pyx_v_a1, 1)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_6);
      __pyx_t_6 = 0;
      goto __pyx_L0;
    }

    /* "pycpx/pyconcert.pyx":1374
 *         if isinstance(a1, ndarray):
 *             return cstr_expression_op_array(op_type, expr2, a1, True)
 *         elif isscalar(a1):             # <<<<<<<<<<<<<<
 *             return cstr_expression_op_scalar(op_type, expr2, a1, True)
 *         elif issparse(a1):
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_isscalar); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_a1);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_a1);
    __Pyx_GIVEREF(__pyx_v_a1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":1375
 *             return cstr_expression_op_array(op_type, expr2, a1, True)
 *         elif isscalar(a1):
 *             return cstr_expression_op_scalar(op_type, expr2, a1, True)             # <<<<<<<<<<<<<<
 *         elif issparse(a1):
 *             return cstr_expression_op_array(op_type, expr2, a1.todense(), True)
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_op_type); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_expression_op_scalar(__pyx_t_5, __pyx_v_expr2, __pyx_v_a1, 1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;
    }

    /* "pycpx/pyconcert.pyx":1376
 *         elif isscalar(a1):
 *             return cstr_expression_op_scalar(op_type, expr2, a1, True)
 *         elif issparse(a1):             # <<<<<<<<<<<<<<
 *             return cstr_expression_op_array(op_type, expr2, a1.todense(), True)
 *         else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_a1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_a1);
    __Pyx_GIVEREF(__pyx_v_a1);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_v_5pycpx_9pyconcert_issparse, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":1377
 *             return cstr_expression_op_scalar(op_type, expr2, a1, True)
 *         elif issparse(a1):
 *             return cstr_expression_op_array(op_type, expr2, a1.todense(), True)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Iteraction with type %s not supported yet." % type(a1))
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_op_type); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_a1, __pyx_n_s_todense); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_cstr_expression_op_array(__pyx_t_5, __pyx_v_expr2, __pyx_t_3, 1)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_7);
      __pyx_t_7 = 0;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":1379
 *             return cstr_expression_op_array(op_type, expr2, a1.todense(), True)
 *         else:
 *             raise TypeError("Iteraction with type %s not supported yet." % type(a1))             # <<<<<<<<<<<<<<
 *     else:
 *         assert False
 */
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Iteraction_with_type_s_not_suppo, ((PyObject *)Py_TYPE(__pyx_v_a1))); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":1381
 *             raise TypeError("Iteraction with type %s not supported yet." % type(a1))
 *     else:
 *         assert False             # <<<<<<<<<<<<<<
 * 
 * ################################################################################
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!0)) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif
  }

  /* "pycpx/pyconcert.pyx":1349
 * # The main constraint operator class
 * 
 * cdef CPlexConstraint cstr_var_op_var(op_type, a1, a2):             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexExpression expr1 = None, expr2 = None
 */

  /* function exit code */
  __pyx_r = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pycpx.pyconcert.cstr_var_op_var", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_expr1);
  __Pyx_XDECREF((PyObject *)__pyx_v_expr2);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1409
 *     cdef double last_op_time
 * 
 *     def __cinit__(self, int verbosity = 2):             # <<<<<<<<<<<<<<
 *         """
 *         Creates a new empty model.
 */

/* Python wrapper */
static int __pyx_pw_5pycpx_9pyconcert_10CPlexModel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5pycpx_9pyconcert_10CPlexModel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_verbosity;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_verbosity,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbosity);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_verbosity = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_verbosity == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_verbosity = ((int)2);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel___cinit__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), __pyx_v_verbosity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5pycpx_9pyconcert_10CPlexModel___cinit__(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, int __pyx_v_verbosity) {
  struct CPlexModelInterface::Status __pyx_v_model_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pycpx/pyconcert.pyx":1422
 *         """
 * 
 *         self.rv_number = 0             # <<<<<<<<<<<<<<
 *         self.key_strings = {}
 *         self.variables = []
 */
  __pyx_v_self->rv_number = 0;

  /* "pycpx/pyconcert.pyx":1423
 * 
 *         self.rv_number = 0
 *         self.key_strings = {}             # <<<<<<<<<<<<<<
 *         self.variables = []
 *         self.last_op_time = 0
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->key_strings);
  __Pyx_DECREF(__pyx_v_self->key_strings);
  __pyx_v_self->key_strings = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1424
 *         self.rv_number = 0
 *         self.key_strings = {}
 *         self.variables = []             # <<<<<<<<<<<<<<
 *         self.last_op_time = 0
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->variables);
  __Pyx_DECREF(__pyx_v_self->variables);
  __pyx_v_self->variables = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1425
 *         self.key_strings = {}
 *         self.variables = []
 *         self.last_op_time = 0             # <<<<<<<<<<<<<<
 * 
 *         self.model = NULL
 */
  __pyx_v_self->last_op_time = 0.0;

  /* "pycpx/pyconcert.pyx":1427
 *         self.last_op_time = 0
 * 
 *         self.model = NULL             # <<<<<<<<<<<<<<
 * 
 *         self.setVerbosity(verbosity)
 */
  __pyx_v_self->model = NULL;

  /* "pycpx/pyconcert.pyx":1429
 *         self.model = NULL
 * 
 *         self.setVerbosity(verbosity)             # <<<<<<<<<<<<<<
 *         self._checkVerbosity()
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->setVerbosity(__pyx_v_self, __pyx_v_verbosity, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1430
 * 
 *         self.setVerbosity(verbosity)
 *         self._checkVerbosity()             # <<<<<<<<<<<<<<
 * 
 *         cdef Status model_status = newCPlexModelInterface(&self.model, env)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkVerbosity(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1432
 *         self._checkVerbosity()
 * 
 *         cdef Status model_status = newCPlexModelInterface(&self.model, env)             # <<<<<<<<<<<<<<
 * 
 *         if model_status.error_code != 0:
 */
  __pyx_v_model_status = newCPlexModelInterface((&__pyx_v_self->model), __pyx_v_5pycpx_9pyconcert_env);

  /* "pycpx/pyconcert.pyx":1434
 *         cdef Status model_status = newCPlexModelInterface(&self.model, env)
 * 
 *         if model_status.error_code != 0:             # <<<<<<<<<<<<<<
 *             raise CPlexInitError("Error initializing new cplex model: %s" % str(model_status.message))
 * 
 */
  __pyx_t_2 = ((__pyx_v_model_status.error_code != 0) != 0);
  if (__pyx_t_2) {

    /* "pycpx/pyconcert.pyx":1435
 * 
 *         if model_status.error_code != 0:
 *             raise CPlexInitError("Error initializing new cplex model: %s" % str(model_status.message))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexInitError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_model_status.message); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Error_initializing_new_cplex_mod, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":1409
 *     cdef double last_op_time
 * 
 *     def __cinit__(self, int verbosity = 2):             # <<<<<<<<<<<<<<
 *         """
 *         Creates a new empty model.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1437
 *             raise CPlexInitError("Error initializing new cplex model: %s" % str(model_status.message))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.model != NULL:
 *             del self.model
 */

/* Python wrapper */
static void __pyx_pw_5pycpx_9pyconcert_10CPlexModel_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5pycpx_9pyconcert_10CPlexModel_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5pycpx_9pyconcert_10CPlexModel_2__dealloc__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5pycpx_9pyconcert_10CPlexModel_2__dealloc__(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pycpx/pyconcert.pyx":1438
 * 
 *     def __dealloc__(self):
 *         if self.model != NULL:             # <<<<<<<<<<<<<<
 *             del self.model
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->model != NULL) != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":1439
 *     def __dealloc__(self):
 *         if self.model != NULL:
 *             del self.model             # <<<<<<<<<<<<<<
 * 
 *     cpdef setVerbosity(self, int verbosity):
 */
    delete __pyx_v_self->model;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pycpx/pyconcert.pyx":1437
 *             raise CPlexInitError("Error initializing new cplex model: %s" % str(model_status.message))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.model != NULL:
 *             del self.model
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pycpx/pyconcert.pyx":1441
 *             del self.model
 * 
 *     cpdef setVerbosity(self, int verbosity):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the verbosity level of the solver.  The verbosity level
 */

static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_5setVerbosity(PyObject *__pyx_v_self, PyObject *__pyx_arg_verbosity); /*proto*/
static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel_setVerbosity(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, int __pyx_v_verbosity, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setVerbosity", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setVerbosity); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_5setVerbosity)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_verbosity); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pycpx/pyconcert.pyx":1456
 *         """
 * 
 *         if verbosity not in [0,1,2,3]:             # <<<<<<<<<<<<<<
 *             raise ValueError("Verbosity must be 0, 1, 2, or 3.")
 * 
 */
  switch (__pyx_v_verbosity) {
    case 0:
    case 1:
    case 2:
    case 3:
    __pyx_t_4 = 0;
    break;
    default:
    __pyx_t_4 = 1;
    break;
  }
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "pycpx/pyconcert.pyx":1457
 * 
 *         if verbosity not in [0,1,2,3]:
 *             raise ValueError("Verbosity must be 0, 1, 2, or 3.")             # <<<<<<<<<<<<<<
 * 
 *         self.verbosity = verbosity
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":1459
 *             raise ValueError("Verbosity must be 0, 1, 2, or 3.")
 * 
 *         self.verbosity = verbosity             # <<<<<<<<<<<<<<
 * 
 *     cdef _checkOkay(self):
 */
  __pyx_v_self->verbosity = __pyx_v_verbosity;

  /* "pycpx/pyconcert.pyx":1441
 *             del self.model
 * 
 *     cpdef setVerbosity(self, int verbosity):             # <<<<<<<<<<<<<<
 *         """
 *         Sets the verbosity level of the solver.  The verbosity level
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.setVerbosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_5setVerbosity(PyObject *__pyx_v_self, PyObject *__pyx_arg_verbosity); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_4setVerbosity[] = "\n        Sets the verbosity level of the solver.  The verbosity level\n        may be 0,1,2 (default), or 3. These indicate:\n\n          verbosity = 0: no output, ever.\n          verbosity = 1: errors are printed.\n          verbosity = 2: warnings and errors are printed.\n          verbosity = 3: warnings, errors, and progress reports are printed.\n\n        Note that problems such as the model being infeasible or\n        unbounded are handled with exceptions; see class documentation\n        for more information..\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_5setVerbosity(PyObject *__pyx_v_self, PyObject *__pyx_arg_verbosity) {
  int __pyx_v_verbosity;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVerbosity (wrapper)", 0);
  assert(__pyx_arg_verbosity); {
    __pyx_v_verbosity = __Pyx_PyInt_As_int(__pyx_arg_verbosity); if (unlikely((__pyx_v_verbosity == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.setVerbosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_4setVerbosity(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), ((int)__pyx_v_verbosity));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_4setVerbosity(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, int __pyx_v_verbosity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setVerbosity", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->setVerbosity(__pyx_v_self, __pyx_v_verbosity, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.setVerbosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1461
 *         self.verbosity = verbosity
 * 
 *     cdef _checkOkay(self):             # <<<<<<<<<<<<<<
 *         if self.model == NULL:
 *             raise RuntimeError("CPlex model not properly initialized!")
 */

static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel__checkOkay(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_checkOkay", 0);

  /* "pycpx/pyconcert.pyx":1462
 * 
 *     cdef _checkOkay(self):
 *         if self.model == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("CPlex model not properly initialized!")
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->model == NULL) != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":1463
 *     cdef _checkOkay(self):
 *         if self.model == NULL:
 *             raise RuntimeError("CPlex model not properly initialized!")             # <<<<<<<<<<<<<<
 * 
 *     def new(self, size = s_scalar, vtype = 'real', lb = None, ub = None, str name = None):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":1461
 *         self.verbosity = verbosity
 * 
 *     cdef _checkOkay(self):             # <<<<<<<<<<<<<<
 *         if self.model == NULL:
 *             raise RuntimeError("CPlex model not properly initialized!")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel._checkOkay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1465
 *             raise RuntimeError("CPlex model not properly initialized!")
 * 
 *     def new(self, size = s_scalar, vtype = 'real', lb = None, ub = None, str name = None):             # <<<<<<<<<<<<<<
 *         """
 *         Creates a new variable or set of variables for use in the
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_7new(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_6new[] = "\n        Creates a new variable or set of variables for use in the\n        model.\n        \n        **Variable Size**\n        \n        By default, a single scalar variable is returned.  A vector of\n        variables is created by specifying ``size = n``, or a\n        matrix-block of variables is created by specifying ``size =\n        (n,m)``, where ``n`` and ``m`` are variable sizes.  \n        \n        Both 1d and 2d variable blocks behave like a matrix-like\n        structure of size ``(n,m)``, with ``m`` being 1 for 1d blocks.\n        If `size` is given as a single number ``n``, a column matrix\n        of size ``(n,1)`` is created.  If size is given as a 2-tuple,\n        then a matrix expression of that shape is created.  Thus the\n        expression::\n\n          x = m.new(5)\n          m.constrain(A*x <= b)\n\n        performs a matrix multiply to evaluate ``A*x``.  This example\n        works if the number of rows in ``A`` is the same as the size\n        of ``b``, and ``A`` has 5 columns to match the 5 rows of\n        ``x``.\n        \n        When the values of a variable block are requested after\n        solving the model, variables created using the default scalar\n        value is returned as a single number, 1d variable blocks are\n        returned as 1d vectors, and 2d variable blocks are returned as\n        2d arrays.  \n\n        **Variable Types**\n\n        Variable types can be specified using ``vtype = <type>``.\n        Available types are are reals, integers, and boolean (0 or 1).\n        Understood parameters that can be passed as the `vtype`\n        parameter are:\n\n          Reals:    float, 'float', 'real', 'double', 'f', or 'd'.\n\n          Integers: int, long, 'int', 'integer', 'i'\n\n          Boolean:  bool, 'bool', 'binary', 'boolean', 'b'\n\n        Example 1::\n\n          >>> m = pycpx.CPlexModel()\n          >>> x = m.new(3, vtype=bool)\n          >>> m.constrain(x[0] + 2*x[1] + 4*x[2] <= 4.5)\n          >>> m.ma""ximize(x.sum())\n          2.0\n          >>> m[x]\n          array([ 1.,  1.,  0.])\n\n        Example 2::\n\n          >>> m = pycpx.CPlexModel()\n          >>> x = m.new(3, vtype=int, lb = 0)\n          >>> m.constrain(x[0] + 2*x[1] + 4*x[2] <= 4.5)\n          >>> m.maximize(x.sum())\n          4.0\n          >>> m[x]\n          array([ 4.,  0.,  0.])\n        \n\n        **Bounds**\n\n        Upper and lower bounds may be specified using `ub` or `lb`.\n        These bounds may be None (unbounded, default), a scalar value\n        (which bounds all variables in the block uniformly), a list of\n        values the same length as the variable block being requested\n        (1d only), or a numpy array of values the same size as the\n        variable block being requested (1d or 2d).  Individual None\n        values in the list or NaNs in the array indicate that\n        particular variable block is unbounded.\n\n        Example 1::\n\n          >>> import pycpx\n          >>> m = pycpx.CPlexModel()\n          >>> x = m.new(3, ub = [2,3,4])\n          >>> m.maximize(x.sum())\n          9.0\n          >>> m[x]\n          array([ 2.,  3.,  4.])\n\n        Example 2::\n\n          >>> m = pycpx.CPlexModel()\n          >>> x = m.new(3, ub = [2,None,4])\n          >>> z = m.new(ub = 10)\n          >>> m.constrain(x <= z)\n          >>> m.maximize(x.sum())\n          16.0\n          >>> m[x]\n          array([  2.,  10.,   4.])\n\n\n        **Variable Names**\n\n        Optionally, a name for the variable block or group can be\n        passed as, e.g. ``name = 'x'``.  This mostly helps with\n        printing and debugging, as this name is printed when the model\n        or specific constraints are printed.\n\n        Example 1::\n\n          >>> m = pycpx.CPlexModel()\n          >>> x = m.new(3, name = 'x')\n          >>> m.constrain(0 <= x[0] + 2*x[1] + 3*x[2] <= 4)\n          >>> print m\n          x[0][-inf..inf] \n            x[1][-inf..inf] \n            x[2][-inf..inf""] \n            0 <= x[0]  + 2 * x[1]  + 3 * x[2]  \n            x[0]  + 2 * x[1]  + 3 * x[2]  <= 4 \n  \n          >>> m.minimize(x.sum().abs())\n          0.0\n          >>> print m\n          minimize abs(x[0]  + x[1]  + x[2] ) such that\n            x[0][-inf..inf] \n            x[1][-inf..inf] \n            x[2][-inf..inf] \n            0 <= x[0]  + 2 * x[1]  + 3 * x[2]  \n            x[0]  + 2 * x[1]  + 3 * x[2]  <= 4 \n\n        If name is None or not given, then variables are named in the\n        format ``_<varnum>``, where `varnum` is the variable number in\n        order of request.  Thus the first set of variables is ``_1``,\n        the second set ``_2``, etc.\n        \n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_7new(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_vtype = 0;
  PyObject *__pyx_v_lb = 0;
  PyObject *__pyx_v_ub = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,&__pyx_n_s_vtype,&__pyx_n_s_lb,&__pyx_n_s_ub,&__pyx_n_s_name,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = __pyx_k__17;
    values[1] = ((PyObject *)__pyx_n_s_real);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vtype);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lb);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ub);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "new") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_size = values[0];
    __pyx_v_vtype = values[1];
    __pyx_v_lb = values[2];
    __pyx_v_ub = values[3];
    __pyx_v_name = ((PyObject*)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("new", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_6new(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), __pyx_v_size, __pyx_v_vtype, __pyx_v_lb, __pyx_v_ub, __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_6new(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_size, PyObject *__pyx_v_vtype, PyObject *__pyx_v_lb, PyObject *__pyx_v_ub, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_key = NULL;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_new_var = 0;
  CYTHON_UNUSED struct CPlexModelInterface::Status __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new", 0);
  __Pyx_INCREF(__pyx_v_name);

  /* "pycpx/pyconcert.pyx":1601
 *         """
 * 
 *         self._checkOkay()             # <<<<<<<<<<<<<<
 * 
 *         self.rv_number += 1
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkOkay(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1603
 *         self._checkOkay()
 * 
 *         self.rv_number += 1             # <<<<<<<<<<<<<<
 *         key = "%s-%s" % (id(self), self.rv_number)
 * 
 */
  __pyx_v_self->rv_number = (__pyx_v_self->rv_number + 1);

  /* "pycpx/pyconcert.pyx":1604
 * 
 *         self.rv_number += 1
 *         key = "%s-%s" % (id(self), self.rv_number)             # <<<<<<<<<<<<<<
 * 
 *         if name is None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->rv_number); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_key = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1606
 *         key = "%s-%s" % (id(self), self.rv_number)
 * 
 *         if name is None:             # <<<<<<<<<<<<<<
 *             name = "_%d" % self.rv_number
 * 
 */
  __pyx_t_4 = (__pyx_v_name == ((PyObject*)Py_None));
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "pycpx/pyconcert.pyx":1607
 * 
 *         if name is None:
 *             name = "_%d" % self.rv_number             # <<<<<<<<<<<<<<
 * 
 *         cdef CPlexExpression new_var = newVariableBlock(self, size, vtype, lb, ub, name, key)
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->rv_number); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_d_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_3))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF_SET(__pyx_v_name, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pycpx/pyconcert.pyx":1609
 *             name = "_%d" % self.rv_number
 * 
 *         cdef CPlexExpression new_var = newVariableBlock(self, size, vtype, lb, ub, name, key)             # <<<<<<<<<<<<<<
 *         self.variables.append(new_var)
 *         s = self.model.addVariables(new_var.data[0])
 */
  if (!(likely(PyString_CheckExact(__pyx_v_key))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_key)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newVariableBlock(__pyx_v_self, __pyx_v_size, __pyx_v_vtype, __pyx_v_lb, __pyx_v_ub, __pyx_v_name, ((PyObject*)__pyx_v_key))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_new_var = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pycpx/pyconcert.pyx":1610
 * 
 *         cdef CPlexExpression new_var = newVariableBlock(self, size, vtype, lb, ub, name, key)
 *         self.variables.append(new_var)             # <<<<<<<<<<<<<<
 *         s = self.model.addVariables(new_var.data[0])
 *         return new_var
 */
  if (unlikely(__pyx_v_self->variables == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_self->variables, ((PyObject *)__pyx_v_new_var)); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pycpx/pyconcert.pyx":1611
 *         cdef CPlexExpression new_var = newVariableBlock(self, size, vtype, lb, ub, name, key)
 *         self.variables.append(new_var)
 *         s = self.model.addVariables(new_var.data[0])             # <<<<<<<<<<<<<<
 *         return new_var
 * 
 */
  __pyx_v_s = __pyx_v_self->model->addVariables((__pyx_v_new_var->data[0]));

  /* "pycpx/pyconcert.pyx":1612
 *         self.variables.append(new_var)
 *         s = self.model.addVariables(new_var.data[0])
 *         return new_var             # <<<<<<<<<<<<<<
 * 
 *     cdef _checkVerbosity(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_var));
  __pyx_r = ((PyObject *)__pyx_v_new_var);
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":1465
 *             raise RuntimeError("CPlex model not properly initialized!")
 * 
 *     def new(self, size = s_scalar, vtype = 'real', lb = None, ub = None, str name = None):             # <<<<<<<<<<<<<<
 *         """
 *         Creates a new variable or set of variables for use in the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_var);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1614
 *         return new_var
 * 
 *     cdef _checkVerbosity(self):             # <<<<<<<<<<<<<<
 *         if self.verbosity == 0:
 *             env.setError(env.getNullStream())
 */

static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel__checkVerbosity(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_checkVerbosity", 0);

  /* "pycpx/pyconcert.pyx":1627
 *             env.setWarning(cout)
 *             env.setOut(env.getNullStream())
 *         elif self.verbosity == 3:             # <<<<<<<<<<<<<<
 *             env.setError(cerr)
 *             env.setWarning(cerr)
 */
  switch (__pyx_v_self->verbosity) {

    /* "pycpx/pyconcert.pyx":1615
 * 
 *     cdef _checkVerbosity(self):
 *         if self.verbosity == 0:             # <<<<<<<<<<<<<<
 *             env.setError(env.getNullStream())
 *             env.setWarning(env.getNullStream())
 */
    case 0:

    /* "pycpx/pyconcert.pyx":1616
 *     cdef _checkVerbosity(self):
 *         if self.verbosity == 0:
 *             env.setError(env.getNullStream())             # <<<<<<<<<<<<<<
 *             env.setWarning(env.getNullStream())
 *             env.setOut(env.getNullStream())
 */
    __pyx_v_5pycpx_9pyconcert_env.setError(__pyx_v_5pycpx_9pyconcert_env.getNullStream());

    /* "pycpx/pyconcert.pyx":1617
 *         if self.verbosity == 0:
 *             env.setError(env.getNullStream())
 *             env.setWarning(env.getNullStream())             # <<<<<<<<<<<<<<
 *             env.setOut(env.getNullStream())
 *         elif self.verbosity == 1:
 */
    __pyx_v_5pycpx_9pyconcert_env.setWarning(__pyx_v_5pycpx_9pyconcert_env.getNullStream());

    /* "pycpx/pyconcert.pyx":1618
 *             env.setError(env.getNullStream())
 *             env.setWarning(env.getNullStream())
 *             env.setOut(env.getNullStream())             # <<<<<<<<<<<<<<
 *         elif self.verbosity == 1:
 *             env.setError(cout)
 */
    __pyx_v_5pycpx_9pyconcert_env.setOut(__pyx_v_5pycpx_9pyconcert_env.getNullStream());
    break;

    /* "pycpx/pyconcert.pyx":1619
 *             env.setWarning(env.getNullStream())
 *             env.setOut(env.getNullStream())
 *         elif self.verbosity == 1:             # <<<<<<<<<<<<<<
 *             env.setError(cout)
 *             env.setWarning(env.getNullStream())
 */
    case 1:

    /* "pycpx/pyconcert.pyx":1620
 *             env.setOut(env.getNullStream())
 *         elif self.verbosity == 1:
 *             env.setError(cout)             # <<<<<<<<<<<<<<
 *             env.setWarning(env.getNullStream())
 *             env.setOut(env.getNullStream())
 */
    __pyx_v_5pycpx_9pyconcert_env.setError(cout);

    /* "pycpx/pyconcert.pyx":1621
 *         elif self.verbosity == 1:
 *             env.setError(cout)
 *             env.setWarning(env.getNullStream())             # <<<<<<<<<<<<<<
 *             env.setOut(env.getNullStream())
 *         elif self.verbosity == 2:
 */
    __pyx_v_5pycpx_9pyconcert_env.setWarning(__pyx_v_5pycpx_9pyconcert_env.getNullStream());

    /* "pycpx/pyconcert.pyx":1622
 *             env.setError(cout)
 *             env.setWarning(env.getNullStream())
 *             env.setOut(env.getNullStream())             # <<<<<<<<<<<<<<
 *         elif self.verbosity == 2:
 *             env.setError(cout)
 */
    __pyx_v_5pycpx_9pyconcert_env.setOut(__pyx_v_5pycpx_9pyconcert_env.getNullStream());
    break;

    /* "pycpx/pyconcert.pyx":1623
 *             env.setWarning(env.getNullStream())
 *             env.setOut(env.getNullStream())
 *         elif self.verbosity == 2:             # <<<<<<<<<<<<<<
 *             env.setError(cout)
 *             env.setWarning(cout)
 */
    case 2:

    /* "pycpx/pyconcert.pyx":1624
 *             env.setOut(env.getNullStream())
 *         elif self.verbosity == 2:
 *             env.setError(cout)             # <<<<<<<<<<<<<<
 *             env.setWarning(cout)
 *             env.setOut(env.getNullStream())
 */
    __pyx_v_5pycpx_9pyconcert_env.setError(cout);

    /* "pycpx/pyconcert.pyx":1625
 *         elif self.verbosity == 2:
 *             env.setError(cout)
 *             env.setWarning(cout)             # <<<<<<<<<<<<<<
 *             env.setOut(env.getNullStream())
 *         elif self.verbosity == 3:
 */
    __pyx_v_5pycpx_9pyconcert_env.setWarning(cout);

    /* "pycpx/pyconcert.pyx":1626
 *             env.setError(cout)
 *             env.setWarning(cout)
 *             env.setOut(env.getNullStream())             # <<<<<<<<<<<<<<
 *         elif self.verbosity == 3:
 *             env.setError(cerr)
 */
    __pyx_v_5pycpx_9pyconcert_env.setOut(__pyx_v_5pycpx_9pyconcert_env.getNullStream());
    break;

    /* "pycpx/pyconcert.pyx":1627
 *             env.setWarning(cout)
 *             env.setOut(env.getNullStream())
 *         elif self.verbosity == 3:             # <<<<<<<<<<<<<<
 *             env.setError(cerr)
 *             env.setWarning(cerr)
 */
    case 3:

    /* "pycpx/pyconcert.pyx":1628
 *             env.setOut(env.getNullStream())
 *         elif self.verbosity == 3:
 *             env.setError(cerr)             # <<<<<<<<<<<<<<
 *             env.setWarning(cerr)
 *             env.setOut(cout)
 */
    __pyx_v_5pycpx_9pyconcert_env.setError(cerr);

    /* "pycpx/pyconcert.pyx":1629
 *         elif self.verbosity == 3:
 *             env.setError(cerr)
 *             env.setWarning(cerr)             # <<<<<<<<<<<<<<
 *             env.setOut(cout)
 *         else:
 */
    __pyx_v_5pycpx_9pyconcert_env.setWarning(cerr);

    /* "pycpx/pyconcert.pyx":1630
 *             env.setError(cerr)
 *             env.setWarning(cerr)
 *             env.setOut(cout)             # <<<<<<<<<<<<<<
 *         else:
 *             assert False
 */
    __pyx_v_5pycpx_9pyconcert_env.setOut(cout);
    break;
    default:

    /* "pycpx/pyconcert.pyx":1632
 *             env.setOut(cout)
 *         else:
 *             assert False             # <<<<<<<<<<<<<<
 * 
 *     cdef _getKeyStringId(self, str key, MetaData md):
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!0)) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif
    break;
  }

  /* "pycpx/pyconcert.pyx":1614
 *         return new_var
 * 
 *     cdef _checkVerbosity(self):             # <<<<<<<<<<<<<<
 *         if self.verbosity == 0:
 *             env.setError(env.getNullStream())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel._checkVerbosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1634
 *             assert False
 * 
 *     cdef _getKeyStringId(self, str key, MetaData md):             # <<<<<<<<<<<<<<
 *         # A mapping to keep things unique
 * 
 */

static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel__getKeyStringId(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_key, MetaData __pyx_v_md) {
  PyObject *__pyx_v_query_key = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getKeyStringId", 0);

  /* "pycpx/pyconcert.pyx":1639
 *         cdef str query_key = ("%s-%d-%d-%d-%d-%d"
 *                               % (key,
 *                                  md.shape(0), md.shape(1),             # <<<<<<<<<<<<<<
 *                                  md.stride(0), md.stride(1),
 *                                  md.offset()))
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_md.shape(0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_md.shape(1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pycpx/pyconcert.pyx":1640
 *                               % (key,
 *                                  md.shape(0), md.shape(1),
 *                                  md.stride(0), md.stride(1),             # <<<<<<<<<<<<<<
 *                                  md.offset()))
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_md.stride(0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_md.stride(1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pycpx/pyconcert.pyx":1641
 *                                  md.shape(0), md.shape(1),
 *                                  md.stride(0), md.stride(1),
 *                                  md.offset()))             # <<<<<<<<<<<<<<
 * 
 *         # Map it through a dictionary so all the id's are unique and equal
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_md.offset()); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "pycpx/pyconcert.pyx":1638
 * 
 *         cdef str query_key = ("%s-%d-%d-%d-%d-%d"
 *                               % (key,             # <<<<<<<<<<<<<<
 *                                  md.shape(0), md.shape(1),
 *                                  md.stride(0), md.stride(1),
 */
  __pyx_t_6 = PyTuple_New(6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_key);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_key);
  __Pyx_GIVEREF(__pyx_v_key);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_s_d_d_d_d_d, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_5))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_5)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_query_key = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pycpx/pyconcert.pyx":1644
 * 
 *         # Map it through a dictionary so all the id's are unique and equal
 *         if query_key in self.key_strings:             # <<<<<<<<<<<<<<
 *             return id(self.key_strings[query_key])
 *         else:
 */
  if (unlikely(__pyx_v_self->key_strings == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_7 = (__Pyx_PyDict_Contains(__pyx_v_query_key, __pyx_v_self->key_strings, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "pycpx/pyconcert.pyx":1645
 *         # Map it through a dictionary so all the id's are unique and equal
 *         if query_key in self.key_strings:
 *             return id(self.key_strings[query_key])             # <<<<<<<<<<<<<<
 *         else:
 *             self.key_strings[query_key] = query_key
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->key_strings == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->key_strings, __pyx_v_query_key); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1645; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pycpx/pyconcert.pyx":1647
 *             return id(self.key_strings[query_key])
 *         else:
 *             self.key_strings[query_key] = query_key             # <<<<<<<<<<<<<<
 *             return id(query_key)
 * 
 */
    if (unlikely(__pyx_v_self->key_strings == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->key_strings, __pyx_v_query_key, __pyx_v_query_key) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pycpx/pyconcert.pyx":1648
 *         else:
 *             self.key_strings[query_key] = query_key
 *             return id(query_key)             # <<<<<<<<<<<<<<
 * 
 *     cdef _checkConstraints(self, tuple constraints):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_query_key);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_query_key);
    __Pyx_GIVEREF(__pyx_v_query_key);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "pycpx/pyconcert.pyx":1634
 *             assert False
 * 
 *     cdef _getKeyStringId(self, str key, MetaData md):             # <<<<<<<<<<<<<<
 *         # A mapping to keep things unique
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel._getKeyStringId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_query_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1650
 *             return id(query_key)
 * 
 *     cdef _checkConstraints(self, tuple constraints):             # <<<<<<<<<<<<<<
 * 
 *         cdef size_t i
 */

static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel__checkConstraints(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_constraints) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_checkConstraints", 0);

  /* "pycpx/pyconcert.pyx":1653
 * 
 *         cdef size_t i
 *         for i, c in enumerate(constraints):             # <<<<<<<<<<<<<<
 *             if type(c) is list:
 *                 self._checkConstraints(tuple(c))
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_v_constraints; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_v_i = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "pycpx/pyconcert.pyx":1654
 *         cdef size_t i
 *         for i, c in enumerate(constraints):
 *             if type(c) is list:             # <<<<<<<<<<<<<<
 *                 self._checkConstraints(tuple(c))
 * 
 */
    __pyx_t_5 = (((PyObject *)Py_TYPE(__pyx_v_c)) == ((PyObject *)((PyObject*)(&PyList_Type))));
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":1655
 *         for i, c in enumerate(constraints):
 *             if type(c) is list:
 *                 self._checkConstraints(tuple(c))             # <<<<<<<<<<<<<<
 * 
 *             elif type(c) is tuple:
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkConstraints(__pyx_v_self, ((PyObject*)__pyx_t_7)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L5;
    }

    /* "pycpx/pyconcert.pyx":1657
 *                 self._checkConstraints(tuple(c))
 * 
 *             elif type(c) is tuple:             # <<<<<<<<<<<<<<
 *                 self._checkConstraints(<tuple>c)
 * 
 */
    __pyx_t_6 = (((PyObject *)Py_TYPE(__pyx_v_c)) == ((PyObject *)((PyObject*)(&PyTuple_Type))));
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":1658
 * 
 *             elif type(c) is tuple:
 *                 self._checkConstraints(<tuple>c)             # <<<<<<<<<<<<<<
 * 
 *             elif type(c) is not CPlexConstraint:
 */
      __pyx_t_4 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkConstraints(__pyx_v_self, ((PyObject*)__pyx_v_c)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L5;
    }

    /* "pycpx/pyconcert.pyx":1660
 *                 self._checkConstraints(<tuple>c)
 * 
 *             elif type(c) is not CPlexConstraint:             # <<<<<<<<<<<<<<
 *                 raise TypeError("Expected constraint in argument %d, got %s."
 *                                 % (i + 1, repr(type(c))))
 */
    __pyx_t_5 = (((PyObject *)Py_TYPE(__pyx_v_c)) != ((PyObject *)((PyObject*)__pyx_ptype_5pycpx_9pyconcert_CPlexConstraint)));
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":1662
 *             elif type(c) is not CPlexConstraint:
 *                 raise TypeError("Expected constraint in argument %d, got %s."
 *                                 % (i + 1, repr(type(c))))             # <<<<<<<<<<<<<<
 * 
 *             elif (<CPlexConstraint>c).model is not self:
 */
      __pyx_t_4 = __Pyx_PyInt_FromSize_t((__pyx_v_i + 1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyObject_Repr(((PyObject *)Py_TYPE(__pyx_v_c))); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_4 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Expected_constraint_in_argument, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "pycpx/pyconcert.pyx":1661
 * 
 *             elif type(c) is not CPlexConstraint:
 *                 raise TypeError("Expected constraint in argument %d, got %s."             # <<<<<<<<<<<<<<
 *                                 % (i + 1, repr(type(c))))
 * 
 */
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pycpx/pyconcert.pyx":1664
 *                                 % (i + 1, repr(type(c))))
 * 
 *             elif (<CPlexConstraint>c).model is not self:             # <<<<<<<<<<<<<<
 *                 raise CPlexException("Constraint %d not from this model." % (i + 1))
 * 
 */
    __pyx_t_6 = (((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_v_c)->model != __pyx_v_self);
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":1665
 * 
 *             elif (<CPlexConstraint>c).model is not self:
 *                 raise CPlexException("Constraint %d not from this model." % (i + 1))             # <<<<<<<<<<<<<<
 * 
 *     cdef _addConstraint(self, CPlexConstraint c):
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_FromSize_t((__pyx_v_i + 1)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Constraint_d_not_from_this_model, __pyx_t_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":1650
 *             return id(query_key)
 * 
 *     cdef _checkConstraints(self, tuple constraints):             # <<<<<<<<<<<<<<
 * 
 *         cdef size_t i
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel._checkConstraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1667
 *                 raise CPlexException("Constraint %d not from this model." % (i + 1))
 * 
 *     cdef _addConstraint(self, CPlexConstraint c):             # <<<<<<<<<<<<<<
 *         cdef Status s
 *         s = self.model.addConstraint(c.data[0])
 */

static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel__addConstraint(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_c) {
  struct CPlexModelInterface::Status __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_addConstraint", 0);

  /* "pycpx/pyconcert.pyx":1669
 *     cdef _addConstraint(self, CPlexConstraint c):
 *         cdef Status s
 *         s = self.model.addConstraint(c.data[0])             # <<<<<<<<<<<<<<
 *         if s.error_code != 0:
 *             raise CPlexException("Error adding constraint: %s" % s.message)
 */
  __pyx_v_s = __pyx_v_self->model->addConstraint((__pyx_v_c->data[0]));

  /* "pycpx/pyconcert.pyx":1670
 *         cdef Status s
 *         s = self.model.addConstraint(c.data[0])
 *         if s.error_code != 0:             # <<<<<<<<<<<<<<
 *             raise CPlexException("Error adding constraint: %s" % s.message)
 * 
 */
  __pyx_t_1 = ((__pyx_v_s.error_code != 0) != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":1671
 *         s = self.model.addConstraint(c.data[0])
 *         if s.error_code != 0:
 *             raise CPlexException("Error adding constraint: %s" % s.message)             # <<<<<<<<<<<<<<
 * 
 *     cdef _addConstraints(self, tuple constraints):
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_s.message); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Error_adding_constraint_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":1667
 *                 raise CPlexException("Constraint %d not from this model." % (i + 1))
 * 
 *     cdef _addConstraint(self, CPlexConstraint c):             # <<<<<<<<<<<<<<
 *         cdef Status s
 *         s = self.model.addConstraint(c.data[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel._addConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1673
 *             raise CPlexException("Error adding constraint: %s" % s.message)
 * 
 *     cdef _addConstraints(self, tuple constraints):             # <<<<<<<<<<<<<<
 * 
 *         cdef CPlexConstraint c, c2
 */

static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel__addConstraints(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_constraints) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_c = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_c2 = 0;
  PyObject *__pyx_v_ce = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_addConstraints", 0);

  /* "pycpx/pyconcert.pyx":1677
 *         cdef CPlexConstraint c, c2
 * 
 *         for ce in constraints:             # <<<<<<<<<<<<<<
 *             if type(ce) is tuple:
 *                 self._addConstraints(<tuple>ce)
 */
  if (unlikely(__pyx_v_constraints == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_constraints; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_ce, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pycpx/pyconcert.pyx":1678
 * 
 *         for ce in constraints:
 *             if type(ce) is tuple:             # <<<<<<<<<<<<<<
 *                 self._addConstraints(<tuple>ce)
 *             elif type(ce) is list:
 */
    __pyx_t_4 = (((PyObject *)Py_TYPE(__pyx_v_ce)) == ((PyObject *)((PyObject*)(&PyTuple_Type))));
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":1679
 *         for ce in constraints:
 *             if type(ce) is tuple:
 *                 self._addConstraints(<tuple>ce)             # <<<<<<<<<<<<<<
 *             elif type(ce) is list:
 *                 self._addConstraints(tuple(ce))
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_addConstraints(__pyx_v_self, ((PyObject*)__pyx_v_ce)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L5;
    }

    /* "pycpx/pyconcert.pyx":1680
 *             if type(ce) is tuple:
 *                 self._addConstraints(<tuple>ce)
 *             elif type(ce) is list:             # <<<<<<<<<<<<<<
 *                 self._addConstraints(tuple(ce))
 *             elif ce is True:
 */
    __pyx_t_5 = (((PyObject *)Py_TYPE(__pyx_v_ce)) == ((PyObject *)((PyObject*)(&PyList_Type))));
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":1681
 *                 self._addConstraints(<tuple>ce)
 *             elif type(ce) is list:
 *                 self._addConstraints(tuple(ce))             # <<<<<<<<<<<<<<
 *             elif ce is True:
 *                 # to handle corner case of (x == x), which gets
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_ce);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_ce);
      __Pyx_GIVEREF(__pyx_v_ce);
      __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_addConstraints(__pyx_v_self, ((PyObject*)__pyx_t_6)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L5;
    }

    /* "pycpx/pyconcert.pyx":1682
 *             elif type(ce) is list:
 *                 self._addConstraints(tuple(ce))
 *             elif ce is True:             # <<<<<<<<<<<<<<
 *                 # to handle corner case of (x == x), which gets
 *                 # compared by id.
 */
    __pyx_t_4 = (__pyx_v_ce == Py_True);
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":1686
 *                 # compared by id.
 * 
 *                 continue             # <<<<<<<<<<<<<<
 *             else:
 *                 c2 = c = ce
 */
      goto __pyx_L3_continue;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":1688
 *                 continue
 *             else:
 *                 c2 = c = ce             # <<<<<<<<<<<<<<
 * 
 *                 while c2.hooked_constraint is not None:
 */
      if (!(likely(((__pyx_v_ce) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ce, __pyx_ptype_5pycpx_9pyconcert_CPlexConstraint))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_INCREF(__pyx_v_ce);
      __Pyx_XDECREF_SET(__pyx_v_c2, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_v_ce));
      if (!(likely(((__pyx_v_ce) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ce, __pyx_ptype_5pycpx_9pyconcert_CPlexConstraint))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_INCREF(__pyx_v_ce);
      __Pyx_XDECREF_SET(__pyx_v_c, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_v_ce));

      /* "pycpx/pyconcert.pyx":1690
 *                 c2 = c = ce
 * 
 *                 while c2.hooked_constraint is not None:             # <<<<<<<<<<<<<<
 *                     c2 = c2.hooked_constraint
 *                     self._addConstraint(c2)
 */
      while (1) {
        __pyx_t_5 = (((PyObject *)__pyx_v_c2->hooked_constraint) != Py_None);
        __pyx_t_4 = (__pyx_t_5 != 0);
        if (!__pyx_t_4) break;

        /* "pycpx/pyconcert.pyx":1691
 * 
 *                 while c2.hooked_constraint is not None:
 *                     c2 = c2.hooked_constraint             # <<<<<<<<<<<<<<
 *                     self._addConstraint(c2)
 * 
 */
        __pyx_t_3 = ((PyObject *)__pyx_v_c2->hooked_constraint);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_c2, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "pycpx/pyconcert.pyx":1692
 *                 while c2.hooked_constraint is not None:
 *                     c2 = c2.hooked_constraint
 *                     self._addConstraint(c2)             # <<<<<<<<<<<<<<
 * 
 *                 self._addConstraint(c)
 */
        __pyx_t_3 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_addConstraint(__pyx_v_self, __pyx_v_c2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }

      /* "pycpx/pyconcert.pyx":1694
 *                     self._addConstraint(c2)
 * 
 *                 self._addConstraint(c)             # <<<<<<<<<<<<<<
 * 
 *     def constrain(self, *constraints):
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_addConstraint(__pyx_v_self, __pyx_v_c); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L5:;
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1673
 *             raise CPlexException("Error adding constraint: %s" % s.message)
 * 
 *     cdef _addConstraints(self, tuple constraints):             # <<<<<<<<<<<<<<
 * 
 *         cdef CPlexConstraint c, c2
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel._addConstraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_c2);
  __Pyx_XDECREF(__pyx_v_ce);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1696
 *                 self._addConstraint(c)
 * 
 *     def constrain(self, *constraints):             # <<<<<<<<<<<<<<
 *         """
 *         Add a constraint or set of constraints to the model.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_9constrain(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_8constrain[] = "\n        Add a constraint or set of constraints to the model.  \n\n        Constraints are created by relating two expressions with an\n        inequality or equality.  Expressions can be numerical arrays,\n        variable blocks, or combinations of these.  For example, if\n        ``A`` is a numerical matrix, ``x`` is a column vector of\n        variables, and ``b`` is a numerical vector, then::\n\n          m.constrain(A*x <= b)\n\n        constrains ``A*x <= b``, provided the dimensions properly\n        match up.\n\n        This function accepts lists of constraints, or multiple\n        constraints as arguments.  \n\n\n        **Expressions**\n\n        Expressions can be variable blocks, numerical expressions, or\n        any allowable combination thereof.\n\n        A variable block is a matrix of variables to optimize\n        (possibly consisting of a single variable).  These are created\n        using :meth:`new`.  A 1x1 variable block is treated as a\n        scalar.  A numerical expression can be a numpy array or matrix\n        or a single scalar value.  These may be combined in any\n        allowable way, e.g. ``3*x - 4*y + 5`` is perfectly fine; if\n        ``x`` is 1x1 and ``y`` is 10x1, the resulting expression will\n        be 10x1, with ``x`` expanded to match the proper dimensions of\n        ``y``.\n\n        Expressions can also be treated as regular python variables.\n        For example::\n\n          my_expr = A*x + B*y - 5\n          m.constrain(my_expr <= 5)\n\n        is perfectly valid.\n\n\n        **Constraint Behavior**\n\n        Constraints are formed by combining two expressions with one\n        of the common python operators: ``==``, ``!=``, ``<``, ``<=``,\n        ``>``, or ``>=``.  An example is ``A*x <= b``, described\n        above.\n\n        As with other operators, scalar values (possibly 1x1\n        expressions) are expanded out to match an interaction\n        expression.  For example, ``A*x <= 5`` is valid regardless"" of\n        the dimensions of ``A`` and ``x``, provided ``A*x`` makes\n        sense.\n        \n        It is also possible to chain constraints together with\n        multiple inequalities based off common expressions. For\n        example::\n\n          m.constrain(-t <= A*x <= t)\n\n        constrains ``A*x`` to be in the interval ``[-t, t]``.  \n\n        Finally, constraint expressions can themselves be held using\n        python variables.  For example::\n\n          my_cstr1 = (A*x <= b)\n          my_cstr2 = (-t <= A*y <= t)\n \n          m.constrain(my_cstr1)\n          m.constrain(my_cstr2)\n\n        is perfectly valid.  This can be useful if these constraints\n        need to be removed from the model later on using\n        :meth:`removeConstraint`.  \n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_9constrain(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_constraints = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("constrain (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "constrain", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_constraints = __pyx_args;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_8constrain(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), __pyx_v_constraints);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_constraints);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_8constrain(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_constraints) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("constrain", 0);

  /* "pycpx/pyconcert.pyx":1774
 *         """
 * 
 *         self._checkOkay()             # <<<<<<<<<<<<<<
 * 
 *         # First check types
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkOkay(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1777
 * 
 *         # First check types
 *         self._checkConstraints(constraints)             # <<<<<<<<<<<<<<
 *         self._addConstraints(constraints)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkConstraints(__pyx_v_self, __pyx_v_constraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1778
 *         # First check types
 *         self._checkConstraints(constraints)
 *         self._addConstraints(constraints)             # <<<<<<<<<<<<<<
 * 
 *     # Removing constraints if need be
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_addConstraints(__pyx_v_self, __pyx_v_constraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1696
 *                 self._addConstraint(c)
 * 
 *     def constrain(self, *constraints):             # <<<<<<<<<<<<<<
 *         """
 *         Add a constraint or set of constraints to the model.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.constrain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1782
 *     # Removing constraints if need be
 * 
 *     cdef _removeConstraint(self, CPlexConstraint c):             # <<<<<<<<<<<<<<
 *         cdef Status s
 *         s = self.model.removeConstraint(c.data[0])
 */

static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel__removeConstraint(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_c) {
  struct CPlexModelInterface::Status __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_removeConstraint", 0);

  /* "pycpx/pyconcert.pyx":1784
 *     cdef _removeConstraint(self, CPlexConstraint c):
 *         cdef Status s
 *         s = self.model.removeConstraint(c.data[0])             # <<<<<<<<<<<<<<
 *         if s.error_code != 0:
 *             raise CPlexException("Error removing constraint: %s" % s.message)
 */
  __pyx_v_s = __pyx_v_self->model->removeConstraint((__pyx_v_c->data[0]));

  /* "pycpx/pyconcert.pyx":1785
 *         cdef Status s
 *         s = self.model.removeConstraint(c.data[0])
 *         if s.error_code != 0:             # <<<<<<<<<<<<<<
 *             raise CPlexException("Error removing constraint: %s" % s.message)
 * 
 */
  __pyx_t_1 = ((__pyx_v_s.error_code != 0) != 0);
  if (__pyx_t_1) {

    /* "pycpx/pyconcert.pyx":1786
 *         s = self.model.removeConstraint(c.data[0])
 *         if s.error_code != 0:
 *             raise CPlexException("Error removing constraint: %s" % s.message)             # <<<<<<<<<<<<<<
 * 
 *     cdef _removeConstraints(self, tuple constraints):
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_s.message); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Error_removing_constraint_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":1782
 *     # Removing constraints if need be
 * 
 *     cdef _removeConstraint(self, CPlexConstraint c):             # <<<<<<<<<<<<<<
 *         cdef Status s
 *         s = self.model.removeConstraint(c.data[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel._removeConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1788
 *             raise CPlexException("Error removing constraint: %s" % s.message)
 * 
 *     cdef _removeConstraints(self, tuple constraints):             # <<<<<<<<<<<<<<
 * 
 *         cdef CPlexConstraint c, c2
 */

static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel__removeConstraints(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_constraints) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_c = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *__pyx_v_c2 = 0;
  PyObject *__pyx_v_ce = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_removeConstraints", 0);

  /* "pycpx/pyconcert.pyx":1792
 *         cdef CPlexConstraint c, c2
 * 
 *         for ce in constraints:             # <<<<<<<<<<<<<<
 *             if type(ce) is list:
 *                 self._addConstraints(tuple(ce))
 */
  if (unlikely(__pyx_v_constraints == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_constraints; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_ce, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pycpx/pyconcert.pyx":1793
 * 
 *         for ce in constraints:
 *             if type(ce) is list:             # <<<<<<<<<<<<<<
 *                 self._addConstraints(tuple(ce))
 *             if type(ce) is tuple:
 */
    __pyx_t_4 = (((PyObject *)Py_TYPE(__pyx_v_ce)) == ((PyObject *)((PyObject*)(&PyList_Type))));
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":1794
 *         for ce in constraints:
 *             if type(ce) is list:
 *                 self._addConstraints(tuple(ce))             # <<<<<<<<<<<<<<
 *             if type(ce) is tuple:
 *                 self._addConstraints(<tuple>ce)
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_ce);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_ce);
      __Pyx_GIVEREF(__pyx_v_ce);
      __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_addConstraints(__pyx_v_self, ((PyObject*)__pyx_t_6)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "pycpx/pyconcert.pyx":1795
 *             if type(ce) is list:
 *                 self._addConstraints(tuple(ce))
 *             if type(ce) is tuple:             # <<<<<<<<<<<<<<
 *                 self._addConstraints(<tuple>ce)
 *             elif ce is True:
 */
    __pyx_t_5 = (((PyObject *)Py_TYPE(__pyx_v_ce)) == ((PyObject *)((PyObject*)(&PyTuple_Type))));
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":1796
 *                 self._addConstraints(tuple(ce))
 *             if type(ce) is tuple:
 *                 self._addConstraints(<tuple>ce)             # <<<<<<<<<<<<<<
 *             elif ce is True:
 *                 # to handle corner case of (x == x), which gets
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_addConstraints(__pyx_v_self, ((PyObject*)__pyx_v_ce)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6;
    }

    /* "pycpx/pyconcert.pyx":1797
 *             if type(ce) is tuple:
 *                 self._addConstraints(<tuple>ce)
 *             elif ce is True:             # <<<<<<<<<<<<<<
 *                 # to handle corner case of (x == x), which gets
 *                 # compared by id.
 */
    __pyx_t_4 = (__pyx_v_ce == Py_True);
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":1801
 *                 # compared by id.
 * 
 *                 continue             # <<<<<<<<<<<<<<
 *             else:
 *                 c2 = c = ce
 */
      goto __pyx_L3_continue;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":1803
 *                 continue
 *             else:
 *                 c2 = c = ce             # <<<<<<<<<<<<<<
 * 
 *                 while c2.hooked_constraint is not None:
 */
      if (!(likely(((__pyx_v_ce) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ce, __pyx_ptype_5pycpx_9pyconcert_CPlexConstraint))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_INCREF(__pyx_v_ce);
      __Pyx_XDECREF_SET(__pyx_v_c2, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_v_ce));
      if (!(likely(((__pyx_v_ce) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ce, __pyx_ptype_5pycpx_9pyconcert_CPlexConstraint))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_INCREF(__pyx_v_ce);
      __Pyx_XDECREF_SET(__pyx_v_c, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_v_ce));

      /* "pycpx/pyconcert.pyx":1805
 *                 c2 = c = ce
 * 
 *                 while c2.hooked_constraint is not None:             # <<<<<<<<<<<<<<
 *                     c2 = c2.hooked_constraint
 *                     self._removeConstraint(c2)
 */
      while (1) {
        __pyx_t_5 = (((PyObject *)__pyx_v_c2->hooked_constraint) != Py_None);
        __pyx_t_4 = (__pyx_t_5 != 0);
        if (!__pyx_t_4) break;

        /* "pycpx/pyconcert.pyx":1806
 * 
 *                 while c2.hooked_constraint is not None:
 *                     c2 = c2.hooked_constraint             # <<<<<<<<<<<<<<
 *                     self._removeConstraint(c2)
 * 
 */
        __pyx_t_3 = ((PyObject *)__pyx_v_c2->hooked_constraint);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_c2, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "pycpx/pyconcert.pyx":1807
 *                 while c2.hooked_constraint is not None:
 *                     c2 = c2.hooked_constraint
 *                     self._removeConstraint(c2)             # <<<<<<<<<<<<<<
 * 
 *                 self._removeConstraint(c)
 */
        __pyx_t_3 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_removeConstraint(__pyx_v_self, __pyx_v_c2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }

      /* "pycpx/pyconcert.pyx":1809
 *                     self._removeConstraint(c2)
 * 
 *                 self._removeConstraint(c)             # <<<<<<<<<<<<<<
 * 
 *     def removeConstraint(self, *constraints):
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_removeConstraint(__pyx_v_self, __pyx_v_c); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L6:;
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1788
 *             raise CPlexException("Error removing constraint: %s" % s.message)
 * 
 *     cdef _removeConstraints(self, tuple constraints):             # <<<<<<<<<<<<<<
 * 
 *         cdef CPlexConstraint c, c2
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel._removeConstraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_c2);
  __Pyx_XDECREF(__pyx_v_ce);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1811
 *                 self._removeConstraint(c)
 * 
 *     def removeConstraint(self, *constraints):             # <<<<<<<<<<<<<<
 *         """
 *         Removes one or more constraints associated with the model.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_11removeConstraint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_10removeConstraint[] = "\n        Removes one or more constraints associated with the model.\n        The constraints must have been added previously by\n        :meth:`constrain()`.\n\n        Example 1::\n\n          >>> from pycpx import CPlexModel\n          >>> m = CPlexModel()\n          >>> x = m.new()\n          >>> y = m.new()\n          >>> m.constrain(0 <= x <= y <= 5)\n          >>> c = (x <= 2)\n          >>> m.constrain(c)\n          >>> m.maximize(x + y)\n          7.0\n          >>> m.removeConstraint(c)\n          >>> m.maximize(x + y)\n          10.0\n\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_11removeConstraint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_constraints = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeConstraint (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "removeConstraint", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_constraints = __pyx_args;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_10removeConstraint(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), __pyx_v_constraints);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_constraints);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_10removeConstraint(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_constraints) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeConstraint", 0);

  /* "pycpx/pyconcert.pyx":1834
 *         """
 * 
 *         self._checkOkay()             # <<<<<<<<<<<<<<
 * 
 *         self._checkConstraints(constraints)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkOkay(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1836
 *         self._checkOkay()
 * 
 *         self._checkConstraints(constraints)             # <<<<<<<<<<<<<<
 *         self._removeConstraints(constraints)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkConstraints(__pyx_v_self, __pyx_v_constraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1837
 * 
 *         self._checkConstraints(constraints)
 *         self._removeConstraints(constraints)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_removeConstraints(__pyx_v_self, __pyx_v_constraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":1811
 *                 self._removeConstraint(c)
 * 
 *     def removeConstraint(self, *constraints):             # <<<<<<<<<<<<<<
 *         """
 *         Removes one or more constraints associated with the model.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.removeConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":1840
 * 
 * 
 *     cpdef solve(self, objective, maximize = None, minimize = None,             # <<<<<<<<<<<<<<
 *               bint recycle_variables = False, bint recycle_basis = True,
 *               dict starting_dict = {}, str basis_file = None,
 */

static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_13solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel_solve(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_objective, int __pyx_skip_dispatch, struct __pyx_opt_args_5pycpx_9pyconcert_10CPlexModel_solve *__pyx_optional_args) {
  PyObject *__pyx_v_maximize = ((PyObject *)Py_None);
  PyObject *__pyx_v_minimize = ((PyObject *)Py_None);

  /* "pycpx/pyconcert.pyx":1841
 * 
 *     cpdef solve(self, objective, maximize = None, minimize = None,
 *               bint recycle_variables = False, bint recycle_basis = True,             # <<<<<<<<<<<<<<
 *               dict starting_dict = {}, str basis_file = None,
 *               algorithm = "auto", max_threads = None, relative_gap = None,
 */
  int __pyx_v_recycle_variables = ((int)0);
  int __pyx_v_recycle_basis = ((int)1);
  PyObject *__pyx_v_starting_dict = __pyx_k__18;

  /* "pycpx/pyconcert.pyx":1842
 *     cpdef solve(self, objective, maximize = None, minimize = None,
 *               bint recycle_variables = False, bint recycle_basis = True,
 *               dict starting_dict = {}, str basis_file = None,             # <<<<<<<<<<<<<<
 *               algorithm = "auto", max_threads = None, relative_gap = None,
 *               emphasis = None, time_limit = None, tree_limit = None,
 */
  PyObject *__pyx_v_basis_file = ((PyObject*)Py_None);
  PyObject *__pyx_v_algorithm = ((PyObject *)__pyx_n_s_auto);

  /* "pycpx/pyconcert.pyx":1843
 *               bint recycle_variables = False, bint recycle_basis = True,
 *               dict starting_dict = {}, str basis_file = None,
 *               algorithm = "auto", max_threads = None, relative_gap = None,             # <<<<<<<<<<<<<<
 *               emphasis = None, time_limit = None, tree_limit = None,
 *               variable_select = None):
 */
  PyObject *__pyx_v_max_threads = ((PyObject *)Py_None);
  PyObject *__pyx_v_relative_gap = ((PyObject *)Py_None);

  /* "pycpx/pyconcert.pyx":1844
 *               dict starting_dict = {}, str basis_file = None,
 *               algorithm = "auto", max_threads = None, relative_gap = None,
 *               emphasis = None, time_limit = None, tree_limit = None,             # <<<<<<<<<<<<<<
 *               variable_select = None):
 *         """
 */
  PyObject *__pyx_v_emphasis = ((PyObject *)Py_None);
  PyObject *__pyx_v_time_limit = ((PyObject *)Py_None);
  PyObject *__pyx_v_tree_limit = ((PyObject *)Py_None);

  /* "pycpx/pyconcert.pyx":1845
 *               algorithm = "auto", max_threads = None, relative_gap = None,
 *               emphasis = None, time_limit = None, tree_limit = None,
 *               variable_select = None):             # <<<<<<<<<<<<<<
 *         """
 *         Solves the current model trying to maximize (default) or
 */
  PyObject *__pyx_v_variable_select = ((PyObject *)Py_None);
  struct CPlexModelInterface::Status __pyx_v_s;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_var = 0;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_obj = 0;
  int __pyx_v__maximize;
  int __pyx_v__minimize;
  PyObject *__pyx_v_recycle_variable_values = 0;
  PyObject *__pyx_v_tmp_basis_file_name = 0;
  CYTHON_UNUSED PyObject *__pyx_v_tmp_basis_file = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_v_X = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  char *__pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  double __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *__pyx_t_17 = NULL;
  Py_ssize_t __pyx_t_18;
  int __pyx_t_19;
  char const *__pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_maximize = __pyx_optional_args->maximize;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_minimize = __pyx_optional_args->minimize;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_recycle_variables = __pyx_optional_args->recycle_variables;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_recycle_basis = __pyx_optional_args->recycle_basis;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_starting_dict = __pyx_optional_args->starting_dict;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_basis_file = __pyx_optional_args->basis_file;
                if (__pyx_optional_args->__pyx_n > 6) {
                  __pyx_v_algorithm = __pyx_optional_args->algorithm;
                  if (__pyx_optional_args->__pyx_n > 7) {
                    __pyx_v_max_threads = __pyx_optional_args->max_threads;
                    if (__pyx_optional_args->__pyx_n > 8) {
                      __pyx_v_relative_gap = __pyx_optional_args->relative_gap;
                      if (__pyx_optional_args->__pyx_n > 9) {
                        __pyx_v_emphasis = __pyx_optional_args->emphasis;
                        if (__pyx_optional_args->__pyx_n > 10) {
                          __pyx_v_time_limit = __pyx_optional_args->time_limit;
                          if (__pyx_optional_args->__pyx_n > 11) {
                            __pyx_v_tree_limit = __pyx_optional_args->tree_limit;
                            if (__pyx_optional_args->__pyx_n > 12) {
                              __pyx_v_variable_select = __pyx_optional_args->variable_select;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  /* "pycpx/pyconcert.pyx":1840
 * 
 * 
 *     cpdef solve(self, objective, maximize = None, minimize = None,             # <<<<<<<<<<<<<<
 *               bint recycle_variables = False, bint recycle_basis = True,
 *               dict starting_dict = {}, str basis_file = None,
 */
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_solve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_13solve)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_recycle_variables); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_recycle_basis); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(14); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_objective);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_objective);
      __Pyx_GIVEREF(__pyx_v_objective);
      __Pyx_INCREF(__pyx_v_maximize);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_maximize);
      __Pyx_GIVEREF(__pyx_v_maximize);
      __Pyx_INCREF(__pyx_v_minimize);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_minimize);
      __Pyx_GIVEREF(__pyx_v_minimize);
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_starting_dict);
      PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_v_starting_dict);
      __Pyx_GIVEREF(__pyx_v_starting_dict);
      __Pyx_INCREF(__pyx_v_basis_file);
      PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_v_basis_file);
      __Pyx_GIVEREF(__pyx_v_basis_file);
      __Pyx_INCREF(__pyx_v_algorithm);
      PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_v_algorithm);
      __Pyx_GIVEREF(__pyx_v_algorithm);
      __Pyx_INCREF(__pyx_v_max_threads);
      PyTuple_SET_ITEM(__pyx_t_4, 8, __pyx_v_max_threads);
      __Pyx_GIVEREF(__pyx_v_max_threads);
      __Pyx_INCREF(__pyx_v_relative_gap);
      PyTuple_SET_ITEM(__pyx_t_4, 9, __pyx_v_relative_gap);
      __Pyx_GIVEREF(__pyx_v_relative_gap);
      __Pyx_INCREF(__pyx_v_emphasis);
      PyTuple_SET_ITEM(__pyx_t_4, 10, __pyx_v_emphasis);
      __Pyx_GIVEREF(__pyx_v_emphasis);
      __Pyx_INCREF(__pyx_v_time_limit);
      PyTuple_SET_ITEM(__pyx_t_4, 11, __pyx_v_time_limit);
      __Pyx_GIVEREF(__pyx_v_time_limit);
      __Pyx_INCREF(__pyx_v_tree_limit);
      PyTuple_SET_ITEM(__pyx_t_4, 12, __pyx_v_tree_limit);
      __Pyx_GIVEREF(__pyx_v_tree_limit);
      __Pyx_INCREF(__pyx_v_variable_select);
      PyTuple_SET_ITEM(__pyx_t_4, 13, __pyx_v_variable_select);
      __Pyx_GIVEREF(__pyx_v_variable_select);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pycpx/pyconcert.pyx":2006
 *         """
 * 
 *         self._checkOkay()             # <<<<<<<<<<<<<<
 * 
 *         cdef Status s
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkOkay(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":2016
 *         cdef CPlexExpression obj
 * 
 *         if not type(objective) is CPlexExpression:             # <<<<<<<<<<<<<<
 *             raise TypeError("Objective must be an expression.")
 * 
 */
  __pyx_t_5 = (((PyObject *)Py_TYPE(__pyx_v_objective)) != ((PyObject *)((PyObject*)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression)));
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "pycpx/pyconcert.pyx":2017
 * 
 *         if not type(objective) is CPlexExpression:
 *             raise TypeError("Objective must be an expression.")             # <<<<<<<<<<<<<<
 * 
 *         obj = objective
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":2019
 *             raise TypeError("Objective must be an expression.")
 * 
 *         obj = objective             # <<<<<<<<<<<<<<
 * 
 *         cdef bint _maximize = True, _minimize = False
 */
  if (!(likely(((__pyx_v_objective) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_objective, __pyx_ptype_5pycpx_9pyconcert_CPlexExpression))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_objective;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_obj = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":2021
 *         obj = objective
 * 
 *         cdef bint _maximize = True, _minimize = False             # <<<<<<<<<<<<<<
 * 
 *         if maximize is not None and minimize is None:
 */
  __pyx_v__maximize = 1;
  __pyx_v__minimize = 0;

  /* "pycpx/pyconcert.pyx":2023
 *         cdef bint _maximize = True, _minimize = False
 * 
 *         if maximize is not None and minimize is None:             # <<<<<<<<<<<<<<
 *             _maximize = maximize
 *             _minimize = not _maximize
 */
  __pyx_t_6 = (__pyx_v_maximize != Py_None);
  if ((__pyx_t_6 != 0)) {
    __pyx_t_5 = (__pyx_v_minimize == Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
  } else {
    __pyx_t_7 = (__pyx_t_6 != 0);
  }
  if (__pyx_t_7) {

    /* "pycpx/pyconcert.pyx":2024
 * 
 *         if maximize is not None and minimize is None:
 *             _maximize = maximize             # <<<<<<<<<<<<<<
 *             _minimize = not _maximize
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_maximize); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v__maximize = __pyx_t_7;

    /* "pycpx/pyconcert.pyx":2025
 *         if maximize is not None and minimize is None:
 *             _maximize = maximize
 *             _minimize = not _maximize             # <<<<<<<<<<<<<<
 * 
 *         elif maximize is None and minimize is not None:
 */
    __pyx_v__minimize = (!(__pyx_v__maximize != 0));
    goto __pyx_L4;
  }

  /* "pycpx/pyconcert.pyx":2027
 *             _minimize = not _maximize
 * 
 *         elif maximize is None and minimize is not None:             # <<<<<<<<<<<<<<
 *             _maximize = not minimize
 *             _minimize = not _maximize
 */
  __pyx_t_7 = (__pyx_v_maximize == Py_None);
  if ((__pyx_t_7 != 0)) {
    __pyx_t_6 = (__pyx_v_minimize != Py_None);
    __pyx_t_5 = (__pyx_t_6 != 0);
  } else {
    __pyx_t_5 = (__pyx_t_7 != 0);
  }
  if (__pyx_t_5) {

    /* "pycpx/pyconcert.pyx":2028
 * 
 *         elif maximize is None and minimize is not None:
 *             _maximize = not minimize             # <<<<<<<<<<<<<<
 *             _minimize = not _maximize
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_minimize); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2028; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v__maximize = (!__pyx_t_5);

    /* "pycpx/pyconcert.pyx":2029
 *         elif maximize is None and minimize is not None:
 *             _maximize = not minimize
 *             _minimize = not _maximize             # <<<<<<<<<<<<<<
 * 
 *         elif maximize is not None and minimize is not None:
 */
    __pyx_v__minimize = (!(__pyx_v__maximize != 0));
    goto __pyx_L4;
  }

  /* "pycpx/pyconcert.pyx":2031
 *             _minimize = not _maximize
 * 
 *         elif maximize is not None and minimize is not None:             # <<<<<<<<<<<<<<
 *             _maximize = maximize
 *             _minimize = minimize
 */
  __pyx_t_5 = (__pyx_v_maximize != Py_None);
  if ((__pyx_t_5 != 0)) {
    __pyx_t_7 = (__pyx_v_minimize != Py_None);
    __pyx_t_6 = (__pyx_t_7 != 0);
  } else {
    __pyx_t_6 = (__pyx_t_5 != 0);
  }
  if (__pyx_t_6) {

    /* "pycpx/pyconcert.pyx":2032
 * 
 *         elif maximize is not None and minimize is not None:
 *             _maximize = maximize             # <<<<<<<<<<<<<<
 *             _minimize = minimize
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_maximize); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v__maximize = __pyx_t_6;

    /* "pycpx/pyconcert.pyx":2033
 *         elif maximize is not None and minimize is not None:
 *             _maximize = maximize
 *             _minimize = minimize             # <<<<<<<<<<<<<<
 * 
 *             if _maximize == _minimize:
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_minimize); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v__minimize = __pyx_t_6;

    /* "pycpx/pyconcert.pyx":2035
 *             _minimize = minimize
 * 
 *             if _maximize == _minimize:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Cannot both maximize and minimize the problem at the same time.")
 * 
 */
    __pyx_t_6 = ((__pyx_v__maximize == __pyx_v__minimize) != 0);
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":2036
 * 
 *             if _maximize == _minimize:
 *                 raise ValueError("Cannot both maximize and minimize the problem at the same time.")             # <<<<<<<<<<<<<<
 * 
 *         ################################################################################
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pycpx/pyconcert.pyx":2041
 *         # Get any model parameters that we need from the previous model
 * 
 *         cdef list recycle_variable_values = None             # <<<<<<<<<<<<<<
 * 
 *         if recycle_variables and self.model.solved():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_recycle_variable_values = ((PyObject*)Py_None);

  /* "pycpx/pyconcert.pyx":2043
 *         cdef list recycle_variable_values = None
 * 
 *         if recycle_variables and self.model.solved():             # <<<<<<<<<<<<<<
 *             recycle_variable_values = [self.value(v) for v in self.variables]
 * 
 */
  if ((__pyx_v_recycle_variables != 0)) {
    __pyx_t_6 = (__pyx_v_self->model->solved() != 0);
    __pyx_t_5 = __pyx_t_6;
  } else {
    __pyx_t_5 = (__pyx_v_recycle_variables != 0);
  }
  if (__pyx_t_5) {

    /* "pycpx/pyconcert.pyx":2044
 * 
 *         if recycle_variables and self.model.solved():
 *             recycle_variable_values = [self.value(v) for v in self.variables]             # <<<<<<<<<<<<<<
 * 
 *         cdef str tmp_basis_file_name = None
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->variables == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __pyx_v_self->variables; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
    for (;;) {
      if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
      __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->value(__pyx_v_self, __pyx_v_v, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_recycle_variable_values, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "pycpx/pyconcert.pyx":2046
 *             recycle_variable_values = [self.value(v) for v in self.variables]
 * 
 *         cdef str tmp_basis_file_name = None             # <<<<<<<<<<<<<<
 * 
 *         if recycle_basis and self.model.solved():
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_tmp_basis_file_name = ((PyObject*)Py_None);

  /* "pycpx/pyconcert.pyx":2048
 *         cdef str tmp_basis_file_name = None
 * 
 *         if recycle_basis and self.model.solved():             # <<<<<<<<<<<<<<
 *             tmp_basis_file, tmp_basis_file_name = tempfile.mkstemp(suffix='bas', prefix='tmp_cplex')
 * 
 */
  if ((__pyx_v_recycle_basis != 0)) {
    __pyx_t_5 = (__pyx_v_self->model->solved() != 0);
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = (__pyx_v_recycle_basis != 0);
  }
  if (__pyx_t_6) {

    /* "pycpx/pyconcert.pyx":2049
 * 
 *         if recycle_basis and self.model.solved():
 *             tmp_basis_file, tmp_basis_file_name = tempfile.mkstemp(suffix='bas', prefix='tmp_cplex')             # <<<<<<<<<<<<<<
 * 
 *             b = bytes(tmp_basis_file_name)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_tempfile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_mkstemp); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_suffix, __pyx_n_s_bas) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_prefix, __pyx_n_s_tmp_cplex) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_9(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_3 = __pyx_t_9(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_2), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L11_unpacking_done:;
    }
    if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_tmp_basis_file = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_tmp_basis_file_name, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pycpx/pyconcert.pyx":2051
 *             tmp_basis_file, tmp_basis_file_name = tempfile.mkstemp(suffix='bas', prefix='tmp_cplex')
 * 
 *             b = bytes(tmp_basis_file_name)             # <<<<<<<<<<<<<<
 *             self.model.writeBasis(b)
 * 
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_tmp_basis_file_name);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_tmp_basis_file_name);
    __Pyx_GIVEREF(__pyx_v_tmp_basis_file_name);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyBytes_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_b = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pycpx/pyconcert.pyx":2052
 * 
 *             b = bytes(tmp_basis_file_name)
 *             self.model.writeBasis(b)             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_v_b); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->model->writeBasis(__pyx_t_10);
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "pycpx/pyconcert.pyx":2054
 *             self.model.writeBasis(b)
 * 
 *         try:             # <<<<<<<<<<<<<<
 * 
 *             ################################################################################
 */
  /*try:*/ {

    /* "pycpx/pyconcert.pyx":2059
 *             # Now see if we're maximizing or minimizing
 * 
 *             s = self.model.setObjective(obj.data[0], _maximize)             # <<<<<<<<<<<<<<
 * 
 *             if s.error_code != 0:
 */
    __pyx_v_s = __pyx_v_self->model->setObjective((__pyx_v_obj->data[0]), __pyx_v__maximize);

    /* "pycpx/pyconcert.pyx":2061
 *             s = self.model.setObjective(obj.data[0], _maximize)
 * 
 *             if s.error_code != 0:             # <<<<<<<<<<<<<<
 *                 raise CPlexException("Error setting objective: %s" % s.message)
 * 
 */
    __pyx_t_6 = ((__pyx_v_s.error_code != 0) != 0);
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":2062
 * 
 *             if s.error_code != 0:
 *                 raise CPlexException("Error setting objective: %s" % s.message)             # <<<<<<<<<<<<<<
 * 
 *             ################################################################################
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2062; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_s.message); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2062; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Error_setting_objective_s, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2062; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2062; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2062; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2062; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
    }

    /* "pycpx/pyconcert.pyx":2068
 *             # the objective is set, so these things stay put
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.model.setParameter(RootAlg, <int> model_lookup[algorithm.lower()])
 *             except KeyError:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "pycpx/pyconcert.pyx":2069
 * 
 *             try:
 *                 self.model.setParameter(RootAlg, <int> model_lookup[algorithm.lower()])             # <<<<<<<<<<<<<<
 *             except KeyError:
 *                 raise ValueError("Algorithm '%s' not recognized, can be auto, primal, dual, barrier, sifting, concurrent, or netflow.")
 */
        if (unlikely(__pyx_v_5pycpx_9pyconcert_model_lookup == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2069; __pyx_clineno = __LINE__; goto __pyx_L16_error;}
        }
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_algorithm, __pyx_n_s_lower); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2069; __pyx_clineno = __LINE__; goto __pyx_L16_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2069; __pyx_clineno = __LINE__; goto __pyx_L16_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_5pycpx_9pyconcert_model_lookup, __pyx_t_4); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2069; __pyx_clineno = __LINE__; goto __pyx_L16_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2069; __pyx_clineno = __LINE__; goto __pyx_L16_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_self->model->setParameter(IloCplex::RootAlg, ((int)__pyx_t_14));
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L23_try_end;
      __pyx_L16_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pycpx/pyconcert.pyx":2070
 *             try:
 *                 self.model.setParameter(RootAlg, <int> model_lookup[algorithm.lower()])
 *             except KeyError:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Algorithm '%s' not recognized, can be auto, primal, dual, barrier, sifting, concurrent, or netflow.")
 * 
 */
      __pyx_t_14 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
      if (__pyx_t_14) {
        __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_4, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2070; __pyx_clineno = __LINE__; goto __pyx_L18_except_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_3);

        /* "pycpx/pyconcert.pyx":2071
 *                 self.model.setParameter(RootAlg, <int> model_lookup[algorithm.lower()])
 *             except KeyError:
 *                 raise ValueError("Algorithm '%s' not recognized, can be auto, primal, dual, barrier, sifting, concurrent, or netflow.")             # <<<<<<<<<<<<<<
 * 
 *             if max_threads:
 */
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2071; __pyx_clineno = __LINE__; goto __pyx_L18_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2071; __pyx_clineno = __LINE__; goto __pyx_L18_except_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L17_exception_handled;
      }
      goto __pyx_L18_except_error;
      __pyx_L18_except_error:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L13_error;
      __pyx_L17_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __pyx_L23_try_end:;
    }

    /* "pycpx/pyconcert.pyx":2073
 *                 raise ValueError("Algorithm '%s' not recognized, can be auto, primal, dual, barrier, sifting, concurrent, or netflow.")
 * 
 *             if max_threads:             # <<<<<<<<<<<<<<
 *                 self.model.setParameter(Threads, <int> int(max_threads))
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_max_threads); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":2074
 * 
 *             if max_threads:
 *                 self.model.setParameter(Threads, <int> int(max_threads))             # <<<<<<<<<<<<<<
 * 
 *             if relative_gap is not None:
 */
      __pyx_t_3 = PyNumber_Int(__pyx_v_max_threads); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_self->model->setParameter(IloCplex::Threads, ((int)__pyx_t_14));
      goto __pyx_L26;
    }
    __pyx_L26:;

    /* "pycpx/pyconcert.pyx":2076
 *                 self.model.setParameter(Threads, <int> int(max_threads))
 * 
 *             if relative_gap is not None:             # <<<<<<<<<<<<<<
 *                 self.model.setParameter(RelativeMIPGapTolerance, float(relative_gap))
 * 
 */
    __pyx_t_6 = (__pyx_v_relative_gap != Py_None);
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":2077
 * 
 *             if relative_gap is not None:
 *                 self.model.setParameter(RelativeMIPGapTolerance, float(relative_gap))             # <<<<<<<<<<<<<<
 * 
 *             if emphasis is not None:
 */
      __pyx_t_15 = __Pyx_PyObject_AsDouble(__pyx_v_relative_gap); if (unlikely(__pyx_t_15 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2077; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __pyx_v_self->model->setParameter(IloCplex::EpGap, __pyx_t_15);
      goto __pyx_L27;
    }
    __pyx_L27:;

    /* "pycpx/pyconcert.pyx":2079
 *                 self.model.setParameter(RelativeMIPGapTolerance, float(relative_gap))
 * 
 *             if emphasis is not None:             # <<<<<<<<<<<<<<
 *                 self.model.setParameter(MIPEmphasis, <int> int(emphasis))
 * 
 */
    __pyx_t_5 = (__pyx_v_emphasis != Py_None);
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":2080
 * 
 *             if emphasis is not None:
 *                 self.model.setParameter(MIPEmphasis, <int> int(emphasis))             # <<<<<<<<<<<<<<
 * 
 *             if time_limit is not None:
 */
      __pyx_t_3 = PyNumber_Int(__pyx_v_emphasis); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2080; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2080; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_self->model->setParameter(IloCplex::MIPEmphasis, ((int)__pyx_t_14));
      goto __pyx_L28;
    }
    __pyx_L28:;

    /* "pycpx/pyconcert.pyx":2082
 *                 self.model.setParameter(MIPEmphasis, <int> int(emphasis))
 * 
 *             if time_limit is not None:             # <<<<<<<<<<<<<<
 *                 self.model.setParameter(TiLim, <int> int(time_limit))
 * 
 */
    __pyx_t_6 = (__pyx_v_time_limit != Py_None);
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":2083
 * 
 *             if time_limit is not None:
 *                 self.model.setParameter(TiLim, <int> int(time_limit))             # <<<<<<<<<<<<<<
 * 
 *             if tree_limit is not None:
 */
      __pyx_t_3 = PyNumber_Int(__pyx_v_time_limit); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2083; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2083; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_self->model->setParameter(IloCplex::TiLim, ((int)__pyx_t_14));
      goto __pyx_L29;
    }
    __pyx_L29:;

    /* "pycpx/pyconcert.pyx":2085
 *                 self.model.setParameter(TiLim, <int> int(time_limit))
 * 
 *             if tree_limit is not None:             # <<<<<<<<<<<<<<
 *                 self.model.setParameter(TreLim, <int> int(tree_limit))
 * 
 */
    __pyx_t_5 = (__pyx_v_tree_limit != Py_None);
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":2086
 * 
 *             if tree_limit is not None:
 *                 self.model.setParameter(TreLim, <int> int(tree_limit))             # <<<<<<<<<<<<<<
 * 
 *             if variable_select is not None:
 */
      __pyx_t_3 = PyNumber_Int(__pyx_v_tree_limit); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2086; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2086; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_self->model->setParameter(IloCplex::TreLim, ((int)__pyx_t_14));
      goto __pyx_L30;
    }
    __pyx_L30:;

    /* "pycpx/pyconcert.pyx":2088
 *                 self.model.setParameter(TreLim, <int> int(tree_limit))
 * 
 *             if variable_select is not None:             # <<<<<<<<<<<<<<
 *                 self.model.setParameter(VarSel, <int> int(variable_select))
 * 
 */
    __pyx_t_6 = (__pyx_v_variable_select != Py_None);
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":2089
 * 
 *             if variable_select is not None:
 *                 self.model.setParameter(VarSel, <int> int(variable_select))             # <<<<<<<<<<<<<<
 * 
 *             if tmp_basis_file_name is not None:
 */
      __pyx_t_3 = PyNumber_Int(__pyx_v_variable_select); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_self->model->setParameter(IloCplex::VarSel, ((int)__pyx_t_14));
      goto __pyx_L31;
    }
    __pyx_L31:;

    /* "pycpx/pyconcert.pyx":2091
 *                 self.model.setParameter(VarSel, <int> int(variable_select))
 * 
 *             if tmp_basis_file_name is not None:             # <<<<<<<<<<<<<<
 *                 b = bytes(tmp_basis_file_name)
 *                 self.model.readBasis(b)
 */
    __pyx_t_5 = (__pyx_v_tmp_basis_file_name != ((PyObject*)Py_None));
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":2092
 * 
 *             if tmp_basis_file_name is not None:
 *                 b = bytes(tmp_basis_file_name)             # <<<<<<<<<<<<<<
 *                 self.model.readBasis(b)
 * 
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2092; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_tmp_basis_file_name);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_tmp_basis_file_name);
      __Pyx_GIVEREF(__pyx_v_tmp_basis_file_name);
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyBytes_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2092; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_b, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "pycpx/pyconcert.pyx":2093
 *             if tmp_basis_file_name is not None:
 *                 b = bytes(tmp_basis_file_name)
 *                 self.model.readBasis(b)             # <<<<<<<<<<<<<<
 * 
 *             if basis_file is not None:
 */
      __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_v_b); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2093; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __pyx_v_self->model->readBasis(__pyx_t_10);
      goto __pyx_L32;
    }
    __pyx_L32:;

    /* "pycpx/pyconcert.pyx":2095
 *                 self.model.readBasis(b)
 * 
 *             if basis_file is not None:             # <<<<<<<<<<<<<<
 *                 b = bytes(basis_file)
 *                 self.model.readBasis(b)
 */
    __pyx_t_6 = (__pyx_v_basis_file != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":2096
 * 
 *             if basis_file is not None:
 *                 b = bytes(basis_file)             # <<<<<<<<<<<<<<
 *                 self.model.readBasis(b)
 * 
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_basis_file);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_basis_file);
      __Pyx_GIVEREF(__pyx_v_basis_file);
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyBytes_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_b, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "pycpx/pyconcert.pyx":2097
 *             if basis_file is not None:
 *                 b = bytes(basis_file)
 *                 self.model.readBasis(b)             # <<<<<<<<<<<<<<
 * 
 *             if recycle_variable_values is not None:
 */
      __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_v_b); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2097; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __pyx_v_self->model->readBasis(__pyx_t_10);
      goto __pyx_L33;
    }
    __pyx_L33:;

    /* "pycpx/pyconcert.pyx":2099
 *                 self.model.readBasis(b)
 * 
 *             if recycle_variable_values is not None:             # <<<<<<<<<<<<<<
 * 
 *                 for var, val in zip(self.variables, recycle_variable_values):
 */
    __pyx_t_5 = (__pyx_v_recycle_variable_values != ((PyObject*)Py_None));
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":2101
 *             if recycle_variable_values is not None:
 * 
 *                 for var, val in zip(self.variables, recycle_variable_values):             # <<<<<<<<<<<<<<
 *                     s = self.model.setStartingValues(
 *                         var.data[0], newCoercedNumericalArray(val, var.data.md()).data[0])
 */
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_self->variables);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->variables);
      __Pyx_GIVEREF(__pyx_v_self->variables);
      __Pyx_INCREF(__pyx_v_recycle_variable_values);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_recycle_variable_values);
      __Pyx_GIVEREF(__pyx_v_recycle_variable_values);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyList_CheckExact(__pyx_t_4) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
        __pyx_t_16 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_16 = Py_TYPE(__pyx_t_3)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (!__pyx_t_16 && PyList_CheckExact(__pyx_t_3)) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          #endif
        } else if (!__pyx_t_16 && PyTuple_CheckExact(__pyx_t_3)) {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          #endif
        } else {
          __pyx_t_4 = __pyx_t_16(__pyx_t_3);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          #else
          __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_2);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_17 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_9 = Py_TYPE(__pyx_t_17)->tp_iternext;
          index = 0; __pyx_t_1 = __pyx_t_9(__pyx_t_17); if (unlikely(!__pyx_t_1)) goto __pyx_L37_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_1);
          index = 1; __pyx_t_2 = __pyx_t_9(__pyx_t_17); if (unlikely(!__pyx_t_2)) goto __pyx_L37_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_2);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_17), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __pyx_t_9 = NULL;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          goto __pyx_L38_unpacking_done;
          __pyx_L37_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_9 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __pyx_L38_unpacking_done:;
        }
        if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5pycpx_9pyconcert_CPlexExpression))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_XDECREF_SET(__pyx_v_var, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_1));
        __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "pycpx/pyconcert.pyx":2103
 *                 for var, val in zip(self.variables, recycle_variable_values):
 *                     s = self.model.setStartingValues(
 *                         var.data[0], newCoercedNumericalArray(val, var.data.md()).data[0])             # <<<<<<<<<<<<<<
 *                     if s.error_code != 0:
 *                         raise CPlexException("Error setting starting values: %s" % str(s.message))
 */
        __pyx_t_4 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCoercedNumericalArray(__pyx_v_val, __pyx_v_var->data->md())); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2103; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_4);

        /* "pycpx/pyconcert.pyx":2102
 * 
 *                 for var, val in zip(self.variables, recycle_variable_values):
 *                     s = self.model.setStartingValues(             # <<<<<<<<<<<<<<
 *                         var.data[0], newCoercedNumericalArray(val, var.data.md()).data[0])
 *                     if s.error_code != 0:
 */
        __pyx_v_s = __pyx_v_self->model->setStartingValues((__pyx_v_var->data[0]), (((struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *)__pyx_t_4)->data[0]));
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "pycpx/pyconcert.pyx":2104
 *                     s = self.model.setStartingValues(
 *                         var.data[0], newCoercedNumericalArray(val, var.data.md()).data[0])
 *                     if s.error_code != 0:             # <<<<<<<<<<<<<<
 *                         raise CPlexException("Error setting starting values: %s" % str(s.message))
 * 
 */
        __pyx_t_6 = ((__pyx_v_s.error_code != 0) != 0);
        if (__pyx_t_6) {

          /* "pycpx/pyconcert.pyx":2105
 *                         var.data[0], newCoercedNumericalArray(val, var.data.md()).data[0])
 *                     if s.error_code != 0:
 *                         raise CPlexException("Error setting starting values: %s" % str(s.message))             # <<<<<<<<<<<<<<
 * 
 *             if starting_dict:
 */
          __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_s.message); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Error_setting_starting_values_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L34;
    }
    __pyx_L34:;

    /* "pycpx/pyconcert.pyx":2107
 *                         raise CPlexException("Error setting starting values: %s" % str(s.message))
 * 
 *             if starting_dict:             # <<<<<<<<<<<<<<
 *                 for var, X in starting_dict.iteritems():
 *                     s = self.model.setStartingValues(
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_starting_dict); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2107; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":2108
 * 
 *             if starting_dict:
 *                 for var, X in starting_dict.iteritems():             # <<<<<<<<<<<<<<
 *                     s = self.model.setStartingValues(
 *                         var.data[0], newCoercedNumericalArray(X, var.data.md()).data[0])
 */
      __pyx_t_8 = 0;
      if (unlikely(__pyx_v_starting_dict == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      }
      __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_starting_dict, 1, __pyx_n_s_iteritems, (&__pyx_t_18), (&__pyx_t_14)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_1;
      __pyx_t_1 = 0;
      while (1) {
        __pyx_t_19 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_18, &__pyx_t_8, &__pyx_t_1, &__pyx_t_2, NULL, __pyx_t_14);
        if (unlikely(__pyx_t_19 == 0)) break;
        if (unlikely(__pyx_t_19 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_2);
        if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5pycpx_9pyconcert_CPlexExpression))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_XDECREF_SET(__pyx_v_var, ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_1));
        __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_X, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "pycpx/pyconcert.pyx":2110
 *                 for var, X in starting_dict.iteritems():
 *                     s = self.model.setStartingValues(
 *                         var.data[0], newCoercedNumericalArray(X, var.data.md()).data[0])             # <<<<<<<<<<<<<<
 *                     if s.error_code != 0:
 *                         raise CPlexException("Error setting starting values: %s" % str(s.message))
 */
        __pyx_t_2 = ((PyObject *)__pyx_f_5pycpx_9pyconcert_newCoercedNumericalArray(__pyx_v_X, __pyx_v_var->data->md())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2110; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_2);

        /* "pycpx/pyconcert.pyx":2109
 *             if starting_dict:
 *                 for var, X in starting_dict.iteritems():
 *                     s = self.model.setStartingValues(             # <<<<<<<<<<<<<<
 *                         var.data[0], newCoercedNumericalArray(X, var.data.md()).data[0])
 *                     if s.error_code != 0:
 */
        __pyx_v_s = __pyx_v_self->model->setStartingValues((__pyx_v_var->data[0]), (((struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *)__pyx_t_2)->data[0]));
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pycpx/pyconcert.pyx":2111
 *                     s = self.model.setStartingValues(
 *                         var.data[0], newCoercedNumericalArray(X, var.data.md()).data[0])
 *                     if s.error_code != 0:             # <<<<<<<<<<<<<<
 *                         raise CPlexException("Error setting starting values: %s" % str(s.message))
 * 
 */
        __pyx_t_6 = ((__pyx_v_s.error_code != 0) != 0);
        if (__pyx_t_6) {

          /* "pycpx/pyconcert.pyx":2112
 *                         var.data[0], newCoercedNumericalArray(X, var.data.md()).data[0])
 *                     if s.error_code != 0:
 *                         raise CPlexException("Error setting starting values: %s" % str(s.message))             # <<<<<<<<<<<<<<
 * 
 *             ###############################################################################
 */
          __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_s.message); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Error_setting_starting_values_s, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_Raise(__pyx_t_4, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L40;
    }
    __pyx_L40:;

    /* "pycpx/pyconcert.pyx":2116
 *             ###############################################################################
 *             # Now solve it!
 *             s = self.model.solve(&self.last_op_time)             # <<<<<<<<<<<<<<
 * 
 *             if s.error_code != 0:
 */
    __pyx_v_s = __pyx_v_self->model->solve((&__pyx_v_self->last_op_time));

    /* "pycpx/pyconcert.pyx":2118
 *             s = self.model.solve(&self.last_op_time)
 * 
 *             if s.error_code != 0:             # <<<<<<<<<<<<<<
 *                 if s.error_code in [MODEL_UNBOUNDED, MODEL_INFEASABLE,
 *                                     MODEL_UNBOUNDED_OR_INFEASABLE]:
 */
    __pyx_t_6 = ((__pyx_v_s.error_code != 0) != 0);
    if (__pyx_t_6) {

      /* "pycpx/pyconcert.pyx":2119
 * 
 *             if s.error_code != 0:
 *                 if s.error_code in [MODEL_UNBOUNDED, MODEL_INFEASABLE,             # <<<<<<<<<<<<<<
 *                                     MODEL_UNBOUNDED_OR_INFEASABLE]:
 * 
 */
      __pyx_t_14 = __pyx_v_s.error_code;
      __pyx_t_6 = ((__pyx_t_14 == MODEL_UNBOUNDED) != 0);
      if (!__pyx_t_6) {
        __pyx_t_5 = ((__pyx_t_14 == MODEL_INFEASABLE) != 0);
        __pyx_t_7 = __pyx_t_5;
      } else {
        __pyx_t_7 = __pyx_t_6;
      }
      if (!__pyx_t_7) {

        /* "pycpx/pyconcert.pyx":2120
 *             if s.error_code != 0:
 *                 if s.error_code in [MODEL_UNBOUNDED, MODEL_INFEASABLE,
 *                                     MODEL_UNBOUNDED_OR_INFEASABLE]:             # <<<<<<<<<<<<<<
 * 
 *                     raise CPlexNoSolution(str(s.message))
 */
        __pyx_t_6 = ((__pyx_t_14 == MODEL_UNBOUNDED_OR_INFEASABLE) != 0);
        __pyx_t_5 = __pyx_t_6;
      } else {
        __pyx_t_5 = __pyx_t_7;
      }

      /* "pycpx/pyconcert.pyx":2119
 * 
 *             if s.error_code != 0:
 *                 if s.error_code in [MODEL_UNBOUNDED, MODEL_INFEASABLE,             # <<<<<<<<<<<<<<
 *                                     MODEL_UNBOUNDED_OR_INFEASABLE]:
 * 
 */
      __pyx_t_7 = (__pyx_t_5 != 0);
      if (__pyx_t_7) {

        /* "pycpx/pyconcert.pyx":2122
 *                                     MODEL_UNBOUNDED_OR_INFEASABLE]:
 * 
 *                     raise CPlexNoSolution(str(s.message))             # <<<<<<<<<<<<<<
 * 
 *                 else:
 */
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexNoSolution); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_s.message); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      }
      /*else*/ {

        /* "pycpx/pyconcert.pyx":2125
 * 
 *                 else:
 *                     raise CPlexException(str(s.message))             # <<<<<<<<<<<<<<
 * 
 *             return self.model.getObjectiveValue()
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_s.message); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      }
    }

    /* "pycpx/pyconcert.pyx":2127
 *                     raise CPlexException(str(s.message))
 * 
 *             return self.model.getObjectiveValue()             # <<<<<<<<<<<<<<
 * 
 *         finally:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->model->getObjectiveValue()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L12_return;
  }

  /* "pycpx/pyconcert.pyx":2130
 * 
 *         finally:
 *             if tmp_basis_file_name is not None:             # <<<<<<<<<<<<<<
 *                 os.remove(tmp_basis_file_name)
 * 
 */
  /*finally:*/ {
    /*exception exit:*/{
      __pyx_L13_error:;
      __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_23);
      __pyx_t_14 = __pyx_lineno; __pyx_t_19 = __pyx_clineno; __pyx_t_20 = __pyx_filename;
      {
        __pyx_t_7 = (__pyx_v_tmp_basis_file_name != ((PyObject*)Py_None));
        __pyx_t_5 = (__pyx_t_7 != 0);
        if (__pyx_t_5) {

          /* "pycpx/pyconcert.pyx":2131
 *         finally:
 *             if tmp_basis_file_name is not None:
 *                 os.remove(tmp_basis_file_name)             # <<<<<<<<<<<<<<
 * 
 *     def saveBasis(self, str filename):
 */
          __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L47_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_remove); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L47_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L47_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_v_tmp_basis_file_name);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_tmp_basis_file_name);
          __Pyx_GIVEREF(__pyx_v_tmp_basis_file_name);
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L47_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L48;
        }
        __pyx_L48:;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_XGIVEREF(__pyx_t_23);
        __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
      }
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ErrRestore(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __pyx_lineno = __pyx_t_14; __pyx_clineno = __pyx_t_19; __pyx_filename = __pyx_t_20;
      goto __pyx_L1_error;
      __pyx_L47_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_XGIVEREF(__pyx_t_23);
        __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
      }
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L12_return: {
      __pyx_t_23 = __pyx_r;
      __pyx_r = 0;

      /* "pycpx/pyconcert.pyx":2130
 * 
 *         finally:
 *             if tmp_basis_file_name is not None:             # <<<<<<<<<<<<<<
 *                 os.remove(tmp_basis_file_name)
 * 
 */
      __pyx_t_5 = (__pyx_v_tmp_basis_file_name != ((PyObject*)Py_None));
      __pyx_t_7 = (__pyx_t_5 != 0);
      if (__pyx_t_7) {

        /* "pycpx/pyconcert.pyx":2131
 *         finally:
 *             if tmp_basis_file_name is not None:
 *                 os.remove(tmp_basis_file_name)             # <<<<<<<<<<<<<<
 * 
 *     def saveBasis(self, str filename):
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_remove); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_tmp_basis_file_name);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_tmp_basis_file_name);
        __Pyx_GIVEREF(__pyx_v_tmp_basis_file_name);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L49;
      }
      __pyx_L49:;
      __pyx_r = __pyx_t_23;
      __pyx_t_23 = 0;
      goto __pyx_L0;
    }
  }

  /* "pycpx/pyconcert.pyx":1840
 * 
 * 
 *     cpdef solve(self, objective, maximize = None, minimize = None,             # <<<<<<<<<<<<<<
 *               bint recycle_variables = False, bint recycle_basis = True,
 *               dict starting_dict = {}, str basis_file = None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_recycle_variable_values);
  __Pyx_XDECREF(__pyx_v_tmp_basis_file_name);
  __Pyx_XDECREF(__pyx_v_tmp_basis_file);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XDECREF(__pyx_v_X);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_13solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_12solve[] = "\n        Solves the current model trying to maximize (default) or\n        minimize `objective` subject to the constraints given by\n        :meth:`constrain()`.  `objective` can be any expression (as\n        described in the documentation for :class:`CPlexModel`).  The\n        function returns the value of the objective after\n        optimization.\n\n        Typically, this function is called using one of the alias\n        functions, :meth:`minimize` or :meth:`maximize`, to set the\n        sense of the optimization.  Alternatively, one can pass any of\n        the following as keyword arguments:\n\n          - ``maximize = True``: Sets sense to find maximum.\n\n          - ``minimize = True``: Sets sense to find minimum,\n\n          - ``maximize = False``: Sets sense to find minimum.\n          \n          - ``minimize = False``: Sets sense to find maximum.\n\n        **Available options**\n\n        starting_dict:\n\n          Specify starting points for variables given in a dictionary.\n\n          For optimization problems having integer values, this may\n          give a speedup.  Note, however, that for non-integer linear\n          programs, constructing a solver state from a starting point\n          is usually as time consuming as solving it in the first\n          place, thus it is rare to get any speedup.\n\n        recycle_variables:\n\n          Can be True or False (default).  If True, the model has\n          already been solved at least once, and no constraints have\n          been added or removed, then the variable values from the\n          previous run are used to form the starting point for this\n          current run.  Note, however, that CPlex takes a usually\n          non-trivial amount of time to construct a basis from a given\n          starting point, so this usually doesn't help that much\n          except in combinatorial problems.\n\n        recycle_basis:\n        \n          Can be True or False (default).  If True, then the b""asis\n          from the last run of the model is used to instantiate this\n          run.  If the basis is saved from before using\n          :meth:`saveBasis`, then one should use basis_file instead.\n\n        basis_file:\n\n          Specify a file to load a basis from.  This file should be\n          from a previous call to :meth:`saveBasis`.\n\n        algorithm:\n\n          Specify which algorithm to use.  Available options are auto\n          (default), primal, dual, barrier, sifting, concurrent, or\n          netflow.  See CPlex doumentation for the specifics..\n\n        max_threads:\n\n          Specify the maximum number of threads for the solver to use.\n\n        relative_gap:\n\n          Specify the relative gap for the relaxed vs. integer solution.\n\n        emphasis:\n\n          Specify emphasis on optimality (2), feasibility (1), or both (0).\n\n        time_limit:\n\n          Specify maximum time limit, in seconds, for a call to an optimizer.\n          Default 1e+75.\n\n        tree_limit:\n\n          Specify an absolute upper limit on the size (in MB, uncompressed)\n          of the branch-and-cut tree. If this limit is exceeded, CPLEX\n          terminates the optimization. Default 1e+75\n        \n        variable_select:\n\n          Sets the rule for selecting the branching variable at the node which \n          has been selected for branching. Minimum feasibility rule (-1) chooses\n          the varaible with the value closes to an integer but still fractional.\n          Other options are maximum infeasibility rule (1), pseudo cost (2),\n          strong branching (3), pseudo reduced costs (4), default (0) allows\n          CPLEX to select best rule based on problem and its progress.\n\n        Example 1::\n\n          >>> from pycpx import CPlexModel\n          >>>\n          >>> m = CPlexModel()\n          >>> x = m.new(lb = 0, ub = 5)\n          >>> m.maximize(2*x)\n          10.0\n          >>> m[x]\n          5.0\n\n        Exam""ple 2::\n\n          >>> import numpy as np\n          >>> from pycpx import CPlexModel\n          >>>\n          >>> A = np.array([[1,0,0], [1,1,0], [1,1,1]])\n          >>> b = np.array([1,2,3])\n          >>> \n          >>> m = CPlexModel()\n          >>> x = m.new(3, lb = 0)\n          >>> m.constrain(A*x <= b)\n          >>> \n          >>> m.maximize(3*x[0] + 2*x[1] + x[2])\n          6.0\n          >>> m[x]\n          array([ 1.,  1.,  1.])\n\n        Example 3::\n\n          >>> import numpy as np\n          >>> from pycpx import CPlexModel\n          >>>\n          >>> A = np.array([[1,0,0], [1,1,0], [1,1,1]])\n          >>> b = np.array([1,2,3])\n          >>> \n          >>> m = CPlexModel()\n          >>> \n          >>> x = m.new(3)\n          >>> t = m.new()\n          >>> \n          >>> m.constrain( abs((A*x - b)) <= t)\n          >>> m.minimize(t)\n          0.0\n          >>> m[x]\n          array([ 1.,  1.,  1.])\n\n        Example 4::\n\n          >>> m = CPlexModel()\n          >>> \n          >>> x = m.new(lb = 0, vtype=int, name = 'x')\n          >>> y = m.new(lb = 0, vtype=int, name = 'y')\n          >>> \n          >>> m.constrain(5*x - y <= 12)\n          >>> m.constrain(3*x + 2*y <= 8)\n          >>> \n          >>> m.maximize(2*x + y)\n          5.0\n          >>> m[x]\n          2.0\n          >>> m[y]\n          1.0\n\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_13solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_objective = 0;
  PyObject *__pyx_v_maximize = 0;
  PyObject *__pyx_v_minimize = 0;
  int __pyx_v_recycle_variables;
  int __pyx_v_recycle_basis;
  PyObject *__pyx_v_starting_dict = 0;
  PyObject *__pyx_v_basis_file = 0;
  PyObject *__pyx_v_algorithm = 0;
  PyObject *__pyx_v_max_threads = 0;
  PyObject *__pyx_v_relative_gap = 0;
  PyObject *__pyx_v_emphasis = 0;
  PyObject *__pyx_v_time_limit = 0;
  PyObject *__pyx_v_tree_limit = 0;
  PyObject *__pyx_v_variable_select = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_objective,&__pyx_n_s_maximize,&__pyx_n_s_minimize,&__pyx_n_s_recycle_variables,&__pyx_n_s_recycle_basis,&__pyx_n_s_starting_dict,&__pyx_n_s_basis_file,&__pyx_n_s_algorithm,&__pyx_n_s_max_threads,&__pyx_n_s_relative_gap,&__pyx_n_s_emphasis,&__pyx_n_s_time_limit,&__pyx_n_s_tree_limit,&__pyx_n_s_variable_select,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[5] = __pyx_k__18;

    /* "pycpx/pyconcert.pyx":1842
 *     cpdef solve(self, objective, maximize = None, minimize = None,
 *               bint recycle_variables = False, bint recycle_basis = True,
 *               dict starting_dict = {}, str basis_file = None,             # <<<<<<<<<<<<<<
 *               algorithm = "auto", max_threads = None, relative_gap = None,
 *               emphasis = None, time_limit = None, tree_limit = None,
 */
    values[6] = ((PyObject*)Py_None);
    values[7] = ((PyObject *)__pyx_n_s_auto);

    /* "pycpx/pyconcert.pyx":1843
 *               bint recycle_variables = False, bint recycle_basis = True,
 *               dict starting_dict = {}, str basis_file = None,
 *               algorithm = "auto", max_threads = None, relative_gap = None,             # <<<<<<<<<<<<<<
 *               emphasis = None, time_limit = None, tree_limit = None,
 *               variable_select = None):
 */
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)Py_None);

    /* "pycpx/pyconcert.pyx":1844
 *               dict starting_dict = {}, str basis_file = None,
 *               algorithm = "auto", max_threads = None, relative_gap = None,
 *               emphasis = None, time_limit = None, tree_limit = None,             # <<<<<<<<<<<<<<
 *               variable_select = None):
 *         """
 */
    values[10] = ((PyObject *)Py_None);
    values[11] = ((PyObject *)Py_None);
    values[12] = ((PyObject *)Py_None);

    /* "pycpx/pyconcert.pyx":1845
 *               algorithm = "auto", max_threads = None, relative_gap = None,
 *               emphasis = None, time_limit = None, tree_limit = None,
 *               variable_select = None):             # <<<<<<<<<<<<<<
 *         """
 *         Solves the current model trying to maximize (default) or
 */
    values[13] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_objective)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_maximize);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_minimize);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_recycle_variables);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_recycle_basis);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_starting_dict);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_basis_file);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_algorithm);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_threads);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_relative_gap);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_emphasis);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_time_limit);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree_limit);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variable_select);
          if (value) { values[13] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solve") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_objective = values[0];
    __pyx_v_maximize = values[1];
    __pyx_v_minimize = values[2];
    if (values[3]) {
      __pyx_v_recycle_variables = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_recycle_variables == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pycpx/pyconcert.pyx":1841
 * 
 *     cpdef solve(self, objective, maximize = None, minimize = None,
 *               bint recycle_variables = False, bint recycle_basis = True,             # <<<<<<<<<<<<<<
 *               dict starting_dict = {}, str basis_file = None,
 *               algorithm = "auto", max_threads = None, relative_gap = None,
 */
      __pyx_v_recycle_variables = ((int)0);
    }
    if (values[4]) {
      __pyx_v_recycle_basis = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_recycle_basis == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_recycle_basis = ((int)1);
    }
    __pyx_v_starting_dict = ((PyObject*)values[5]);
    __pyx_v_basis_file = ((PyObject*)values[6]);
    __pyx_v_algorithm = values[7];
    __pyx_v_max_threads = values[8];
    __pyx_v_relative_gap = values[9];
    __pyx_v_emphasis = values[10];
    __pyx_v_time_limit = values[11];
    __pyx_v_tree_limit = values[12];
    __pyx_v_variable_select = values[13];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solve", 0, 1, 14, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_starting_dict), (&PyDict_Type), 1, "starting_dict", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_basis_file), (&PyString_Type), 1, "basis_file", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_12solve(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), __pyx_v_objective, __pyx_v_maximize, __pyx_v_minimize, __pyx_v_recycle_variables, __pyx_v_recycle_basis, __pyx_v_starting_dict, __pyx_v_basis_file, __pyx_v_algorithm, __pyx_v_max_threads, __pyx_v_relative_gap, __pyx_v_emphasis, __pyx_v_time_limit, __pyx_v_tree_limit, __pyx_v_variable_select);

  /* "pycpx/pyconcert.pyx":1840
 * 
 * 
 *     cpdef solve(self, objective, maximize = None, minimize = None,             # <<<<<<<<<<<<<<
 *               bint recycle_variables = False, bint recycle_basis = True,
 *               dict starting_dict = {}, str basis_file = None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_12solve(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_objective, PyObject *__pyx_v_maximize, PyObject *__pyx_v_minimize, int __pyx_v_recycle_variables, int __pyx_v_recycle_basis, PyObject *__pyx_v_starting_dict, PyObject *__pyx_v_basis_file, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_max_threads, PyObject *__pyx_v_relative_gap, PyObject *__pyx_v_emphasis, PyObject *__pyx_v_time_limit, PyObject *__pyx_v_tree_limit, PyObject *__pyx_v_variable_select) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5pycpx_9pyconcert_10CPlexModel_solve __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 13;
  __pyx_t_2.maximize = __pyx_v_maximize;
  __pyx_t_2.minimize = __pyx_v_minimize;
  __pyx_t_2.recycle_variables = __pyx_v_recycle_variables;
  __pyx_t_2.recycle_basis = __pyx_v_recycle_basis;
  __pyx_t_2.starting_dict = __pyx_v_starting_dict;
  __pyx_t_2.basis_file = __pyx_v_basis_file;
  __pyx_t_2.algorithm = __pyx_v_algorithm;
  __pyx_t_2.max_threads = __pyx_v_max_threads;
  __pyx_t_2.relative_gap = __pyx_v_relative_gap;
  __pyx_t_2.emphasis = __pyx_v_emphasis;
  __pyx_t_2.time_limit = __pyx_v_time_limit;
  __pyx_t_2.tree_limit = __pyx_v_tree_limit;
  __pyx_t_2.variable_select = __pyx_v_variable_select;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->solve(__pyx_v_self, __pyx_v_objective, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":2133
 *                 os.remove(tmp_basis_file_name)
 * 
 *     def saveBasis(self, str filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes a basis for the current solution to a file.  This may
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_15saveBasis(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_14saveBasis[] = "\n        Writes a basis for the current solution to a file.  This may\n        be used to reinstate a previous state of the solver at a later\n        time.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_15saveBasis(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("saveBasis (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_14saveBasis(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), ((PyObject*)__pyx_v_filename));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_14saveBasis(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_b = NULL;
  struct CPlexModelInterface::Status __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("saveBasis", 0);

  /* "pycpx/pyconcert.pyx":2140
 *         """
 * 
 *         self._checkOkay()             # <<<<<<<<<<<<<<
 * 
 *         b = bytes(filename)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkOkay(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":2142
 *         self._checkOkay()
 * 
 *         b = bytes(filename)             # <<<<<<<<<<<<<<
 * 
 *         cdef Status s = self.model.writeBasis(b)
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_filename);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_filename);
  __Pyx_GIVEREF(__pyx_v_filename);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyBytes_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_b = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":2144
 *         b = bytes(filename)
 * 
 *         cdef Status s = self.model.writeBasis(b)             # <<<<<<<<<<<<<<
 * 
 *         if s.error_code != 0:
 */
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_b); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_s = __pyx_v_self->model->writeBasis(__pyx_t_3);

  /* "pycpx/pyconcert.pyx":2146
 *         cdef Status s = self.model.writeBasis(b)
 * 
 *         if s.error_code != 0:             # <<<<<<<<<<<<<<
 *             raise CPlexException(str(s.message))
 * 
 */
  __pyx_t_4 = ((__pyx_v_s.error_code != 0) != 0);
  if (__pyx_t_4) {

    /* "pycpx/pyconcert.pyx":2147
 * 
 *         if s.error_code != 0:
 *             raise CPlexException(str(s.message))             # <<<<<<<<<<<<<<
 * 
 *     def maximize(self, objective, **options):
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_s.message); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":2133
 *                 os.remove(tmp_basis_file_name)
 * 
 *     def saveBasis(self, str filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes a basis for the current solution to a file.  This may
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.saveBasis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":2149
 *             raise CPlexException(str(s.message))
 * 
 *     def maximize(self, objective, **options):             # <<<<<<<<<<<<<<
 *         """
 *         Solves the model by maximizing `objective`. This function
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_17maximize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_16maximize[] = "\n        Solves the model by maximizing `objective`. This function\n        accepts the same options as :meth:`solve`, with the exception\n        of `maximize` or `mininmize`.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_17maximize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_objective = 0;
  PyObject *__pyx_v_options = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("maximize (wrapper)", 0);
  __pyx_v_options = PyDict_New(); if (unlikely(!__pyx_v_options)) return NULL;
  __Pyx_GOTREF(__pyx_v_options);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_objective,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_objective)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_options, values, pos_args, "maximize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_objective = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("maximize", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_options); __pyx_v_options = 0;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.maximize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_16maximize(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), __pyx_v_objective, __pyx_v_options);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_options);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_16maximize(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_objective, PyObject *__pyx_v_options) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("maximize", 0);

  /* "pycpx/pyconcert.pyx":2156
 *         """
 * 
 *         return self.solve(objective, maximize = True, **options)             # <<<<<<<<<<<<<<
 * 
 *     def minimize(self, objective, **options):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_solve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_objective);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_objective);
  __Pyx_GIVEREF(__pyx_v_objective);
  __pyx_t_3 = PyDict_Copy(__pyx_v_options); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_GetItem(__pyx_t_3, __pyx_n_s_maximize))) {
    __Pyx_RaiseDoubleKeywordsError("function", __pyx_n_s_maximize); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_maximize, Py_True) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":2149
 *             raise CPlexException(str(s.message))
 * 
 *     def maximize(self, objective, **options):             # <<<<<<<<<<<<<<
 *         """
 *         Solves the model by maximizing `objective`. This function
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.maximize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":2158
 *         return self.solve(objective, maximize = True, **options)
 * 
 *     def minimize(self, objective, **options):             # <<<<<<<<<<<<<<
 *         """
 *         Solves the model by minimizing `objective`.  This function
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_19minimize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_18minimize[] = "\n        Solves the model by minimizing `objective`.  This function\n        accepts the same options as :meth:`solve`, with the exception\n        of `maximize` or `mininmize`.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_19minimize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_objective = 0;
  PyObject *__pyx_v_options = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minimize (wrapper)", 0);
  __pyx_v_options = PyDict_New(); if (unlikely(!__pyx_v_options)) return NULL;
  __Pyx_GOTREF(__pyx_v_options);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_objective,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_objective)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_options, values, pos_args, "minimize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_objective = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("minimize", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_options); __pyx_v_options = 0;
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.minimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_18minimize(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), __pyx_v_objective, __pyx_v_options);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_options);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_18minimize(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_objective, PyObject *__pyx_v_options) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("minimize", 0);

  /* "pycpx/pyconcert.pyx":2165
 *         """
 * 
 *         return self.solve(objective, maximize = False, **options)             # <<<<<<<<<<<<<<
 * 
 *     def getSolverTime(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_solve); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_objective);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_objective);
  __Pyx_GIVEREF(__pyx_v_objective);
  __pyx_t_3 = PyDict_Copy(__pyx_v_options); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_GetItem(__pyx_t_3, __pyx_n_s_maximize))) {
    __Pyx_RaiseDoubleKeywordsError("function", __pyx_n_s_maximize); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_maximize, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":2158
 *         return self.solve(objective, maximize = True, **options)
 * 
 *     def minimize(self, objective, **options):             # <<<<<<<<<<<<<<
 *         """
 *         Solves the model by minimizing `objective`.  This function
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.minimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":2167
 *         return self.solve(objective, maximize = False, **options)
 * 
 *     def getSolverTime(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the time (in seconds, as a float) of the previous call
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_21getSolverTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_20getSolverTime[] = "\n        Returns the time (in seconds, as a float) of the previous call\n        to solve, as measured by CPlex.  Returns 0 if :meth:`solve`,\n        :meth:`minimize`, or :meth:`maximize` have not been called.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_21getSolverTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSolverTime (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_20getSolverTime(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_20getSolverTime(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSolverTime", 0);

  /* "pycpx/pyconcert.pyx":2174
 *         """
 * 
 *         return self.last_op_time             # <<<<<<<<<<<<<<
 * 
 *     def getNIterations(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->last_op_time); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":2167
 *         return self.solve(objective, maximize = False, **options)
 * 
 *     def getSolverTime(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the time (in seconds, as a float) of the previous call
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.getSolverTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":2176
 *         return self.last_op_time
 * 
 *     def getNIterations(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the number of iterations made during the previous call
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_23getNIterations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_22getNIterations[] = "\n        Returns the number of iterations made during the previous call\n        to solve, as measured by CPlex.  Returns 0 if :meth:`solve`,\n        :meth:`minimize`, or :meth:`maximize` have not been called.\n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_23getNIterations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNIterations (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_22getNIterations(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_22getNIterations(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNIterations", 0);

  /* "pycpx/pyconcert.pyx":2183
 *         """
 * 
 *         self._checkOkay()             # <<<<<<<<<<<<<<
 * 
 *         return self.model.getNIterations()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkOkay(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":2185
 *         self._checkOkay()
 * 
 *         return self.model.getNIterations()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->model->getNIterations()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":2176
 *         return self.last_op_time
 * 
 *     def getNIterations(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the number of iterations made during the previous call
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.getNIterations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":2188
 * 
 * 
 *     cpdef value(self, var_block_or_expression):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a scalar, numpy array, or matrix filled by the values
 */

static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_25value(PyObject *__pyx_v_self, PyObject *__pyx_v_var_block_or_expression); /*proto*/
static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel_value(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_var_block_or_expression, int __pyx_skip_dispatch) {
  struct CPlexModelInterface::Status __pyx_v_s;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *__pyx_v_v = 0;
  PyObject *__pyx_v_M = NULL;
  PyArrayObject *__pyx_v_X = 0;
  NumericalArray *__pyx_v_na;
  PyObject *__pyx_v_size = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_X;
  __Pyx_Buffer __pyx_pybuffer_X;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("value", 0);
  __pyx_pybuffer_X.pybuffer.buf = NULL;
  __pyx_pybuffer_X.refcount = 0;
  __pyx_pybuffernd_X.data = NULL;
  __pyx_pybuffernd_X.rcbuffer = &__pyx_pybuffer_X;
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_25value)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_var_block_or_expression);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_var_block_or_expression);
      __Pyx_GIVEREF(__pyx_v_var_block_or_expression);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pycpx/pyconcert.pyx":2243
 *         """
 * 
 *         self._checkOkay()             # <<<<<<<<<<<<<<
 * 
 *         if type(var_block_or_expression) is not CPlexExpression:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkOkay(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":2245
 *         self._checkOkay()
 * 
 *         if type(var_block_or_expression) is not CPlexExpression:             # <<<<<<<<<<<<<<
 *             raise TypeError("Can only retrieve variables or expressions.")
 * 
 */
  __pyx_t_4 = (((PyObject *)Py_TYPE(__pyx_v_var_block_or_expression)) != ((PyObject *)((PyObject*)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression)));
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "pycpx/pyconcert.pyx":2246
 * 
 *         if type(var_block_or_expression) is not CPlexExpression:
 *             raise TypeError("Can only retrieve variables or expressions.")             # <<<<<<<<<<<<<<
 * 
 *         # if not self.model.solved():
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":2253
 *         cdef Status s
 * 
 *         cdef CPlexExpression v = (<CPlexExpression>var_block_or_expression)             # <<<<<<<<<<<<<<
 * 
 *         if v.model is not self:
 */
  __pyx_t_1 = __pyx_v_var_block_or_expression;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":2255
 *         cdef CPlexExpression v = (<CPlexExpression>var_block_or_expression)
 * 
 *         if v.model is not self:             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only retrieve variables from the model in which they were created.")
 * 
 */
  __pyx_t_5 = (__pyx_v_v->model != __pyx_v_self);
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "pycpx/pyconcert.pyx":2256
 * 
 *         if v.model is not self:
 *             raise ValueError("Can only retrieve variables from the model in which they were created.")             # <<<<<<<<<<<<<<
 * 
 *         # print "var_block size = ", (v.data.md().shape(0), v.data.md().shape(1))
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pycpx/pyconcert.pyx":2260
 *         # print "var_block size = ", (v.data.md().shape(0), v.data.md().shape(1))
 * 
 *         M = matrix(empty( (v.data.md().shape(0), v.data.md().shape(1)) ) )             # <<<<<<<<<<<<<<
 * 
 *         # print "M.shape = ", M.shape
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_matrix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_v->data->md().shape(0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_v->data->md().shape(1)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_M = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "pycpx/pyconcert.pyx":2264
 *         # print "M.shape = ", M.shape
 * 
 *         cdef ar[double,ndim=2, mode = "c"] X = M             # <<<<<<<<<<<<<<
 * 
 *         cdef NumericalArray *na = new NumericalArray(env, (<double*>(X.data)),
 */
  if (!(likely(((__pyx_v_M) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_M, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __pyx_v_M;
  __Pyx_INCREF(__pyx_t_7);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_X.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_7), &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_X = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_X.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_X.diminfo[0].strides = __pyx_pybuffernd_X.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_X.diminfo[0].shape = __pyx_pybuffernd_X.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_X.diminfo[1].strides = __pyx_pybuffernd_X.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_X.diminfo[1].shape = __pyx_pybuffernd_X.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_X = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "pycpx/pyconcert.pyx":2266
 *         cdef ar[double,ndim=2, mode = "c"] X = M
 * 
 *         cdef NumericalArray *na = new NumericalArray(env, (<double*>(X.data)),             # <<<<<<<<<<<<<<
 *                 MetaData(v.data.md().mode(), v.data.md().shape(0), v.data.md().shape(1)))
 * 
 */
  __pyx_v_na = new NumericalArray(__pyx_v_5pycpx_9pyconcert_env, ((double *)__pyx_v_X->data), MetaData(__pyx_v_v->data->md().mode(), __pyx_v_v->data->md().shape(0), __pyx_v_v->data->md().shape(1)));

  /* "pycpx/pyconcert.pyx":2269
 *                 MetaData(v.data.md().mode(), v.data.md().shape(0), v.data.md().shape(1)))
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             s = self.model.getValues(na[0], v.data[0])
 * 
 */
  /*try:*/ {

    /* "pycpx/pyconcert.pyx":2270
 * 
 *         try:
 *             s = self.model.getValues(na[0], v.data[0])             # <<<<<<<<<<<<<<
 * 
 *             if s.error_code != 0:
 */
    __pyx_v_s = __pyx_v_self->model->getValues((__pyx_v_na[0]), (__pyx_v_v->data[0]));

    /* "pycpx/pyconcert.pyx":2272
 *             s = self.model.getValues(na[0], v.data[0])
 * 
 *             if s.error_code != 0:             # <<<<<<<<<<<<<<
 *                 raise CPlexException("Error while retrieving variables: %s" % s.message)
 * 
 */
    __pyx_t_4 = ((__pyx_v_s.error_code != 0) != 0);
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":2273
 * 
 *             if s.error_code != 0:
 *                 raise CPlexException("Error while retrieving variables: %s" % s.message)             # <<<<<<<<<<<<<<
 * 
 *             size = v.original_size
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_s.message); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Error_while_retrieving_variables, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
    }

    /* "pycpx/pyconcert.pyx":2275
 *                 raise CPlexException("Error while retrieving variables: %s" % s.message)
 * 
 *             size = v.original_size             # <<<<<<<<<<<<<<
 * 
 *             if size == s_scalar:
 */
    __pyx_t_1 = __pyx_v_v->original_size;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_size = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pycpx/pyconcert.pyx":2277
 *             size = v.original_size
 * 
 *             if size == s_scalar:             # <<<<<<<<<<<<<<
 *                 assert X.shape[0] == X.shape[1] == 1
 *                 return M[0,0]
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_size, __pyx_v_5pycpx_9pyconcert_s_scalar, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2277; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
    if (__pyx_t_4) {

      /* "pycpx/pyconcert.pyx":2278
 * 
 *             if size == s_scalar:
 *                 assert X.shape[0] == X.shape[1] == 1             # <<<<<<<<<<<<<<
 *                 return M[0,0]
 * 
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_4 = ((__pyx_v_X->dimensions[0]) == (__pyx_v_X->dimensions[1]));
        if (__pyx_t_4) {
          __pyx_t_4 = ((__pyx_v_X->dimensions[1]) == 1);
        }
        if (unlikely(!(__pyx_t_4 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2278; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        }
      }
      #endif

      /* "pycpx/pyconcert.pyx":2279
 *             if size == s_scalar:
 *                 assert X.shape[0] == X.shape[1] == 1
 *                 return M[0,0]             # <<<<<<<<<<<<<<
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 2):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyObject_GetItem(__pyx_v_M, __pyx_tuple__24); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2279; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L5_return;
    }

    /* "pycpx/pyconcert.pyx":2281
 *                 return M[0,0]
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 2):             # <<<<<<<<<<<<<<
 *                 return M
 * 
 */
    __pyx_t_4 = (((PyObject *)Py_TYPE(__pyx_v_size)) == ((PyObject *)((PyObject*)(&PyTuple_Type))));
    if ((__pyx_t_4 != 0)) {
      if (unlikely(__pyx_v_size == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2281; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      }
      __pyx_t_8 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_size)); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2281; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __pyx_t_5 = ((__pyx_t_8 == 2) != 0);
      __pyx_t_9 = __pyx_t_5;
    } else {
      __pyx_t_9 = (__pyx_t_4 != 0);
    }
    if (__pyx_t_9) {

      /* "pycpx/pyconcert.pyx":2282
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 2):
 *                 return M             # <<<<<<<<<<<<<<
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 1):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_M);
      __pyx_r = __pyx_v_M;
      goto __pyx_L5_return;
    }

    /* "pycpx/pyconcert.pyx":2284
 *                 return M
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 1):             # <<<<<<<<<<<<<<
 *                 assert X.shape[0] == size[0]
 *                 return asarray(M).ravel()
 */
    __pyx_t_9 = (((PyObject *)Py_TYPE(__pyx_v_size)) == ((PyObject *)((PyObject*)(&PyTuple_Type))));
    if ((__pyx_t_9 != 0)) {
      if (unlikely(__pyx_v_size == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      }
      __pyx_t_8 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_size)); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __pyx_t_4 = ((__pyx_t_8 == 1) != 0);
      __pyx_t_5 = __pyx_t_4;
    } else {
      __pyx_t_5 = (__pyx_t_9 != 0);
    }
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":2285
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 1):
 *                 assert X.shape[0] == size[0]             # <<<<<<<<<<<<<<
 *                 return asarray(M).ravel()
 * 
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_X->dimensions[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2285; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_size, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2285; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2285; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2285; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_5)) {
          PyErr_SetNone(PyExc_AssertionError);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2285; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        }
      }
      #endif

      /* "pycpx/pyconcert.pyx":2286
 *             elif (type(size) is tuple and len(<tuple>size) == 1):
 *                 assert X.shape[0] == size[0]
 *                 return asarray(M).ravel()             # <<<<<<<<<<<<<<
 * 
 *             elif isscalar(size):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_asarray); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_M);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_M);
      __Pyx_GIVEREF(__pyx_v_M);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ravel); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L5_return;
    }

    /* "pycpx/pyconcert.pyx":2288
 *                 return asarray(M).ravel()
 * 
 *             elif isscalar(size):             # <<<<<<<<<<<<<<
 *                 assert X.shape[0] == size and X.shape[1] == 1
 *                 return asarray(M).ravel()
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_isscalar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2288; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2288; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_size);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_size);
    __Pyx_GIVEREF(__pyx_v_size);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2288; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2288; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_5) {

      /* "pycpx/pyconcert.pyx":2289
 * 
 *             elif isscalar(size):
 *                 assert X.shape[0] == size and X.shape[1] == 1             # <<<<<<<<<<<<<<
 *                 return asarray(M).ravel()
 * 
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_X->dimensions[0])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2289; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_v_size, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2289; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2289; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (__pyx_t_5) {
          __pyx_t_9 = ((__pyx_v_X->dimensions[1]) == 1);
          __pyx_t_4 = __pyx_t_9;
        } else {
          __pyx_t_4 = __pyx_t_5;
        }
        if (unlikely(!__pyx_t_4)) {
          PyErr_SetNone(PyExc_AssertionError);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2289; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        }
      }
      #endif

      /* "pycpx/pyconcert.pyx":2290
 *             elif isscalar(size):
 *                 assert X.shape[0] == size and X.shape[1] == 1
 *                 return asarray(M).ravel()             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2290; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2290; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_M);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_M);
      __Pyx_GIVEREF(__pyx_v_M);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2290; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ravel); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2290; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2290; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L5_return;
    }
    /*else*/ {

      /* "pycpx/pyconcert.pyx":2293
 * 
 *             else:
 *                 return M             # <<<<<<<<<<<<<<
 * 
 *         finally:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_M);
      __pyx_r = __pyx_v_M;
      goto __pyx_L5_return;
    }
  }

  /* "pycpx/pyconcert.pyx":2296
 * 
 *         finally:
 *             del na             # <<<<<<<<<<<<<<
 * 
 *     cpdef asString(self):
 */
  /*finally:*/ {
    /*exception exit:*/{
      __pyx_L6_error:;
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __pyx_t_10 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
      {
        delete __pyx_v_na;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      }
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
      goto __pyx_L1_error;
    }
    __pyx_L5_return: {
      __pyx_t_18 = __pyx_r;
      __pyx_r = 0;
      delete __pyx_v_na;
      __pyx_r = __pyx_t_18;
      __pyx_t_18 = 0;
      goto __pyx_L0;
    }
  }

  /* "pycpx/pyconcert.pyx":2188
 * 
 * 
 *     cpdef value(self, var_block_or_expression):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a scalar, numpy array, or matrix filled by the values
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_X.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_M);
  __Pyx_XDECREF((PyObject *)__pyx_v_X);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_25value(PyObject *__pyx_v_self, PyObject *__pyx_v_var_block_or_expression); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_24value[] = "\n        Returns a scalar, numpy array, or matrix filled by the values\n        of the variable block or expression.  Calling ``m.value(x)``\n        is the same as calling ``m[x]`` or ``x()`` to retrieve the\n        result of a variable.  This function can only be called after\n        the model has been solved at least once.\n\n        In all other places, variables are represented using 2d\n        matrices, with a 1x1 matrix representing a scalar and column\n        vectors representing vectors.  However, a flag is preserved so\n        that returned values are in the same form as originally\n        requested.  Thus 'scalar' variable values are returned as\n        scalars, vector values are returned as a 1d numpy array, and\n        2d variable blocks are returned as 2d matrices.\n\n        Example::\n\n          >>> from pycpx import CPlexModel\n          >>> from numpy import array, arange\n          >>> \n          >>> A = 2*arange(1,10).reshape( (3, 3) )\n          >>> m = CPlexModel()\n          >>> \n          >>> X = m.new( (3, 3), vtype = int)\n          >>> u = m.new( 3, vtype = int)\n          >>> s = m.new(vtype = int)\n          >>> \n          >>> \n          >>> m.constrain(s <= A.T * X <= 10*s)\n          >>> m.constrain(1 <= X.sum(axis = 1) <= u)\n          >>> \n          >>> m.minimize(u.sum())\n          3.0\n          >>> m[X]\n          matrix([[-2.,  3.,  0.],\n                  [ 0.,  0.,  1.],\n                  [ 1.,  0.,  0.]])\n          >>> m[u]\n          array([ 1.,  1.,  1.])\n          >>> m[s]\n          2.0\n          >>> m[X[0,0]]\n          -2.0\n          >>> m[X[:,1]]\n          array([ 3.,  0.,  0.])\n          >>> m[X[2,:]]\n          matrix([[ 1.,  0.,  0.]])\n          >>> m[10*s - A.T * X]\n          matrix([[ 10.,  14.,  12.],\n                  [ 12.,   8.,  10.],\n                  [ 14.,   2.,   8.]])\n        \n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_25value(PyObject *__pyx_v_self, PyObject *__pyx_v_var_block_or_expression) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("value (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_24value(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), ((PyObject *)__pyx_v_var_block_or_expression));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_24value(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_var_block_or_expression) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("value", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->value(__pyx_v_self, __pyx_v_var_block_or_expression, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":2298
 *             del na
 * 
 *     cpdef asString(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a string representation of the model.  If the
 */

static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_27asString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5pycpx_9pyconcert_10CPlexModel_asString(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("asString", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_asString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_27asString)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pycpx/pyconcert.pyx":2357
 * 
 * 
 *         self._checkOkay()             # <<<<<<<<<<<<<<
 * 
 *         return self.model.asString().c_str()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->_checkOkay(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":2359
 *         self._checkOkay()
 * 
 *         return self.model.asString().c_str()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->model->asString().c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":2298
 *             del na
 * 
 *     cpdef asString(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a string representation of the model.  If the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.asString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_27asString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5pycpx_9pyconcert_10CPlexModel_26asString[] = "\n        Returns a string representation of the model.  If the\n        variables are named, they are printed with those names,\n        otherwise ``_##`` is used (e.g. ``_1, _2, _3, ...``.\n\n        Example 1:: \n        \n          >>> m = CPlexModel()\n          >>> \n          >>> x = m.new(lb = 0, vtype=int, name = 'x')\n          >>> y = m.new(lb = 0, vtype=int, name = 'y')\n          >>> \n          >>> m.constrain(5*x - y <= 12)\n          >>> m.constrain(3*x + 2*y <= 8)\n          >>> \n          >>> m.maximize(2*x + y)\n          5.0\n          >>> m\n          maximize 2 * x  + y  such that\n            x[0..9007199254740991] \n            y[0..9007199254740991] \n            5 * x  + -1 * y  <= 12 \n            3 * x  + 2 * y  <= 8 \n\n          >>> m[x]\n          2.0\n          >>> m[y]\n          1.0\n\n        Example 2::\n\n          >>> import numpy as np\n          >>> from pycpx import CPlexModel\n          >>> \n          >>> A = np.array([[1,0,0], [1,1,0], [1,1,1]])\n          >>> b = np.array([1,2,3])\n          >>> \n          >>> m = CPlexModel()\n          >>> x = m.new(3, lb = 0, ub = 5, name = 'x')\n          >>> t = m.new(name = 't')\n          >>> \n          >>> m.constrain( abs((A*x - b)) <= t)\n          >>> \n          >>> m.minimize(t)\n          0.0\n          >>> m\n          minimize t  such that\n            x[0][0..5] \n            x[1][0..5] \n            x[2][0..5] \n            t[-inf..inf] \n            abs(x[0]  + -1 ) <= t[-inf..inf] \n            abs(x[0]  + x[1]  + -2 ) <= t[-inf..inf] \n            abs(x[0]  + x[1]  + x[2]  + -3 ) <= t[-inf..inf] \n         \n        ";
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_27asString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("asString (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_26asString(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_26asString(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("asString", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->asString(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.asString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":2361
 *         return self.model.asString().c_str()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.asString()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_29__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_29__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_28__repr__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_28__repr__(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pycpx/pyconcert.pyx":2362
 * 
 *     def __repr__(self):
 *         return self.asString()             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, var_block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->asString(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":2361
 *         return self.model.asString().c_str()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.asString()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pycpx/pyconcert.pyx":2364
 *         return self.asString()
 * 
 *     def __getitem__(self, var_block):             # <<<<<<<<<<<<<<
 *         return self.value(var_block)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_31__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_var_block); /*proto*/
static PyObject *__pyx_pw_5pycpx_9pyconcert_10CPlexModel_31__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_var_block) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5pycpx_9pyconcert_10CPlexModel_30__getitem__(((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self), ((PyObject *)__pyx_v_var_block));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5pycpx_9pyconcert_10CPlexModel_30__getitem__(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *__pyx_v_self, PyObject *__pyx_v_var_block) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pycpx/pyconcert.pyx":2365
 * 
 *     def __getitem__(self, var_block):
 *         return self.value(var_block)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel *)__pyx_v_self->__pyx_vtab)->value(__pyx_v_self, __pyx_v_var_block, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pycpx/pyconcert.pyx":2364
 *         return self.asString()
 * 
 *     def __getitem__(self, var_block):             # <<<<<<<<<<<<<<
 *         return self.value(var_block)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pycpx.pyconcert.CPlexModel.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_1 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
    __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_3 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_3) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_2 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_2) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_5 = __pyx_v_ndim;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L7;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L7:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
    __pyx_t_3 = ((!(__pyx_v_copy_shape != 0)) != 0);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L10:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_5 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_5;

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_1 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (!__pyx_t_2) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      __pyx_t_1 = ((__pyx_v_descr->byteorder == '<') != 0);
      if (__pyx_t_1) {
        __pyx_t_3 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_7 = __pyx_t_3;
      } else {
        __pyx_t_7 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_7;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d_3;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_9;

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  char *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_6 = ((__pyx_v_child->byteorder == '>') != 0);
    if (__pyx_t_6) {
      __pyx_t_7 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    if (!__pyx_t_7) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      __pyx_t_6 = ((__pyx_v_child->byteorder == '<') != 0);
      if (__pyx_t_6) {
        __pyx_t_8 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_9 = __pyx_t_8;
      } else {
        __pyx_t_9 = __pyx_t_6;
      }
      __pyx_t_6 = __pyx_t_9;
    } else {
      __pyx_t_6 = __pyx_t_7;
    }
    if (__pyx_t_6) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_10 = 0;
      (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + 1);
    }

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_10 = 0;
    (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + __pyx_v_child->elsize);

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L11;
      }
      /*else*/ {

        /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L11:;

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L9;
    }
    /*else*/ {

      /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_11 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_11;
    }
    __pyx_L9:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexModel __pyx_vtable_5pycpx_9pyconcert_CPlexModel;

static PyObject *__pyx_tp_new_5pycpx_9pyconcert_CPlexModel(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)o);
  p->__pyx_vtab = __pyx_vtabptr_5pycpx_9pyconcert_CPlexModel;
  p->hooked_constraint = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)Py_None); Py_INCREF(Py_None);
  p->key_strings = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->variables = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5pycpx_9pyconcert_10CPlexModel_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5pycpx_9pyconcert_CPlexModel(PyObject *o) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *p = (struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5pycpx_9pyconcert_10CPlexModel_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->hooked_constraint);
  Py_CLEAR(p->key_strings);
  Py_CLEAR(p->variables);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5pycpx_9pyconcert_CPlexModel(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *p = (struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)o;
  if (p->hooked_constraint) {
    e = (*v)(((PyObject*)p->hooked_constraint), a); if (e) return e;
  }
  if (p->key_strings) {
    e = (*v)(p->key_strings, a); if (e) return e;
  }
  if (p->variables) {
    e = (*v)(p->variables, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5pycpx_9pyconcert_CPlexModel(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *p = (struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)o;
  tmp = ((PyObject*)p->hooked_constraint);
  p->hooked_constraint = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->key_strings);
  p->key_strings = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->variables);
  p->variables = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_5pycpx_9pyconcert_CPlexModel(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_5pycpx_9pyconcert_CPlexModel[] = {
  {__Pyx_NAMESTR("setVerbosity"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_5setVerbosity, METH_O, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_4setVerbosity)},
  {__Pyx_NAMESTR("new"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_7new, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_6new)},
  {__Pyx_NAMESTR("constrain"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_9constrain, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_8constrain)},
  {__Pyx_NAMESTR("removeConstraint"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_11removeConstraint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_10removeConstraint)},
  {__Pyx_NAMESTR("solve"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_13solve, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_12solve)},
  {__Pyx_NAMESTR("saveBasis"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_15saveBasis, METH_O, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_14saveBasis)},
  {__Pyx_NAMESTR("maximize"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_17maximize, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_16maximize)},
  {__Pyx_NAMESTR("minimize"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_19minimize, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_18minimize)},
  {__Pyx_NAMESTR("getSolverTime"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_21getSolverTime, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_20getSolverTime)},
  {__Pyx_NAMESTR("getNIterations"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_23getNIterations, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_22getNIterations)},
  {__Pyx_NAMESTR("value"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_25value, METH_O, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_24value)},
  {__Pyx_NAMESTR("asString"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_10CPlexModel_27asString, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_10CPlexModel_26asString)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_CPlexModel = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5pycpx_9pyconcert_CPlexModel, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CPlexModel = {
  0, /*mp_length*/
  __pyx_pw_5pycpx_9pyconcert_10CPlexModel_31__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5pycpx_9pyconcert_CPlexModel = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pycpx.pyconcert.CPlexModel"), /*tp_name*/
  sizeof(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pycpx_9pyconcert_CPlexModel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_5pycpx_9pyconcert_10CPlexModel_29__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_CPlexModel, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CPlexModel, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5pycpx_9pyconcert_CPlexModel, /*tp_traverse*/
  __pyx_tp_clear_5pycpx_9pyconcert_CPlexModel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pycpx_9pyconcert_CPlexModel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pycpx_9pyconcert_CPlexModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5pycpx_9pyconcert_CPlexExpression __pyx_vtable_5pycpx_9pyconcert_CPlexExpression;

static PyObject *__pyx_tp_new_5pycpx_9pyconcert_CPlexExpression(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)o);
  p->__pyx_vtab = __pyx_vtabptr_5pycpx_9pyconcert_CPlexExpression;
  p->model = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)Py_None); Py_INCREF(Py_None);
  p->original_size = Py_None; Py_INCREF(Py_None);
  p->key = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->__array_priority__ = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5pycpx_9pyconcert_CPlexExpression(PyObject *o) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *p = (struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->model);
  Py_CLEAR(p->original_size);
  Py_CLEAR(p->key);
  Py_CLEAR(p->__array_priority__);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5pycpx_9pyconcert_CPlexExpression(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *p = (struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)o;
  if (p->model) {
    e = (*v)(((PyObject*)p->model), a); if (e) return e;
  }
  if (p->original_size) {
    e = (*v)(p->original_size, a); if (e) return e;
  }
  if (p->__array_priority__) {
    e = (*v)(p->__array_priority__, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5pycpx_9pyconcert_CPlexExpression(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *p = (struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *)o;
  tmp = ((PyObject*)p->model);
  p->model = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->original_size);
  p->original_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__array_priority__);
  p->__array_priority__ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_5pycpx_9pyconcert_CPlexExpression(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_5pycpx_9pyconcert_15CPlexExpression___array_priority__(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_18__array_priority___1__get__(o);
}

static PyMethodDef __pyx_methods_5pycpx_9pyconcert_CPlexExpression[] = {
  {__Pyx_NAMESTR("__radd__"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_5__radd__, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__rsub__"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_9__rsub__, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__rmul__"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_13__rmul__, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__rdiv__"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_17__rdiv__, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_19dot, METH_O, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_18dot)},
  {__Pyx_NAMESTR("mult"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_21mult, METH_O, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_20mult)},
  {__Pyx_NAMESTR("T"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_25T, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_24T)},
  {__Pyx_NAMESTR("transpose"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_27transpose, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_26transpose)},
  {__Pyx_NAMESTR("A"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_29A, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_28A)},
  {__Pyx_NAMESTR("M"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_31M, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_30M)},
  {__Pyx_NAMESTR("shape"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_35shape, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_34shape)},
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_37size, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_36size)},
  {__Pyx_NAMESTR("sum"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_43sum, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_42sum)},
  {__Pyx_NAMESTR("mean"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_45mean, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_44mean)},
  {__Pyx_NAMESTR("max"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_47max, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_46max)},
  {__Pyx_NAMESTR("min"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_49min, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_48min)},
  {__Pyx_NAMESTR("abs"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_53abs, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_52abs)},
  {__Pyx_NAMESTR("copy"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_55copy, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_5pycpx_9pyconcert_15CPlexExpression_54copy)},
  {__Pyx_NAMESTR("__copy__"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_63__copy__, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__deepcopy__"), (PyCFunction)__pyx_pw_5pycpx_9pyconcert_15CPlexExpression_65__deepcopy__, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5pycpx_9pyconcert_CPlexExpression[] = {
  {(char *)"__array_priority__", __pyx_getprop_5pycpx_9pyconcert_15CPlexExpression___array_priority__, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CPlexExpression = {
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_3__add__, /*nb_add*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_7__sub__, /*nb_subtract*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_11__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_15__div__, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_33__neg__, /*nb_negative*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_61__pos__, /*nb_positive*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_51__abs__, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_CPlexExpression = {
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_59__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5pycpx_9pyconcert_CPlexExpression, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CPlexExpression = {
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_59__len__, /*mp_length*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_41__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5pycpx_9pyconcert_CPlexExpression = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pycpx.pyconcert.CPlexExpression"), /*tp_name*/
  sizeof(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pycpx_9pyconcert_CPlexExpression, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CPlexExpression, /*tp_as_number*/
  &__pyx_tp_as_sequence_CPlexExpression, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CPlexExpression, /*tp_as_mapping*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_39__hash__, /*tp_hash*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_67__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5pycpx_9pyconcert_CPlexExpression, /*tp_traverse*/
  __pyx_tp_clear_5pycpx_9pyconcert_CPlexExpression, /*tp_clear*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_23__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pycpx_9pyconcert_CPlexExpression, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5pycpx_9pyconcert_CPlexExpression, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexExpression_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pycpx_9pyconcert_CPlexExpression, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pycpx_9pyconcert_NumericalArrayWrapper(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *)o);
  p->X = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5pycpx_9pyconcert_NumericalArrayWrapper(PyObject *o) {
  struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *p = (struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5pycpx_9pyconcert_21NumericalArrayWrapper_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->X);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5pycpx_9pyconcert_NumericalArrayWrapper(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *p = (struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *)o;
  if (p->X) {
    e = (*v)(((PyObject*)p->X), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5pycpx_9pyconcert_NumericalArrayWrapper(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *p = (struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper *)o;
  tmp = ((PyObject*)p->X);
  p->X = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5pycpx_9pyconcert_NumericalArrayWrapper[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5pycpx_9pyconcert_NumericalArrayWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pycpx.pyconcert.NumericalArrayWrapper"), /*tp_name*/
  sizeof(struct __pyx_obj_5pycpx_9pyconcert_NumericalArrayWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pycpx_9pyconcert_NumericalArrayWrapper, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5pycpx_9pyconcert_NumericalArrayWrapper, /*tp_traverse*/
  __pyx_tp_clear_5pycpx_9pyconcert_NumericalArrayWrapper, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pycpx_9pyconcert_NumericalArrayWrapper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pycpx_9pyconcert_21NumericalArrayWrapper_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pycpx_9pyconcert_NumericalArrayWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5pycpx_9pyconcert_CPlexConstraint(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)o);
  p->model = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)Py_None); Py_INCREF(Py_None);
  p->hooked_constraint = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5pycpx_9pyconcert_CPlexConstraint(PyObject *o) {
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *p = (struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5pycpx_9pyconcert_15CPlexConstraint_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->model);
  Py_CLEAR(p->hooked_constraint);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5pycpx_9pyconcert_CPlexConstraint(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *p = (struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)o;
  if (p->model) {
    e = (*v)(((PyObject*)p->model), a); if (e) return e;
  }
  if (p->hooked_constraint) {
    e = (*v)(((PyObject*)p->hooked_constraint), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5pycpx_9pyconcert_CPlexConstraint(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *p = (struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)o;
  tmp = ((PyObject*)p->model);
  p->model = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->hooked_constraint);
  p->hooked_constraint = ((struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5pycpx_9pyconcert_CPlexConstraint[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CPlexConstraint = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexConstraint_5__nonzero__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_5pycpx_9pyconcert_CPlexConstraint = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pycpx.pyconcert.CPlexConstraint"), /*tp_name*/
  sizeof(struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5pycpx_9pyconcert_CPlexConstraint, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CPlexConstraint, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5pycpx_9pyconcert_CPlexConstraint, /*tp_traverse*/
  __pyx_tp_clear_5pycpx_9pyconcert_CPlexConstraint, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5pycpx_9pyconcert_CPlexConstraint, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5pycpx_9pyconcert_15CPlexConstraint_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5pycpx_9pyconcert_CPlexConstraint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("pyconcert"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_kp_s_Algorithm_s_not_recognized_can_b, __pyx_k_Algorithm_s_not_recognized_can_b, sizeof(__pyx_k_Algorithm_s_not_recognized_can_b), 0, 0, 1, 0},
  {&__pyx_n_s_CPlexException, __pyx_k_CPlexException, sizeof(__pyx_k_CPlexException), 0, 0, 1, 1},
  {&__pyx_kp_s_CPlexExpression_not_meant_to_be, __pyx_k_CPlexExpression_not_meant_to_be, sizeof(__pyx_k_CPlexExpression_not_meant_to_be), 0, 0, 1, 0},
  {&__pyx_n_s_CPlexInitError, __pyx_k_CPlexInitError, sizeof(__pyx_k_CPlexInitError), 0, 0, 1, 1},
  {&__pyx_kp_u_CPlexModel_asString_line_2298, __pyx_k_CPlexModel_asString_line_2298, sizeof(__pyx_k_CPlexModel_asString_line_2298), 0, 1, 0, 0},
  {&__pyx_kp_u_CPlexModel_new_line_1465, __pyx_k_CPlexModel_new_line_1465, sizeof(__pyx_k_CPlexModel_new_line_1465), 0, 1, 0, 0},
  {&__pyx_kp_u_CPlexModel_removeConstraint_line, __pyx_k_CPlexModel_removeConstraint_line, sizeof(__pyx_k_CPlexModel_removeConstraint_line), 0, 1, 0, 0},
  {&__pyx_kp_u_CPlexModel_solve_line_1840, __pyx_k_CPlexModel_solve_line_1840, sizeof(__pyx_k_CPlexModel_solve_line_1840), 0, 1, 0, 0},
  {&__pyx_kp_u_CPlexModel_value_line_2188, __pyx_k_CPlexModel_value_line_2188, sizeof(__pyx_k_CPlexModel_value_line_2188), 0, 1, 0, 0},
  {&__pyx_n_s_CPlexNoSolution, __pyx_k_CPlexNoSolution, sizeof(__pyx_k_CPlexNoSolution), 0, 0, 1, 1},
  {&__pyx_kp_s_CPlex_model_not_properly_initial, __pyx_k_CPlex_model_not_properly_initial, sizeof(__pyx_k_CPlex_model_not_properly_initial), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_retrieve_variables_from, __pyx_k_Can_only_retrieve_variables_from, sizeof(__pyx_k_Can_only_retrieve_variables_from), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_retrieve_variables_or_e, __pyx_k_Can_only_retrieve_variables_or_e, sizeof(__pyx_k_Can_only_retrieve_variables_or_e), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_both_maximize_and_minimiz, __pyx_k_Cannot_both_maximize_and_minimiz, sizeof(__pyx_k_Cannot_both_maximize_and_minimiz), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_combine_expressions_from, __pyx_k_Cannot_combine_expressions_from, sizeof(__pyx_k_Cannot_combine_expressions_from), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_work_with_arrays_matrices, __pyx_k_Cannot_work_with_arrays_matrices, sizeof(__pyx_k_Cannot_work_with_arrays_matrices), 0, 0, 1, 0},
  {&__pyx_kp_s_Class_CPlexConstraint_not_meant, __pyx_k_Class_CPlexConstraint_not_meant, sizeof(__pyx_k_Class_CPlexConstraint_not_meant), 0, 0, 1, 0},
  {&__pyx_kp_s_Constraint_d_not_from_this_model, __pyx_k_Constraint_d_not_from_this_model, sizeof(__pyx_k_Constraint_d_not_from_this_model), 0, 0, 1, 0},
  {&__pyx_kp_u_Creates_a_new_variable_or_set_o, __pyx_k_Creates_a_new_variable_or_set_o, sizeof(__pyx_k_Creates_a_new_variable_or_set_o), 0, 1, 0, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Error_adding_constraint_s, __pyx_k_Error_adding_constraint_s, sizeof(__pyx_k_Error_adding_constraint_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_initializing_new_cplex_mod, __pyx_k_Error_initializing_new_cplex_mod, sizeof(__pyx_k_Error_initializing_new_cplex_mod), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_removing_constraint_s, __pyx_k_Error_removing_constraint_s, sizeof(__pyx_k_Error_removing_constraint_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_setting_objective_s, __pyx_k_Error_setting_objective_s, sizeof(__pyx_k_Error_setting_objective_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_setting_starting_values_s, __pyx_k_Error_setting_starting_values_s, sizeof(__pyx_k_Error_setting_starting_values_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_while_retrieving_variables, __pyx_k_Error_while_retrieving_variables, sizeof(__pyx_k_Error_while_retrieving_variables), 0, 0, 1, 0},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_kp_s_Exception_raised_if_the_model_i, __pyx_k_Exception_raised_if_the_model_i, sizeof(__pyx_k_Exception_raised_if_the_model_i), 0, 0, 1, 0},
  {&__pyx_kp_s_Expected_constraint_in_argument, __pyx_k_Expected_constraint_in_argument, sizeof(__pyx_k_Expected_constraint_in_argument), 0, 0, 1, 0},
  {&__pyx_kp_s_Expression_arrays_only_2_dimensi, __pyx_k_Expression_arrays_only_2_dimensi, sizeof(__pyx_k_Expression_arrays_only_2_dimensi), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_array_indices_d_d_n, __pyx_k_Incompatible_array_indices_d_d_n, sizeof(__pyx_k_Incompatible_array_indices_d_d_n), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Index_s_not_understood, __pyx_k_Index_s_not_understood, sizeof(__pyx_k_Index_s_not_understood), 0, 0, 1, 0},
  {&__pyx_kp_s_Indexing_error_for_s_constraint, __pyx_k_Indexing_error_for_s_constraint, sizeof(__pyx_k_Indexing_error_for_s_constraint), 0, 0, 1, 0},
  {&__pyx_kp_s_Indexing_error_in_dot_product_Le, __pyx_k_Indexing_error_in_dot_product_Le, sizeof(__pyx_k_Indexing_error_in_dot_product_Le), 0, 0, 1, 0},
  {&__pyx_kp_s_Indexing_error_in_s_Left_shape_d, __pyx_k_Indexing_error_in_s_Left_shape_d, sizeof(__pyx_k_Indexing_error_in_s_Left_shape_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_index_d_d, __pyx_k_Invalid_index_d_d, sizeof(__pyx_k_Invalid_index_d_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_index_or_range, __pyx_k_Invalid_index_or_range, sizeof(__pyx_k_Invalid_index_or_range), 0, 0, 1, 0},
  {&__pyx_kp_s_Iteraction_with_type_s_not_suppo, __pyx_k_Iteraction_with_type_s_not_suppo, sizeof(__pyx_k_Iteraction_with_type_s_not_suppo), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_kp_s_NumericalArrayWrapper_not_meant, __pyx_k_NumericalArrayWrapper_not_meant, sizeof(__pyx_k_NumericalArrayWrapper_not_meant), 0, 0, 1, 0},
  {&__pyx_kp_s_Objective_must_be_an_expression, __pyx_k_Objective_must_be_an_expression, sizeof(__pyx_k_Objective_must_be_an_expression), 0, 0, 1, 0},
  {&__pyx_kp_s_Raised_if_there_is_an_error_ini, __pyx_k_Raised_if_there_is_an_error_ini, sizeof(__pyx_k_Raised_if_there_is_an_error_ini), 0, 0, 1, 0},
  {&__pyx_kp_u_Removes_one_or_more_constraints, __pyx_k_Removes_one_or_more_constraints, sizeof(__pyx_k_Removes_one_or_more_constraints), 0, 1, 0, 0},
  {&__pyx_kp_u_Returns_a_scalar_numpy_array_or, __pyx_k_Returns_a_scalar_numpy_array_or, sizeof(__pyx_k_Returns_a_scalar_numpy_array_or), 0, 1, 0, 0},
  {&__pyx_kp_u_Returns_a_string_representation, __pyx_k_Returns_a_string_representation, sizeof(__pyx_k_Returns_a_string_representation), 0, 1, 0, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Size_s_not_understood, __pyx_k_Size_s_not_understood, sizeof(__pyx_k_Size_s_not_understood), 0, 0, 1, 0},
  {&__pyx_kp_u_Solves_the_current_model_trying, __pyx_k_Solves_the_current_model_trying, sizeof(__pyx_k_Solves_the_current_model_trying), 0, 1, 0, 0},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_kp_s_The_base_class_for_any_exceptio, __pyx_k_The_base_class_for_any_exceptio, sizeof(__pyx_k_The_base_class_for_any_exceptio), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_understand_numerical_a, __pyx_k_Unable_to_understand_numerical_a, sizeof(__pyx_k_Unable_to_understand_numerical_a), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_type_s, __pyx_k_Unknown_type_s, sizeof(__pyx_k_Unknown_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_Variable_mode_s_not_recognized, __pyx_k_Variable_mode_s_not_recognized, sizeof(__pyx_k_Variable_mode_s_not_recognized), 0, 0, 1, 0},
  {&__pyx_kp_s_Verbosity_must_be_0_1_2_or_3, __pyx_k_Verbosity_must_be_0_1_2_or_3, sizeof(__pyx_k_Verbosity_must_be_0_1_2_or_3), 0, 0, 1, 0},
  {&__pyx_n_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 1},
  {&__pyx_kp_s__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 0, 1, 0},
  {&__pyx_kp_s__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 0, 1, 0},
  {&__pyx_kp_s__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 0, 1, 0},
  {&__pyx_kp_s__35, __pyx_k__35, sizeof(__pyx_k__35), 0, 0, 1, 0},
  {&__pyx_kp_s__36, __pyx_k__36, sizeof(__pyx_k__36), 0, 0, 1, 0},
  {&__pyx_kp_s__37, __pyx_k__37, sizeof(__pyx_k__37), 0, 0, 1, 0},
  {&__pyx_kp_s__38, __pyx_k__38, sizeof(__pyx_k__38), 0, 0, 1, 0},
  {&__pyx_kp_s__39, __pyx_k__39, sizeof(__pyx_k__39), 0, 0, 1, 0},
  {&__pyx_kp_s__40, __pyx_k__40, sizeof(__pyx_k__40), 0, 0, 1, 0},
  {&__pyx_kp_s__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 0, 1, 0},
  {&__pyx_n_s_abs, __pyx_k_abs, sizeof(__pyx_k_abs), 0, 0, 1, 1},
  {&__pyx_n_s_algorithm, __pyx_k_algorithm, sizeof(__pyx_k_algorithm), 0, 0, 1, 1},
  {&__pyx_n_s_amax, __pyx_k_amax, sizeof(__pyx_k_amax), 0, 0, 1, 1},
  {&__pyx_n_s_amin, __pyx_k_amin, sizeof(__pyx_k_amin), 0, 0, 1, 1},
  {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
  {&__pyx_n_s_argsort, __pyx_k_argsort, sizeof(__pyx_k_argsort), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asString, __pyx_k_asString, sizeof(__pyx_k_asString), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_auto, __pyx_k_auto, sizeof(__pyx_k_auto), 0, 0, 1, 1},
  {&__pyx_n_s_automatic, __pyx_k_automatic, sizeof(__pyx_k_automatic), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_barrier, __pyx_k_barrier, sizeof(__pyx_k_barrier), 0, 0, 1, 1},
  {&__pyx_n_s_bas, __pyx_k_bas, sizeof(__pyx_k_bas), 0, 0, 1, 1},
  {&__pyx_n_s_basis_file, __pyx_k_basis_file, sizeof(__pyx_k_basis_file), 0, 0, 1, 1},
  {&__pyx_n_s_binary, __pyx_k_binary, sizeof(__pyx_k_binary), 0, 0, 1, 1},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_n_s_boolean, __pyx_k_boolean, sizeof(__pyx_k_boolean), 0, 0, 1, 1},
  {&__pyx_n_s_concurrent, __pyx_k_concurrent, sizeof(__pyx_k_concurrent), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_kp_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 0},
  {&__pyx_kp_s_d_2, __pyx_k_d_2, sizeof(__pyx_k_d_2), 0, 0, 1, 0},
  {&__pyx_n_s_d_3, __pyx_k_d_3, sizeof(__pyx_k_d_3), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dual, __pyx_k_dual, sizeof(__pyx_k_dual), 0, 0, 1, 1},
  {&__pyx_n_s_emphasis, __pyx_k_emphasis, sizeof(__pyx_k_emphasis), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_float_2, __pyx_k_float_2, sizeof(__pyx_k_float_2), 0, 0, 1, 1},
  {&__pyx_n_s_getitem, __pyx_k_getitem, sizeof(__pyx_k_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
  {&__pyx_n_s_int_2, __pyx_k_int_2, sizeof(__pyx_k_int_2), 0, 0, 1, 1},
  {&__pyx_n_s_integer, __pyx_k_integer, sizeof(__pyx_k_integer), 0, 0, 1, 1},
  {&__pyx_n_s_isfinite, __pyx_k_isfinite, sizeof(__pyx_k_isfinite), 0, 0, 1, 1},
  {&__pyx_n_s_isscalar, __pyx_k_isscalar, sizeof(__pyx_k_isscalar), 0, 0, 1, 1},
  {&__pyx_n_s_issparse, __pyx_k_issparse, sizeof(__pyx_k_issparse), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_lambda, __pyx_k_lambda, sizeof(__pyx_k_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_lb, __pyx_k_lb, sizeof(__pyx_k_lb), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_lower_bound, __pyx_k_lower_bound, sizeof(__pyx_k_lower_bound), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_max_threads, __pyx_k_max_threads, sizeof(__pyx_k_max_threads), 0, 0, 1, 1},
  {&__pyx_n_s_maximize, __pyx_k_maximize, sizeof(__pyx_k_maximize), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_minimize, __pyx_k_minimize, sizeof(__pyx_k_minimize), 0, 0, 1, 1},
  {&__pyx_n_s_mkstemp, __pyx_k_mkstemp, sizeof(__pyx_k_mkstemp), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 0, 1, 1},
  {&__pyx_n_s_ndarray, __pyx_k_ndarray, sizeof(__pyx_k_ndarray), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_net, __pyx_k_net, sizeof(__pyx_k_net), 0, 0, 1, 1},
  {&__pyx_n_s_netflow, __pyx_k_netflow, sizeof(__pyx_k_netflow), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_numpy_random, __pyx_k_numpy_random, sizeof(__pyx_k_numpy_random), 0, 0, 1, 1},
  {&__pyx_n_s_objective, __pyx_k_objective, sizeof(__pyx_k_objective), 0, 0, 1, 1},
  {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_primal, __pyx_k_primal, sizeof(__pyx_k_primal), 0, 0, 1, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_pycpx_pyconcert, __pyx_k_pycpx_pyconcert, sizeof(__pyx_k_pycpx_pyconcert), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_releasebuffer, __pyx_k_pyx_releasebuffer, sizeof(__pyx_k_pyx_releasebuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ravel, __pyx_k_ravel, sizeof(__pyx_k_ravel), 0, 0, 1, 1},
  {&__pyx_n_s_real, __pyx_k_real, sizeof(__pyx_k_real), 0, 0, 1, 1},
  {&__pyx_n_s_recycle_basis, __pyx_k_recycle_basis, sizeof(__pyx_k_recycle_basis), 0, 0, 1, 1},
  {&__pyx_n_s_recycle_variables, __pyx_k_recycle_variables, sizeof(__pyx_k_recycle_variables), 0, 0, 1, 1},
  {&__pyx_n_s_relative_gap, __pyx_k_relative_gap, sizeof(__pyx_k_relative_gap), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_rn, __pyx_k_rn, sizeof(__pyx_k_rn), 0, 0, 1, 1},
  {&__pyx_kp_s_s_d, __pyx_k_s_d, sizeof(__pyx_k_s_d), 0, 0, 1, 0},
  {&__pyx_kp_s_s_d_d, __pyx_k_s_d_d, sizeof(__pyx_k_s_d_d), 0, 0, 1, 0},
  {&__pyx_kp_s_s_d_d_d_d_d, __pyx_k_s_d_d_d_d_d, sizeof(__pyx_k_s_d_d_d_d_d), 0, 0, 1, 0},
  {&__pyx_kp_s_s_must_be_convertable_to_1d_num, __pyx_k_s_must_be_convertable_to_1d_num, sizeof(__pyx_k_s_must_be_convertable_to_1d_num), 0, 0, 1, 0},
  {&__pyx_kp_s_s_must_be_convertable_to_1d_num_2, __pyx_k_s_must_be_convertable_to_1d_num_2, sizeof(__pyx_k_s_must_be_convertable_to_1d_num_2), 0, 0, 1, 0},
  {&__pyx_kp_s_s_must_be_convertable_to_1d_num_3, __pyx_k_s_must_be_convertable_to_1d_num_3, sizeof(__pyx_k_s_must_be_convertable_to_1d_num_3), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_scalar, __pyx_k_scalar, sizeof(__pyx_k_scalar), 0, 0, 1, 1},
  {&__pyx_n_s_scipy, __pyx_k_scipy, sizeof(__pyx_k_scipy), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_sparse, __pyx_k_scipy_sparse, sizeof(__pyx_k_scipy_sparse), 0, 0, 1, 1},
  {&__pyx_n_s_setVerbosity, __pyx_k_setVerbosity, sizeof(__pyx_k_setVerbosity), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_sifting, __pyx_k_sifting, sizeof(__pyx_k_sifting), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_solve, __pyx_k_solve, sizeof(__pyx_k_solve), 0, 0, 1, 1},
  {&__pyx_n_s_sparse, __pyx_k_sparse, sizeof(__pyx_k_sparse), 0, 0, 1, 1},
  {&__pyx_n_s_starting_dict, __pyx_k_starting_dict, sizeof(__pyx_k_starting_dict), 0, 0, 1, 1},
  {&__pyx_n_s_suffix, __pyx_k_suffix, sizeof(__pyx_k_suffix), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_tempfile, __pyx_k_tempfile, sizeof(__pyx_k_tempfile), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time_limit, __pyx_k_time_limit, sizeof(__pyx_k_time_limit), 0, 0, 1, 1},
  {&__pyx_n_s_tmp_cplex, __pyx_k_tmp_cplex, sizeof(__pyx_k_tmp_cplex), 0, 0, 1, 1},
  {&__pyx_n_s_todense, __pyx_k_todense, sizeof(__pyx_k_todense), 0, 0, 1, 1},
  {&__pyx_n_s_transpose, __pyx_k_transpose, sizeof(__pyx_k_transpose), 0, 0, 1, 1},
  {&__pyx_n_s_tree_limit, __pyx_k_tree_limit, sizeof(__pyx_k_tree_limit), 0, 0, 1, 1},
  {&__pyx_n_s_ub, __pyx_k_ub, sizeof(__pyx_k_ub), 0, 0, 1, 1},
  {&__pyx_n_s_uint, __pyx_k_uint, sizeof(__pyx_k_uint), 0, 0, 1, 1},
  {&__pyx_n_s_uint32, __pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 0, 1, 1},
  {&__pyx_n_s_uint64, __pyx_k_uint64, sizeof(__pyx_k_uint64), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_upper_bound, __pyx_k_upper_bound, sizeof(__pyx_k_upper_bound), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_variable_select, __pyx_k_variable_select, sizeof(__pyx_k_variable_select), 0, 0, 1, 1},
  {&__pyx_n_s_verbosity, __pyx_k_verbosity, sizeof(__pyx_k_verbosity), 0, 0, 1, 1},
  {&__pyx_n_s_vtype, __pyx_k_vtype, sizeof(__pyx_k_vtype), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pycpx/pyconcert.pyx":311
 * 
 *     def __init__(self):
 *         raise Exception("NumericalArrayWrapper not meant to be instantiated directly.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_NumericalArrayWrapper_not_meant); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pycpx/pyconcert.pyx":349
 *     else:
 *         if type(Xo) is not ndarray:
 *             raise TypeError("Unable to understand numerical array value.")             # <<<<<<<<<<<<<<
 * 
 *     cdef ar X = asarray(Xo, dtype=float_)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_understand_numerical_a); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pycpx/pyconcert.pyx":414
 * 
 *     if expr1.model is not expr2.model:
 *         raise ValueError("Cannot combine expressions from two different models.")             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexExpression dest = newEmptyExpression(op_type, expr1.model, expr1.data.md(), expr2.data.md())
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Cannot_combine_expressions_from); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pycpx/pyconcert.pyx":429
 * 
 *     if X.ndim >= 3:
 *         raise ValueError("Cannot work with arrays/matrices of dimension >= 3.")             # <<<<<<<<<<<<<<
 * 
 *     X = asarray(X, dtype=float_)
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Cannot_work_with_arrays_matrices); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pycpx/pyconcert.pyx":566
 *     elif type(t) is Ellipsis:
 *         sl_is_slice = True
 *         s0 = slice(None,None,None)             # <<<<<<<<<<<<<<
 *     elif type(t) is int or type(t) is long:
 *         sl_is_slice = False
 */
  __pyx_tuple__5 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pycpx/pyconcert.pyx":582
 * 
 *     if shape == size:
 *         raise IndexError("Invalid index or range.")             # <<<<<<<<<<<<<<
 * 
 *     s[0] = Slice(shape, size, step)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Invalid_index_or_range); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pycpx/pyconcert.pyx":598
 * 
 *     def __init__(self):
 *         raise Exception("CPlexExpression not meant to be instantiated directly.")             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, v):
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_CPlexExpression_not_meant_to_be); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "pycpx/pyconcert.pyx":767
 *                 return self.__getitem__(t[0])
 *             if len(t) != 2:
 *                 raise IndexError("Expression arrays only 2 dimensional.")             # <<<<<<<<<<<<<<
 * 
 *             sl0_is_slice = setSliceParts(&s0, t[0], self.data.md().shape(0))
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Expression_arrays_only_2_dimensi); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pycpx/pyconcert.pyx":1193
 * 
 *     def __init__(self):
 *         raise Exception("Class CPlexConstraint not meant to be instantiated directly.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Class_CPlexConstraint_not_meant); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pycpx/pyconcert.pyx":1229
 *         c.hooked_constraint = None
 * 
 *     model.hook_id_1 = id(None)             # <<<<<<<<<<<<<<
 *     model.hook_id_2 = id(None)
 *     model.hooked_constraint = None
 */
  __pyx_tuple__11 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "pycpx/pyconcert.pyx":1230
 * 
 *     model.hook_id_1 = id(None)
 *     model.hook_id_2 = id(None)             # <<<<<<<<<<<<<<
 *     model.hooked_constraint = None
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "pycpx/pyconcert.pyx":1256
 * 
 *     if expr1.model is not expr2.model:
 *         raise ValueError("Cannot combine expressions from two different models.")             # <<<<<<<<<<<<<<
 * 
 *     cdef CPlexConstraint dest = newEmptyConstraint(
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Cannot_combine_expressions_from); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "pycpx/pyconcert.pyx":1271
 * 
 *     if X.ndim >= 3:
 *         raise ValueError("Cannot work with arrays/matrices of dimension >= 3.")             # <<<<<<<<<<<<<<
 * 
 *     X = asarray(X, dtype=float_)
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Cannot_work_with_arrays_matrices); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "pycpx/pyconcert.pyx":1457
 * 
 *         if verbosity not in [0,1,2,3]:
 *             raise ValueError("Verbosity must be 0, 1, 2, or 3.")             # <<<<<<<<<<<<<<
 * 
 *         self.verbosity = verbosity
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Verbosity_must_be_0_1_2_or_3); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "pycpx/pyconcert.pyx":1463
 *     cdef _checkOkay(self):
 *         if self.model == NULL:
 *             raise RuntimeError("CPlex model not properly initialized!")             # <<<<<<<<<<<<<<
 * 
 *     def new(self, size = s_scalar, vtype = 'real', lb = None, ub = None, str name = None):
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_CPlex_model_not_properly_initial); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "pycpx/pyconcert.pyx":2017
 * 
 *         if not type(objective) is CPlexExpression:
 *             raise TypeError("Objective must be an expression.")             # <<<<<<<<<<<<<<
 * 
 *         obj = objective
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_Objective_must_be_an_expression); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "pycpx/pyconcert.pyx":2036
 * 
 *             if _maximize == _minimize:
 *                 raise ValueError("Cannot both maximize and minimize the problem at the same time.")             # <<<<<<<<<<<<<<
 * 
 *         ################################################################################
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Cannot_both_maximize_and_minimiz); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "pycpx/pyconcert.pyx":2071
 *                 self.model.setParameter(RootAlg, <int> model_lookup[algorithm.lower()])
 *             except KeyError:
 *                 raise ValueError("Algorithm '%s' not recognized, can be auto, primal, dual, barrier, sifting, concurrent, or netflow.")             # <<<<<<<<<<<<<<
 * 
 *             if max_threads:
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_Algorithm_s_not_recognized_can_b); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "pycpx/pyconcert.pyx":2246
 * 
 *         if type(var_block_or_expression) is not CPlexExpression:
 *             raise TypeError("Can only retrieve variables or expressions.")             # <<<<<<<<<<<<<<
 * 
 *         # if not self.model.solved():
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Can_only_retrieve_variables_or_e); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "pycpx/pyconcert.pyx":2256
 * 
 *         if v.model is not self:
 *             raise ValueError("Can only retrieve variables from the model in which they were created.")             # <<<<<<<<<<<<<<
 * 
 *         # print "var_block size = ", (v.data.md().shape(0), v.data.md().shape(1))
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_Can_only_retrieve_variables_from); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "pycpx/pyconcert.pyx":2279
 *             if size == s_scalar:
 *                 assert X.shape[0] == X.shape[1] == 1
 *                 return M[0,0]             # <<<<<<<<<<<<<<
 * 
 *             elif (type(size) is tuple and len(<tuple>size) == 2):
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_20_1 = PyFloat_FromDouble(20.1); if (unlikely(!__pyx_float_20_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpyconcert(void); /*proto*/
PyMODINIT_FUNC initpyconcert(void)
#else
PyMODINIT_FUNC PyInit_pyconcert(void); /*proto*/
PyMODINIT_FUNC PyInit_pyconcert(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_pyconcert(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("pyconcert"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pycpx__pyconcert) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pycpx.pyconcert")) {
      if (unlikely(PyDict_SetItemString(modules, "pycpx.pyconcert", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_5pycpx_9pyconcert_issparse = Py_None; Py_INCREF(Py_None);
  __pyx_v_5pycpx_9pyconcert_s_scalar = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5pycpx_9pyconcert__op_type_strings = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5pycpx_9pyconcert__vartype_map = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5pycpx_9pyconcert_model_lookup = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_5pycpx_9pyconcert_CPlexModel = &__pyx_vtable_5pycpx_9pyconcert_CPlexModel;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel.setVerbosity = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, int, int __pyx_skip_dispatch))__pyx_f_5pycpx_9pyconcert_10CPlexModel_setVerbosity;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel._checkOkay = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *))__pyx_f_5pycpx_9pyconcert_10CPlexModel__checkOkay;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel._checkVerbosity = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *))__pyx_f_5pycpx_9pyconcert_10CPlexModel__checkVerbosity;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel._getKeyStringId = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *, MetaData))__pyx_f_5pycpx_9pyconcert_10CPlexModel__getKeyStringId;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel._checkConstraints = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *))__pyx_f_5pycpx_9pyconcert_10CPlexModel__checkConstraints;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel._addConstraint = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *))__pyx_f_5pycpx_9pyconcert_10CPlexModel__addConstraint;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel._addConstraints = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *))__pyx_f_5pycpx_9pyconcert_10CPlexModel__addConstraints;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel._removeConstraint = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, struct __pyx_obj_5pycpx_9pyconcert_CPlexConstraint *))__pyx_f_5pycpx_9pyconcert_10CPlexModel__removeConstraint;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel._removeConstraints = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *))__pyx_f_5pycpx_9pyconcert_10CPlexModel__removeConstraints;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel.solve = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5pycpx_9pyconcert_10CPlexModel_solve *__pyx_optional_args))__pyx_f_5pycpx_9pyconcert_10CPlexModel_solve;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel.value = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, PyObject *, int __pyx_skip_dispatch))__pyx_f_5pycpx_9pyconcert_10CPlexModel_value;
  __pyx_vtable_5pycpx_9pyconcert_CPlexModel.asString = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexModel *, int __pyx_skip_dispatch))__pyx_f_5pycpx_9pyconcert_10CPlexModel_asString;
  if (PyType_Ready(&__pyx_type_5pycpx_9pyconcert_CPlexModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5pycpx_9pyconcert_CPlexModel.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5pycpx_9pyconcert_CPlexModel.tp_dict, __pyx_vtabptr_5pycpx_9pyconcert_CPlexModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CPlexModel", (PyObject *)&__pyx_type_5pycpx_9pyconcert_CPlexModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pycpx_9pyconcert_CPlexModel = &__pyx_type_5pycpx_9pyconcert_CPlexModel;
  __pyx_vtabptr_5pycpx_9pyconcert_CPlexExpression = &__pyx_vtable_5pycpx_9pyconcert_CPlexExpression;
  __pyx_vtable_5pycpx_9pyconcert_CPlexExpression.transpose = (PyObject *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, int __pyx_skip_dispatch))__pyx_f_5pycpx_9pyconcert_15CPlexExpression_transpose;
  __pyx_vtable_5pycpx_9pyconcert_CPlexExpression.sum = (struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *(*)(struct __pyx_obj_5pycpx_9pyconcert_CPlexExpression *, int __pyx_skip_dispatch, struct __pyx_opt_args_5pycpx_9pyconcert_15CPlexExpression_sum *__pyx_optional_args))__pyx_f_5pycpx_9pyconcert_15CPlexExpression_sum;
  if (PyType_Ready(&__pyx_type_5pycpx_9pyconcert_CPlexExpression) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5pycpx_9pyconcert_CPlexExpression.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5pycpx_9pyconcert_CPlexExpression.tp_dict, __pyx_vtabptr_5pycpx_9pyconcert_CPlexExpression) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CPlexExpression", (PyObject *)&__pyx_type_5pycpx_9pyconcert_CPlexExpression) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pycpx_9pyconcert_CPlexExpression = &__pyx_type_5pycpx_9pyconcert_CPlexExpression;
  if (PyType_Ready(&__pyx_type_5pycpx_9pyconcert_NumericalArrayWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5pycpx_9pyconcert_NumericalArrayWrapper.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "NumericalArrayWrapper", (PyObject *)&__pyx_type_5pycpx_9pyconcert_NumericalArrayWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pycpx_9pyconcert_NumericalArrayWrapper = &__pyx_type_5pycpx_9pyconcert_NumericalArrayWrapper;
  if (PyType_Ready(&__pyx_type_5pycpx_9pyconcert_CPlexConstraint) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5pycpx_9pyconcert_CPlexConstraint.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "CPlexConstraint", (PyObject *)&__pyx_type_5pycpx_9pyconcert_CPlexConstraint) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pycpx_9pyconcert_CPlexConstraint = &__pyx_type_5pycpx_9pyconcert_CPlexConstraint;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pycpx/pyconcert.pyx":6
 * cimport cython
 * 
 * from numpy import int_, int32,uint32,int64, uint64, float32, float64,\             # <<<<<<<<<<<<<<
 *     uint, empty, ones, zeros, uint, arange, isscalar, amax, amin, \
 *     ndarray, array, asarray, isfinite, argsort, matrix, nan, inf, float_
 */
  __pyx_t_1 = PyList_New(25); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_int);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_int);
  __Pyx_GIVEREF(__pyx_n_s_int);
  __Pyx_INCREF(__pyx_n_s_int32);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_int32);
  __Pyx_GIVEREF(__pyx_n_s_int32);
  __Pyx_INCREF(__pyx_n_s_uint32);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_uint32);
  __Pyx_GIVEREF(__pyx_n_s_uint32);
  __Pyx_INCREF(__pyx_n_s_int64);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_int64);
  __Pyx_GIVEREF(__pyx_n_s_int64);
  __Pyx_INCREF(__pyx_n_s_uint64);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_uint64);
  __Pyx_GIVEREF(__pyx_n_s_uint64);
  __Pyx_INCREF(__pyx_n_s_float32);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_float32);
  __Pyx_GIVEREF(__pyx_n_s_float32);
  __Pyx_INCREF(__pyx_n_s_float64);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_float64);
  __Pyx_GIVEREF(__pyx_n_s_float64);
  __Pyx_INCREF(__pyx_n_s_uint);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_uint);
  __Pyx_GIVEREF(__pyx_n_s_uint);
  __Pyx_INCREF(__pyx_n_s_empty);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_empty);
  __Pyx_GIVEREF(__pyx_n_s_empty);
  __Pyx_INCREF(__pyx_n_s_ones);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_ones);
  __Pyx_GIVEREF(__pyx_n_s_ones);
  __Pyx_INCREF(__pyx_n_s_zeros);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_zeros);
  __Pyx_GIVEREF(__pyx_n_s_zeros);
  __Pyx_INCREF(__pyx_n_s_uint);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_uint);
  __Pyx_GIVEREF(__pyx_n_s_uint);
  __Pyx_INCREF(__pyx_n_s_arange);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_s_arange);
  __Pyx_GIVEREF(__pyx_n_s_arange);
  __Pyx_INCREF(__pyx_n_s_isscalar);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_s_isscalar);
  __Pyx_GIVEREF(__pyx_n_s_isscalar);
  __Pyx_INCREF(__pyx_n_s_amax);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_s_amax);
  __Pyx_GIVEREF(__pyx_n_s_amax);
  __Pyx_INCREF(__pyx_n_s_amin);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_s_amin);
  __Pyx_GIVEREF(__pyx_n_s_amin);
  __Pyx_INCREF(__pyx_n_s_ndarray);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_s_ndarray);
  __Pyx_GIVEREF(__pyx_n_s_ndarray);
  __Pyx_INCREF(__pyx_n_s_array);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_s_array);
  __Pyx_GIVEREF(__pyx_n_s_array);
  __Pyx_INCREF(__pyx_n_s_asarray);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_n_s_asarray);
  __Pyx_GIVEREF(__pyx_n_s_asarray);
  __Pyx_INCREF(__pyx_n_s_isfinite);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_n_s_isfinite);
  __Pyx_GIVEREF(__pyx_n_s_isfinite);
  __Pyx_INCREF(__pyx_n_s_argsort);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_n_s_argsort);
  __Pyx_GIVEREF(__pyx_n_s_argsort);
  __Pyx_INCREF(__pyx_n_s_matrix);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_n_s_matrix);
  __Pyx_GIVEREF(__pyx_n_s_matrix);
  __Pyx_INCREF(__pyx_n_s_nan);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_n_s_nan);
  __Pyx_GIVEREF(__pyx_n_s_nan);
  __Pyx_INCREF(__pyx_n_s_inf);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_n_s_inf);
  __Pyx_GIVEREF(__pyx_n_s_inf);
  __Pyx_INCREF(__pyx_n_s_float);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_n_s_float);
  __Pyx_GIVEREF(__pyx_n_s_float);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_int); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_int, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_int32, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_uint32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_uint32, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_int64, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_uint64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_uint64, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_float32, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_float64, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_uint); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_uint, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_empty, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ones); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ones, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zeros, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_uint); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_uint, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_arange); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arange, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isscalar, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_amax); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_amax, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_amin); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_amin, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ndarray, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_asarray, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_isfinite); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isfinite, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_argsort); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_argsort, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_matrix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matrix, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_nan); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_nan, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_inf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inf, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_float); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_float, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":10
 *     ndarray, array, asarray, isfinite, argsort, matrix, nan, inf, float_
 * 
 * import numpy.random as rn             # <<<<<<<<<<<<<<
 * import tempfile
 * import os
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__31);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__31);
  __Pyx_GIVEREF(__pyx_n_s__31);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy_random, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rn, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":11
 * 
 * import numpy.random as rn
 * import tempfile             # <<<<<<<<<<<<<<
 * import os
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_tempfile, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tempfile, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":12
 * import numpy.random as rn
 * import tempfile
 * import os             # <<<<<<<<<<<<<<
 * 
 * cdef object issparse
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pycpx/pyconcert.pyx":16
 * cdef object issparse
 * 
 * try:             # <<<<<<<<<<<<<<
 *     import scipy.sparse
 *     issparse = scipy.sparse.issparse
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "pycpx/pyconcert.pyx":17
 * 
 * try:
 *     import scipy.sparse             # <<<<<<<<<<<<<<
 *     issparse = scipy.sparse.issparse
 * except ImportError:
 */
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_scipy_sparse, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_scipy, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pycpx/pyconcert.pyx":18
 * try:
 *     import scipy.sparse
 *     issparse = scipy.sparse.issparse             # <<<<<<<<<<<<<<
 * except ImportError:
 *     issparse = lambda x: False
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_scipy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sparse); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_issparse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XGOTREF(__pyx_v_5pycpx_9pyconcert_issparse);
      __Pyx_DECREF_SET(__pyx_v_5pycpx_9pyconcert_issparse, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pycpx/pyconcert.pyx":19
 *     import scipy.sparse
 *     issparse = scipy.sparse.issparse
 * except ImportError:             # <<<<<<<<<<<<<<
 *     issparse = lambda x: False
 * 
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("pycpx.pyconcert", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);

      /* "pycpx/pyconcert.pyx":20
 *     issparse = scipy.sparse.issparse
 * except ImportError:
 *     issparse = lambda x: False             # <<<<<<<<<<<<<<
 * 
 * ################################################################################
 */
      __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5pycpx_9pyconcert_lambda1, 0, __pyx_n_s_lambda, NULL, __pyx_n_s_pycpx_pyconcert, PyModule_GetDict(__pyx_m), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_v_5pycpx_9pyconcert_issparse);
      __Pyx_DECREF_SET(__pyx_v_5pycpx_9pyconcert_issparse, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L9_try_end:;
  }

  /* "pycpx/pyconcert.pyx":210
 * 
 * # Set up the environment
 * cdef IloEnv env = IloEnv()             # <<<<<<<<<<<<<<
 * 
 * #Check if this is valid or not; if not, raise an import error.
 */
  __pyx_v_5pycpx_9pyconcert_env = IloEnv();

  /* "pycpx/pyconcert.pyx":215
 * # TODO....
 * 
 * cdef str s_scalar = "scalar"             # <<<<<<<<<<<<<<
 * 
 * ################################################################################
 */
  __Pyx_INCREF(__pyx_n_s_scalar);
  __Pyx_XGOTREF(__pyx_v_5pycpx_9pyconcert_s_scalar);
  __Pyx_DECREF_SET(__pyx_v_5pycpx_9pyconcert_s_scalar, __pyx_n_s_scalar);
  __Pyx_GIVEREF(__pyx_n_s_scalar);

  /* "pycpx/pyconcert.pyx":229
 * cdef class NumericalArrayWrapper
 * 
 * class CPlexException(Exception):             # <<<<<<<<<<<<<<
 *     """
 *     The base class for any exception raised due to problems with
 */
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_7, __pyx_n_s_CPlexException, __pyx_n_s_CPlexException, (PyObject *) NULL, __pyx_n_s_pycpx_pyconcert, __pyx_kp_s_The_base_class_for_any_exceptio); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_CPlexException, __pyx_t_7, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CPlexException, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pycpx/pyconcert.pyx":242
 *     pass
 * 
 * class CPlexInitError(CPlexException):             # <<<<<<<<<<<<<<
 *     """
 *     Raised if there is an error initializing the CPlex engine or a
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_2, __pyx_n_s_CPlexInitError, __pyx_n_s_CPlexInitError, (PyObject *) NULL, __pyx_n_s_pycpx_pyconcert, __pyx_kp_s_Raised_if_there_is_an_error_ini); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_CPlexInitError, __pyx_t_2, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CPlexInitError, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":250
 *     pass
 * 
 * class CPlexNoSolution(CPlexException):             # <<<<<<<<<<<<<<
 *     """
 *     Exception raised if the model is unbounded or infeasible.
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_CPlexException); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_7, __pyx_n_s_CPlexNoSolution, __pyx_n_s_CPlexNoSolution, (PyObject *) NULL, __pyx_n_s_pycpx_pyconcert, __pyx_kp_s_Exception_raised_if_the_model_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_CPlexNoSolution, __pyx_t_7, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CPlexNoSolution, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "pycpx/pyconcert.pyx":373
 * # Operations
 * 
 * cdef dict _op_type_strings = {             # <<<<<<<<<<<<<<
 *     OP_B_ADD      : "+",
 *     OP_B_SUBTRACT : "-",
 */
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "pycpx/pyconcert.pyx":374
 * 
 * cdef dict _op_type_strings = {
 *     OP_B_ADD      : "+",             # <<<<<<<<<<<<<<
 *     OP_B_SUBTRACT : "-",
 *     OP_B_MULTIPLY : "*",
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_ADD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_t_2, __pyx_kp_s__32) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":375
 * cdef dict _op_type_strings = {
 *     OP_B_ADD      : "+",
 *     OP_B_SUBTRACT : "-",             # <<<<<<<<<<<<<<
 *     OP_B_MULTIPLY : "*",
 *     OP_B_DIVIDE   : "/",
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_SUBTRACT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_t_2, __pyx_kp_s__33) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":376
 *     OP_B_ADD      : "+",
 *     OP_B_SUBTRACT : "-",
 *     OP_B_MULTIPLY : "*",             # <<<<<<<<<<<<<<
 *     OP_B_DIVIDE   : "/",
 *     OP_B_EQUAL    : "==",
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_MULTIPLY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_t_2, __pyx_n_s__31) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":377
 *     OP_B_SUBTRACT : "-",
 *     OP_B_MULTIPLY : "*",
 *     OP_B_DIVIDE   : "/",             # <<<<<<<<<<<<<<
 *     OP_B_EQUAL    : "==",
 *     OP_B_NOTEQ    : "!=",
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_DIVIDE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_t_2, __pyx_kp_s__34) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":378
 *     OP_B_MULTIPLY : "*",
 *     OP_B_DIVIDE   : "/",
 *     OP_B_EQUAL    : "==",             # <<<<<<<<<<<<<<
 *     OP_B_NOTEQ    : "!=",
 *     OP_B_LTEQ     : "<=",
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_EQUAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_t_2, __pyx_kp_s__35) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":379
 *     OP_B_DIVIDE   : "/",
 *     OP_B_EQUAL    : "==",
 *     OP_B_NOTEQ    : "!=",             # <<<<<<<<<<<<<<
 *     OP_B_LTEQ     : "<=",
 *     OP_B_LT       : "<",
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_NOTEQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_t_2, __pyx_kp_s__36) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":380
 *     OP_B_EQUAL    : "==",
 *     OP_B_NOTEQ    : "!=",
 *     OP_B_LTEQ     : "<=",             # <<<<<<<<<<<<<<
 *     OP_B_LT       : "<",
 *     OP_B_GT       : ">",
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_LTEQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_t_2, __pyx_kp_s__37) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":381
 *     OP_B_NOTEQ    : "!=",
 *     OP_B_LTEQ     : "<=",
 *     OP_B_LT       : "<",             # <<<<<<<<<<<<<<
 *     OP_B_GT       : ">",
 *     OP_B_GTEQ     : ">=" }
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_LT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_t_2, __pyx_kp_s__38) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":382
 *     OP_B_LTEQ     : "<=",
 *     OP_B_LT       : "<",
 *     OP_B_GT       : ">",             # <<<<<<<<<<<<<<
 *     OP_B_GTEQ     : ">=" }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_GT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_t_2, __pyx_kp_s__39) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":383
 *     OP_B_LT       : "<",
 *     OP_B_GT       : ">",
 *     OP_B_GTEQ     : ">=" }             # <<<<<<<<<<<<<<
 * 
 * cdef str opTypeStrings(int op_code):
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(OP_B_GTEQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_t_2, __pyx_kp_s__40) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_5pycpx_9pyconcert__op_type_strings);
  __Pyx_DECREF_SET(__pyx_v_5pycpx_9pyconcert__op_type_strings, ((PyObject*)__pyx_t_7));
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "pycpx/pyconcert.pyx":668
 *     # More special methods coming
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the transpose of the current expression matrix.  This
 */
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression, __pyx_n_s_T); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "pycpx/pyconcert.pyx":667
 * 
 *     # More special methods coming
 *     @property             # <<<<<<<<<<<<<<
 *     def T(self):
 *         """
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression->tp_dict, __pyx_n_s_T, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5pycpx_9pyconcert_CPlexExpression);

  /* "pycpx/pyconcert.pyx":684
 * 
 *     @property
 *     def A(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the expression object as an array, causing it to
 */
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression, __pyx_n_s_A); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "pycpx/pyconcert.pyx":683
 *         return newCPEFromCPEWithSameProperties(self, self.data.newTransposed())
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A(self):
 *         """
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression->tp_dict, __pyx_n_s_A, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5pycpx_9pyconcert_CPlexExpression);

  /* "pycpx/pyconcert.pyx":702
 * 
 *     @property
 *     def M(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the expression object as a matrix, causing it to
 */
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression, __pyx_n_s_M); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "pycpx/pyconcert.pyx":701
 *         return newCPEFromCPEWithSameProperties(self, self.data.newAsArray())
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def M(self):
 *         """
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression->tp_dict, __pyx_n_s_M, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5pycpx_9pyconcert_CPlexExpression);

  /* "pycpx/pyconcert.pyx":722
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the shape of the expression as a 2-tuple.
 */
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "pycpx/pyconcert.pyx":721
 *         return newCPEFromCPEWithSameProperties(self, newFromUnaryOp(self.data[0], OP_U_NEGATIVE))
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def shape(self):
 *         """
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression->tp_dict, __pyx_n_s_shape, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5pycpx_9pyconcert_CPlexExpression);

  /* "pycpx/pyconcert.pyx":729
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the total number of elements in the current expression.
 */
  __pyx_t_7 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression, __pyx_n_s_size); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "pycpx/pyconcert.pyx":728
 *         return (self.data.md().shape(0), self.data.md().shape(1))
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         """
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5pycpx_9pyconcert_CPlexExpression->tp_dict, __pyx_n_s_size, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_5pycpx_9pyconcert_CPlexExpression);

  /* "pycpx/pyconcert.pyx":970
 * 
 * # Set up a dictionary mapping the variable type to an easy thing
 * cdef dict _vartype_map = {             # <<<<<<<<<<<<<<
 *     float     : FLOAT_TYPE,
 *     "float"   : FLOAT_TYPE,
 */
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "pycpx/pyconcert.pyx":971
 * # Set up a dictionary mapping the variable type to an easy thing
 * cdef dict _vartype_map = {
 *     float     : FLOAT_TYPE,             # <<<<<<<<<<<<<<
 *     "float"   : FLOAT_TYPE,
 *     "real"    : FLOAT_TYPE,
 */
  if (PyDict_SetItem(__pyx_t_7, ((PyObject *)((PyObject*)(&PyFloat_Type))), __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_float_2, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_real, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_double, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_f, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_d_3, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pycpx/pyconcert.pyx":978
 *     "d"       : FLOAT_TYPE,
 *     # Integer types
 *     int       : INT_TYPE,             # <<<<<<<<<<<<<<
 *     long      : INT_TYPE,
 *     "int"     : INT_TYPE,
 */
  if (PyDict_SetItem(__pyx_t_7, ((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pycpx/pyconcert.pyx":979
 *     # Integer types
 *     int       : INT_TYPE,
 *     long      : INT_TYPE,             # <<<<<<<<<<<<<<
 *     "int"     : INT_TYPE,
 *     "integer" : INT_TYPE,
 */
  if (PyDict_SetItem(__pyx_t_7, ((PyObject *)((PyObject*)(&PyLong_Type))), __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_int_2, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_integer, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_i, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pycpx/pyconcert.pyx":985
 * 
 *     # Boolean types
 *     bool      : BOOL_TYPE,             # <<<<<<<<<<<<<<
 *     "bool"    : BOOL_TYPE,
 *     "binary"  : BOOL_TYPE,
 */
  if (PyDict_SetItem(__pyx_t_7, ((PyObject*)&PyBool_Type), __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_bool, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_binary, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_boolean, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_b, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_5pycpx_9pyconcert__vartype_map);
  __Pyx_DECREF_SET(__pyx_v_5pycpx_9pyconcert__vartype_map, ((PyObject*)__pyx_t_7));
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "pycpx/pyconcert.pyx":1386
 * # Now the model
 * 
 * cdef dict model_lookup = {             # <<<<<<<<<<<<<<
 *     "auto"       : CPX_ALG_AUTOMATIC,
 *     "automatic"  : CPX_ALG_AUTOMATIC,
 */
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "pycpx/pyconcert.pyx":1387
 * 
 * cdef dict model_lookup = {
 *     "auto"       : CPX_ALG_AUTOMATIC,             # <<<<<<<<<<<<<<
 *     "automatic"  : CPX_ALG_AUTOMATIC,
 *     "primal"     : CPX_ALG_PRIMAL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(CPX_ALG_AUTOMATIC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_auto, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":1388
 * cdef dict model_lookup = {
 *     "auto"       : CPX_ALG_AUTOMATIC,
 *     "automatic"  : CPX_ALG_AUTOMATIC,             # <<<<<<<<<<<<<<
 *     "primal"     : CPX_ALG_PRIMAL,
 *     "dual"       : CPX_ALG_DUAL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(CPX_ALG_AUTOMATIC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_automatic, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":1389
 *     "auto"       : CPX_ALG_AUTOMATIC,
 *     "automatic"  : CPX_ALG_AUTOMATIC,
 *     "primal"     : CPX_ALG_PRIMAL,             # <<<<<<<<<<<<<<
 *     "dual"       : CPX_ALG_DUAL,
 *     "barrier"    : CPX_ALG_BARRIER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(CPX_ALG_PRIMAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_primal, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":1390
 *     "automatic"  : CPX_ALG_AUTOMATIC,
 *     "primal"     : CPX_ALG_PRIMAL,
 *     "dual"       : CPX_ALG_DUAL,             # <<<<<<<<<<<<<<
 *     "barrier"    : CPX_ALG_BARRIER,
 *     "sifting"    : CPX_ALG_SIFTING,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(CPX_ALG_DUAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dual, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":1391
 *     "primal"     : CPX_ALG_PRIMAL,
 *     "dual"       : CPX_ALG_DUAL,
 *     "barrier"    : CPX_ALG_BARRIER,             # <<<<<<<<<<<<<<
 *     "sifting"    : CPX_ALG_SIFTING,
 *     "concurrent" : CPX_ALG_CONCURRENT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(CPX_ALG_BARRIER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_barrier, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":1392
 *     "dual"       : CPX_ALG_DUAL,
 *     "barrier"    : CPX_ALG_BARRIER,
 *     "sifting"    : CPX_ALG_SIFTING,             # <<<<<<<<<<<<<<
 *     "concurrent" : CPX_ALG_CONCURRENT,
 *     "net"        : CPX_ALG_NET,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(CPX_ALG_SIFTING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_sifting, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":1393
 *     "barrier"    : CPX_ALG_BARRIER,
 *     "sifting"    : CPX_ALG_SIFTING,
 *     "concurrent" : CPX_ALG_CONCURRENT,             # <<<<<<<<<<<<<<
 *     "net"        : CPX_ALG_NET,
 *     "netflow"    : CPX_ALG_NET }
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(CPX_ALG_CONCURRENT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_concurrent, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":1394
 *     "sifting"    : CPX_ALG_SIFTING,
 *     "concurrent" : CPX_ALG_CONCURRENT,
 *     "net"        : CPX_ALG_NET,             # <<<<<<<<<<<<<<
 *     "netflow"    : CPX_ALG_NET }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(CPX_ALG_NET); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_net, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pycpx/pyconcert.pyx":1395
 *     "concurrent" : CPX_ALG_CONCURRENT,
 *     "net"        : CPX_ALG_NET,
 *     "netflow"    : CPX_ALG_NET }             # <<<<<<<<<<<<<<
 * 
 * cdef class CPlexModel(object):
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(CPX_ALG_NET); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_netflow, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XGOTREF(__pyx_v_5pycpx_9pyconcert_model_lookup);
  __Pyx_DECREF_SET(__pyx_v_5pycpx_9pyconcert_model_lookup, ((PyObject*)__pyx_t_7));
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "pycpx/pyconcert.pyx":1465
 *             raise RuntimeError("CPlex model not properly initialized!")
 * 
 *     def new(self, size = s_scalar, vtype = 'real', lb = None, ub = None, str name = None):             # <<<<<<<<<<<<<<
 *         """
 *         Creates a new variable or set of variables for use in the
 */
  __Pyx_INCREF(__pyx_v_5pycpx_9pyconcert_s_scalar);
  __pyx_k__17 = __pyx_v_5pycpx_9pyconcert_s_scalar;
  __Pyx_GIVEREF(__pyx_v_5pycpx_9pyconcert_s_scalar);

  /* "pycpx/pyconcert.pyx":1842
 *     cpdef solve(self, objective, maximize = None, minimize = None,
 *               bint recycle_variables = False, bint recycle_basis = True,
 *               dict starting_dict = {}, str basis_file = None,             # <<<<<<<<<<<<<<
 *               algorithm = "auto", max_threads = None, relative_gap = None,
 *               emphasis = None, time_limit = None, tree_limit = None,
 */
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__18 = ((PyObject*)__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "pycpx/pyconcert.pyx":1
 * from numpy cimport ndarray as ar, \             # <<<<<<<<<<<<<<
 *     int_t, uint_t, int32_t, uint32_t, int64_t, uint64_t, float_t
 * 
 */
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_kp_u_CPlexModel_new_line_1465, __pyx_kp_u_Creates_a_new_variable_or_set_o) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_kp_u_CPlexModel_removeConstraint_line, __pyx_kp_u_Removes_one_or_more_constraints) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_kp_u_CPlexModel_solve_line_1840, __pyx_kp_u_Solves_the_current_model_trying) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_kp_u_CPlexModel_value_line_2188, __pyx_kp_u_Returns_a_scalar_numpy_array_or) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_7, __pyx_kp_u_CPlexModel_asString_line_2298, __pyx_kp_u_Returns_a_string_representation) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pycpx.pyconcert", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pycpx.pyconcert");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        #if CYTHON_PEP393_ENABLED
        if (unlikely(PyUnicode_READY(s1) < 0) || unlikely(PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, length * kind);
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL)
}
#endif

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1) /* First char was not a digit */
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count; /* Consume from buffer string */
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break; /* breaks both loops as ctx->enc_count == 0 */
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue; /* empty struct */
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;  /* not a 'break' in the loop */
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
                return ts;
      case ' ':
      case 10:
      case 13:
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T': /* substruct */
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}': /* end of substruct; either repeat or move on */
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }        /* fall through */
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 's': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
        } else {
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_count = ctx->new_count;
          ctx->enc_packmode = ctx->new_packmode;
          ctx->enc_type = *ts;
          ctx->is_complex = got_Z;
        }
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if CYTHON_COMPILING_IN_PYPY
    float_value = PyNumber_Float(obj);
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* iter_obj, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL)
        value = Py_None; /* Mark as deleted */
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED /* < Py2.5 */
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    op->func_weakreflist = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (m->func_weakreflist != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return PyMethod_New(func,
                            type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("cython_function_or_method"), /*tp_name*/
    sizeof(__pyx_CyFunctionObject),   /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_CyFunction_dealloc, /*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    (reprfunc) __Pyx_CyFunction_repr,   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    __Pyx_CyFunction_Call,              /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_CyFunction_traverse,   /*tp_traverse*/
    (inquiry) __Pyx_CyFunction_clear,   /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_CyFunctionObject, func_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    0,                                  /*tp_iternext*/
    __pyx_CyFunction_methods,           /*tp_methods*/
    __pyx_CyFunction_members,           /*tp_members*/
    __pyx_CyFunction_getsets,           /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    __Pyx_CyFunction_descr_get,         /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    offsetof(__pyx_CyFunctionObject, func_dict),/*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    0,                                  /*tp_del*/
#if PY_VERSION_HEX >= 0x02060000
    0,                                  /*tp_version_tag*/
#endif
#if PY_VERSION_HEX >= 0x030400a1
    0,                                  /*tp_finalize*/
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
  #if PY_VERSION_HEX >= 0x02060000
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
  #endif
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
  #if PY_VERSION_HEX < 0x02060000
    if (obj->ob_type->tp_dict) {
        PyObject *getbuffer_cobj = PyObject_GetItem(
            obj->ob_type->tp_dict, __pyx_n_s_pyx_getbuffer);
        if (getbuffer_cobj) {
            getbufferproc func = (getbufferproc) PyCObject_AsVoidPtr(getbuffer_cobj);
            Py_DECREF(getbuffer_cobj);
            if (!func)
                goto fail;
            return func(obj, view, flags);
        } else {
            PyErr_Clear();
        }
    }
  #endif
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
#if PY_VERSION_HEX < 0x02060000
fail:
#endif
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
  #if PY_VERSION_HEX >= 0x02060000
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
  #endif
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
  #if PY_VERSION_HEX < 0x02060000
    if (obj->ob_type->tp_dict) {
        PyObject *releasebuffer_cobj = PyObject_GetItem(
            obj->ob_type->tp_dict, __pyx_n_s_pyx_releasebuffer);
        if (releasebuffer_cobj) {
            releasebufferproc func = (releasebufferproc) PyCObject_AsVoidPtr(releasebuffer_cobj);
            Py_DECREF(releasebuffer_cobj);
            if (!func)
                goto fail;
            func(obj, view);
            return;
        } else {
            PyErr_Clear();
        }
    }
  #endif
    goto nofail;
#if PY_VERSION_HEX < 0x02060000
fail:
#endif
    PyErr_WriteUnraisable(obj);
nofail:
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif /*  PY_MAJOR_VERSION < 3 */


            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(size_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong)
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_Size(o);
        return PyByteArray_AsString(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
